#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\Controls\PopupWithTwoButtons.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "FD0D29986C92BC35D68A57D79DBDC6D9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.Controls
{
    partial class PopupWithTwoButtons : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Border_Background(global::Windows.UI.Xaml.Controls.Border obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_SmallPopupHeader_Text(global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_SmallPopupHeader_CancelCommand(global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_ControlLib_GenericButton_BottomBackGroundColor(global::Infonet.CStoreCommander.ControlLib.GenericButton obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.BottomBackGroundColor = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
        };

        private class PopupWithTwoButtons_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPopupWithTwoButtons_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Border obj2;
            private global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader obj3;
            private global::Windows.UI.Xaml.Controls.TextBlock obj4;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj5;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj6;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj7;

            private PopupWithTwoButtons_obj1_BindingsTracking bindingsTracking;

            public PopupWithTwoButtons_obj1_Bindings()
            {
                this.bindingsTracking = new PopupWithTwoButtons_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = (global::Windows.UI.Xaml.Controls.Border)target;
                        break;
                    case 3:
                        this.obj3 = (global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader)target;
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 5:
                        this.obj5 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 6:
                        this.obj6 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 7:
                        this.obj7 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    default:
                        break;
                }
            }

            // IPopupWithTwoButtons_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // PopupWithTwoButtons_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_BackgroundOverlay(obj.BackgroundOverlay, phase);
                        this.Update_HeadingText(obj.HeadingText, phase);
                        this.Update_VMBase(obj.VMBase, phase);
                        this.Update_Description(obj.Description, phase);
                        this.Update_FirstButtonBottomBackgroundColor(obj.FirstButtonBottomBackgroundColor, phase);
                        this.Update_FirstButtonText(obj.FirstButtonText, phase);
                        this.Update_SecondButtonBottomBackgroundColor(obj.SecondButtonBottomBackgroundColor, phase);
                        this.Update_SecondButtonText(obj.SecondButtonText, phase);
                        this.Update_ThirdButtonBottomBackgroundColor(obj.ThirdButtonBottomBackgroundColor, phase);
                        this.Update_IsThirdButtonVisible(obj.IsThirdButtonVisible, phase);
                        this.Update_ThirdButtonText(obj.ThirdButtonText, phase);
                    }
                }
            }
            private void Update_BackgroundOverlay(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Border_Background(this.obj2, obj, null);
                }
            }
            private void Update_HeadingText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_SmallPopupHeader_Text(this.obj3, obj, null);
                }
            }
            private void Update_VMBase(global::Infonet.CStoreCommander.UI.ViewModel.VMBase obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_VMBase(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_VMBase_PopupService(obj.PopupService, phase);
                    }
                }
            }
            private void Update_VMBase_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_VMBase_PopupService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_VMBase_PopupService_CloseCommand(obj.CloseCommand, phase);
                        this.Update_VMBase_PopupService_IsYesbuttonEnabled(obj.IsYesbuttonEnabled, phase);
                        this.Update_VMBase_PopupService_YesConfirmationCommand(obj.YesConfirmationCommand, phase);
                        this.Update_VMBase_PopupService_NoConfirmationCommand(obj.NoConfirmationCommand, phase);
                        this.Update_VMBase_PopupService_IsNoButtonEnabled(obj.IsNoButtonEnabled, phase);
                        this.Update_VMBase_PopupService_ThirdButtonCommand(obj.ThirdButtonCommand, phase);
                    }
                }
            }
            private void Update_VMBase_PopupService_CloseCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_SmallPopupHeader_CancelCommand(this.obj3, obj, null);
                }
            }
            private void Update_Description(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj4, obj, null);
                }
            }
            private void Update_FirstButtonBottomBackgroundColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_GenericButton_BottomBackGroundColor(this.obj5, obj, null);
                }
            }
            private void Update_VMBase_PopupService_IsYesbuttonEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj5, obj);
                }
            }
            private void Update_VMBase_PopupService_YesConfirmationCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj5, obj, null);
                }
            }
            private void Update_FirstButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj5, obj, null);
                }
            }
            private void Update_SecondButtonBottomBackgroundColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_GenericButton_BottomBackGroundColor(this.obj6, obj, null);
                }
            }
            private void Update_VMBase_PopupService_NoConfirmationCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj6, obj, null);
                }
            }
            private void Update_VMBase_PopupService_IsNoButtonEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj6, obj);
                }
            }
            private void Update_SecondButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj6, obj, null);
                }
            }
            private void Update_ThirdButtonBottomBackgroundColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_GenericButton_BottomBackGroundColor(this.obj7, obj, null);
                }
            }
            private void Update_IsThirdButtonVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_VMBase_PopupService_ThirdButtonCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj7, obj, null);
                }
            }
            private void Update_ThirdButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj7, obj, null);
                }
            }

            private class PopupWithTwoButtons_obj1_BindingsTracking
            {
                global::System.WeakReference<PopupWithTwoButtons_obj1_Bindings> WeakRefToBindingObj; 

                public PopupWithTwoButtons_obj1_BindingsTracking(PopupWithTwoButtons_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<PopupWithTwoButtons_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_VMBase(null);
                    UpdateChildListeners_VMBase_PopupService(null);
                }

                public void DependencyPropertyChanged_BackgroundOverlay(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_BackgroundOverlay(obj.BackgroundOverlay, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_HeadingText(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_HeadingText(obj.HeadingText, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_Description(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_Description(obj.Description, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_FirstButtonBottomBackgroundColor(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_FirstButtonBottomBackgroundColor(obj.FirstButtonBottomBackgroundColor, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_FirstButtonText(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_FirstButtonText(obj.FirstButtonText, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_SecondButtonBottomBackgroundColor(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_SecondButtonBottomBackgroundColor(obj.SecondButtonBottomBackgroundColor, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_SecondButtonText(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_SecondButtonText(obj.SecondButtonText, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_ThirdButtonBottomBackgroundColor(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_ThirdButtonBottomBackgroundColor(obj.ThirdButtonBottomBackgroundColor, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_IsThirdButtonVisible(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_IsThirdButtonVisible(obj.IsThirdButtonVisible, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_ThirdButtonText(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj = sender as global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons;
        if (obj != null)
        {
            bindings.Update_ThirdButtonText(obj.ThirdButtonText, DATA_CHANGED);
        }
                    }
                }
                private long tokenDPC_BackgroundOverlay = 0;
                private long tokenDPC_HeadingText = 0;
                private long tokenDPC_Description = 0;
                private long tokenDPC_FirstButtonBottomBackgroundColor = 0;
                private long tokenDPC_FirstButtonText = 0;
                private long tokenDPC_SecondButtonBottomBackgroundColor = 0;
                private long tokenDPC_SecondButtonText = 0;
                private long tokenDPC_ThirdButtonBottomBackgroundColor = 0;
                private long tokenDPC_IsThirdButtonVisible = 0;
                private long tokenDPC_ThirdButtonText = 0;
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.BackgroundOverlayProperty, tokenDPC_BackgroundOverlay);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.HeadingTextProperty, tokenDPC_HeadingText);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.DescriptionProperty, tokenDPC_Description);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.FirstButtonBottomBackgroundColorProperty, tokenDPC_FirstButtonBottomBackgroundColor);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.FirstButtonTextProperty, tokenDPC_FirstButtonText);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.SecondButtonBottomBackgroundColorProperty, tokenDPC_SecondButtonBottomBackgroundColor);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.SecondButtonTextProperty, tokenDPC_SecondButtonText);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.ThirdButtonBottomBackgroundColorProperty, tokenDPC_ThirdButtonBottomBackgroundColor);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.IsThirdButtonVisibleProperty, tokenDPC_IsThirdButtonVisible);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.ThirdButtonTextProperty, tokenDPC_ThirdButtonText);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_BackgroundOverlay = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.BackgroundOverlayProperty, DependencyPropertyChanged_BackgroundOverlay);
                            tokenDPC_HeadingText = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.HeadingTextProperty, DependencyPropertyChanged_HeadingText);
                            tokenDPC_Description = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.DescriptionProperty, DependencyPropertyChanged_Description);
                            tokenDPC_FirstButtonBottomBackgroundColor = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.FirstButtonBottomBackgroundColorProperty, DependencyPropertyChanged_FirstButtonBottomBackgroundColor);
                            tokenDPC_FirstButtonText = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.FirstButtonTextProperty, DependencyPropertyChanged_FirstButtonText);
                            tokenDPC_SecondButtonBottomBackgroundColor = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.SecondButtonBottomBackgroundColorProperty, DependencyPropertyChanged_SecondButtonBottomBackgroundColor);
                            tokenDPC_SecondButtonText = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.SecondButtonTextProperty, DependencyPropertyChanged_SecondButtonText);
                            tokenDPC_ThirdButtonBottomBackgroundColor = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.ThirdButtonBottomBackgroundColorProperty, DependencyPropertyChanged_ThirdButtonBottomBackgroundColor);
                            tokenDPC_IsThirdButtonVisible = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.IsThirdButtonVisibleProperty, DependencyPropertyChanged_IsThirdButtonVisible);
                            tokenDPC_ThirdButtonText = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons.ThirdButtonTextProperty, DependencyPropertyChanged_ThirdButtonText);
                        }
                    }
                }
                public void PropertyChanged_VMBase(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.VMBase obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.VMBase;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_VMBase_PopupService(obj.PopupService, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "PopupService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VMBase_PopupService(obj.PopupService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.VMBase cache_VMBase = null;
                public void UpdateChildListeners_VMBase(global::Infonet.CStoreCommander.UI.ViewModel.VMBase obj)
                {
                    if (obj != cache_VMBase)
                    {
                        if (cache_VMBase != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_VMBase).PropertyChanged -= PropertyChanged_VMBase;
                            cache_VMBase = null;
                        }
                        if (obj != null)
                        {
                            cache_VMBase = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_VMBase;
                        }
                    }
                }
                public void PropertyChanged_VMBase_PopupService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PopupWithTwoButtons_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Utility.PopupService obj = sender as global::Infonet.CStoreCommander.UI.Utility.PopupService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_VMBase_PopupService_CloseCommand(obj.CloseCommand, DATA_CHANGED);
                                    bindings.Update_VMBase_PopupService_IsYesbuttonEnabled(obj.IsYesbuttonEnabled, DATA_CHANGED);
                                    bindings.Update_VMBase_PopupService_YesConfirmationCommand(obj.YesConfirmationCommand, DATA_CHANGED);
                                    bindings.Update_VMBase_PopupService_NoConfirmationCommand(obj.NoConfirmationCommand, DATA_CHANGED);
                                    bindings.Update_VMBase_PopupService_IsNoButtonEnabled(obj.IsNoButtonEnabled, DATA_CHANGED);
                                    bindings.Update_VMBase_PopupService_ThirdButtonCommand(obj.ThirdButtonCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CloseCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VMBase_PopupService_CloseCommand(obj.CloseCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsYesbuttonEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VMBase_PopupService_IsYesbuttonEnabled(obj.IsYesbuttonEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesConfirmationCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VMBase_PopupService_YesConfirmationCommand(obj.YesConfirmationCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoConfirmationCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VMBase_PopupService_NoConfirmationCommand(obj.NoConfirmationCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsNoButtonEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VMBase_PopupService_IsNoButtonEnabled(obj.IsNoButtonEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ThirdButtonCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VMBase_PopupService_ThirdButtonCommand(obj.ThirdButtonCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Utility.PopupService cache_VMBase_PopupService = null;
                public void UpdateChildListeners_VMBase_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj)
                {
                    if (obj != cache_VMBase_PopupService)
                    {
                        if (cache_VMBase_PopupService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_VMBase_PopupService).PropertyChanged -= PropertyChanged_VMBase_PopupService;
                            cache_VMBase_PopupService = null;
                        }
                        if (obj != null)
                        {
                            cache_VMBase_PopupService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_VMBase_PopupService;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3:
                {
                    this.TitleText = (global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader)(target);
                }
                break;
            case 5:
                {
                    this.ConfirmButton = (global::Infonet.CStoreCommander.ControlLib.GenericButton)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    PopupWithTwoButtons_obj1_Bindings bindings = new PopupWithTwoButtons_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

