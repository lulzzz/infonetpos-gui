#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\Controls\PumpDataTemplate.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "5B6BFA763F66B19A952194889324D2DE"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.Controls
{
    partial class PumpDataTemplate : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Value = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_Background(global::Windows.UI.Xaml.Controls.Control obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_FontSize(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.Double value)
            {
                obj.FontSize = value;
            }
        };

        private class PumpDataTemplate_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPumpDataTemplate_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj3;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj4;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj5;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj6;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj7;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj8;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj9;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj10;
            private global::Windows.UI.Xaml.Controls.ComboBox obj12;
            private global::Windows.UI.Xaml.Controls.Button obj13;
            private global::Windows.UI.Xaml.Controls.ComboBox obj14;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Controls.Image obj17;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj18;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj19;
            private global::Windows.UI.Xaml.Controls.TextBlock obj21;
            private global::Windows.UI.Xaml.Controls.TextBlock obj22;
            private global::Windows.UI.Xaml.Controls.TextBlock obj23;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj24;

            private PumpDataTemplate_obj1_BindingsTracking bindingsTracking;

            public PumpDataTemplate_obj1_Bindings()
            {
                this.bindingsTracking = new PumpDataTemplate_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3:
                        this.obj3 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 4:
                        this.obj4 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 5:
                        this.obj5 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 6:
                        this.obj6 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 7:
                        this.obj7 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 8:
                        this.obj8 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 9:
                        this.obj9 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 10:
                        this.obj10 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        (this.obj14).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PumpDetailModel.SelectedCurrentStackIndex = (this.obj14).SelectedIndex;
                                }
                            });
                        break;
                    case 15:
                        this.obj15 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 18:
                        this.obj18 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 19:
                        this.obj19 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 21:
                        this.obj21 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 22:
                        this.obj22 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 23:
                        this.obj23 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 24:
                        this.obj24 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IPumpDataTemplate_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // PumpDataTemplate_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HomeScreenVM(obj.HomeScreenVM, phase);
                        this.Update_PumpDetailModel(obj.PumpDetailModel, phase);
                        this.Update_AddBasketCommand(obj.AddBasketCommand, phase);
                        this.Update_PumpInteractionCommand(obj.PumpInteractionCommand, phase);
                        this.Update_pumpNumber(obj.pumpNumber, phase);
                        this.Update_pumpStatus(obj.pumpStatus, phase);
                    }
                }
            }
            private void Update_HomeScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_HomeScreenVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HomeScreenVM_NumberOfPumpRows(obj.NumberOfPumpRows, phase);
                        this.Update_HomeScreenVM_CurrentStackCommand(obj.CurrentStackCommand, phase);
                        this.Update_HomeScreenVM_AuthorizePumpCommand(obj.AuthorizePumpCommand, phase);
                    }
                }
            }
            private void Update_HomeScreenVM_NumberOfPumpRows(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj3, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj4, obj, null);
                }
            }
            private void Update_PumpDetailModel(global::Infonet.CStoreCommander.UI.Model.PumpDetailModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PumpDetailModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PumpDetailModel_Status(obj.Status, phase);
                        this.Update_PumpDetailModel_IsPumpOptionCBVisible(obj.IsPumpOptionCBVisible, phase);
                        this.Update_PumpDetailModel_CriticalLevelColor(obj.CriticalLevelColor, phase);
                        this.Update_PumpDetailModel_PumpNumber(obj.PumpNumber, phase);
                        this.Update_PumpDetailModel_SelectedCurrentStackIndex(obj.SelectedCurrentStackIndex, phase);
                        this.Update_PumpDetailModel_EnableStackBasketBotton(obj.EnableStackBasketBotton, phase);
                        this.Update_PumpDetailModel_Stacked(obj.Stacked, phase);
                        this.Update_PumpDetailModel_BasketButtonCaption(obj.BasketButtonCaption, phase);
                        this.Update_PumpDetailModel_PumpButtonCaption(obj.PumpButtonCaption, phase);
                    }
                }
            }
            private void Update_PumpDetailModel_Status(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj5, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj6, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj7, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj8, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj9, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj10, obj, null);
                }
            }
            private void Update_PumpDetailModel_IsPumpOptionCBVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PumpDetailModel_CriticalLevelColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_Background(this.obj13, obj, null);
                }
            }
            private void Update_AddBasketCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj13, obj, null);
                }
            }
            private void Update_PumpDetailModel_PumpNumber(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(this.obj13, obj, null);
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(this.obj18, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj21, obj.ToString(), null);
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(this.obj24, obj, null);
                }
            }
            private void Update_PumpDetailModel_SelectedCurrentStackIndex(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj14, obj);
                }
            }
            private void Update_PumpDetailModel_EnableStackBasketBotton(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj17, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PumpDetailModel_Stacked(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stacked> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj14, obj, null);
                }
            }
            private void Update_HomeScreenVM_CurrentStackCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj15, obj, null);
                }
            }
            private void Update_PumpDetailModel_BasketButtonCaption(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                }
            }
            private void Update_HomeScreenVM_AuthorizePumpCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj18, obj, null);
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj24, obj, null);
                }
            }
            private void Update_PumpInteractionCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj19, obj, null);
                }
            }
            private void Update_pumpNumber(global::Windows.UI.Xaml.Controls.TextBlock obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_pumpNumber(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_pumpNumber_Foreground(obj.Foreground, phase);
                    }
                }
            }
            private void Update_pumpNumber_Foreground(global::Windows.UI.Xaml.Media.Brush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj22, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj23, obj, null);
                }
            }
            private void Update_pumpStatus(global::Windows.UI.Xaml.Controls.TextBlock obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_pumpStatus(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_pumpStatus_FontSize(obj.FontSize, phase);
                    }
                }
            }
            private void Update_pumpStatus_FontSize(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_FontSize(this.obj22, obj);
                }
            }
            private void Update_PumpDetailModel_PumpButtonCaption(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj23, obj, null);
                }
            }

            private class PumpDataTemplate_obj1_BindingsTracking
            {
                global::System.WeakReference<PumpDataTemplate_obj1_Bindings> WeakRefToBindingObj; 

                public PumpDataTemplate_obj1_BindingsTracking(PumpDataTemplate_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<PumpDataTemplate_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_HomeScreenVM(null);
                    UpdateChildListeners_PumpDetailModel(null);
                    UpdateChildListeners_pumpNumber(null);
                    UpdateChildListeners_pumpStatus(null);
                }

                public void DependencyPropertyChanged_AddBasketCommand(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate obj = sender as global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate;
        if (obj != null)
        {
            bindings.Update_AddBasketCommand(obj.AddBasketCommand, DATA_CHANGED);
        }
                    }
                }
                public void DependencyPropertyChanged_PumpInteractionCommand(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate obj = sender as global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate;
        if (obj != null)
        {
            bindings.Update_PumpInteractionCommand(obj.PumpInteractionCommand, DATA_CHANGED);
        }
                    }
                }
                private long tokenDPC_AddBasketCommand = 0;
                private long tokenDPC_PumpInteractionCommand = 0;
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate obj)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate.AddBasketCommandProperty, tokenDPC_AddBasketCommand);
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate.PumpInteractionCommandProperty, tokenDPC_PumpInteractionCommand);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_AddBasketCommand = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate.AddBasketCommandProperty, DependencyPropertyChanged_AddBasketCommand);
                            tokenDPC_PumpInteractionCommand = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.PumpDataTemplate.PumpInteractionCommandProperty, DependencyPropertyChanged_PumpInteractionCommand);
                        }
                    }
                }
                public void PropertyChanged_HomeScreenVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_HomeScreenVM_NumberOfPumpRows(obj.NumberOfPumpRows, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_CurrentStackCommand(obj.CurrentStackCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_AuthorizePumpCommand(obj.AuthorizePumpCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "NumberOfPumpRows":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_NumberOfPumpRows(obj.NumberOfPumpRows, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CurrentStackCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_CurrentStackCommand(obj.CurrentStackCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AuthorizePumpCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_AuthorizePumpCommand(obj.AuthorizePumpCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM cache_HomeScreenVM = null;
                public void UpdateChildListeners_HomeScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM obj)
                {
                    if (obj != cache_HomeScreenVM)
                    {
                        if (cache_HomeScreenVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_HomeScreenVM).PropertyChanged -= PropertyChanged_HomeScreenVM;
                            cache_HomeScreenVM = null;
                        }
                        if (obj != null)
                        {
                            cache_HomeScreenVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_HomeScreenVM;
                        }
                    }
                }
                public void PropertyChanged_PumpDetailModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.PumpDetailModel obj = sender as global::Infonet.CStoreCommander.UI.Model.PumpDetailModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_PumpDetailModel_Status(obj.Status, DATA_CHANGED);
                                    bindings.Update_PumpDetailModel_IsPumpOptionCBVisible(obj.IsPumpOptionCBVisible, DATA_CHANGED);
                                    bindings.Update_PumpDetailModel_CriticalLevelColor(obj.CriticalLevelColor, DATA_CHANGED);
                                    bindings.Update_PumpDetailModel_PumpNumber(obj.PumpNumber, DATA_CHANGED);
                                    bindings.Update_PumpDetailModel_SelectedCurrentStackIndex(obj.SelectedCurrentStackIndex, DATA_CHANGED);
                                    bindings.Update_PumpDetailModel_EnableStackBasketBotton(obj.EnableStackBasketBotton, DATA_CHANGED);
                                    bindings.Update_PumpDetailModel_Stacked(obj.Stacked, DATA_CHANGED);
                                    bindings.Update_PumpDetailModel_BasketButtonCaption(obj.BasketButtonCaption, DATA_CHANGED);
                                    bindings.Update_PumpDetailModel_PumpButtonCaption(obj.PumpButtonCaption, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Status":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_Status(obj.Status, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPumpOptionCBVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_IsPumpOptionCBVisible(obj.IsPumpOptionCBVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CriticalLevelColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_CriticalLevelColor(obj.CriticalLevelColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PumpNumber":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_PumpNumber(obj.PumpNumber, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedCurrentStackIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_SelectedCurrentStackIndex(obj.SelectedCurrentStackIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnableStackBasketBotton":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_EnableStackBasketBotton(obj.EnableStackBasketBotton, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Stacked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_Stacked(obj.Stacked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BasketButtonCaption":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_BasketButtonCaption(obj.BasketButtonCaption, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PumpButtonCaption":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PumpDetailModel_PumpButtonCaption(obj.PumpButtonCaption, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.PumpDetailModel cache_PumpDetailModel = null;
                public void UpdateChildListeners_PumpDetailModel(global::Infonet.CStoreCommander.UI.Model.PumpDetailModel obj)
                {
                    if (obj != cache_PumpDetailModel)
                    {
                        if (cache_PumpDetailModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PumpDetailModel).PropertyChanged -= PropertyChanged_PumpDetailModel;
                            cache_PumpDetailModel = null;
                        }
                        if (obj != null)
                        {
                            cache_PumpDetailModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PumpDetailModel;
                        }
                    }
                }
                public void PropertyChanged_PumpDetailModel_Stacked(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stacked> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stacked>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PumpDetailModel_Stacked(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stacked> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stacked>;
                    }
                }
                public void DependencyPropertyChanged_pumpNumber_Foreground(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Windows.UI.Xaml.Controls.TextBlock obj = sender as global::Windows.UI.Xaml.Controls.TextBlock;
        if (obj != null)
        {
            bindings.Update_pumpNumber_Foreground(obj.Foreground, DATA_CHANGED);
        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.TextBlock cache_pumpNumber = null;
                private long tokenDPC_pumpNumber_Foreground = 0;
                public void UpdateChildListeners_pumpNumber(global::Windows.UI.Xaml.Controls.TextBlock obj)
                {
                    if (obj != cache_pumpNumber)
                    {
                        if (cache_pumpNumber != null)
                        {
                            cache_pumpNumber.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty, tokenDPC_pumpNumber_Foreground);
                            cache_pumpNumber = null;
                        }
                        if (obj != null)
                        {
                            cache_pumpNumber = obj;
                            tokenDPC_pumpNumber_Foreground = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.ForegroundProperty, DependencyPropertyChanged_pumpNumber_Foreground);
                        }
                    }
                }
                public void DependencyPropertyChanged_pumpStatus_FontSize(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    PumpDataTemplate_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Windows.UI.Xaml.Controls.TextBlock obj = sender as global::Windows.UI.Xaml.Controls.TextBlock;
        if (obj != null)
        {
            bindings.Update_pumpStatus_FontSize(obj.FontSize, DATA_CHANGED);
        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.TextBlock cache_pumpStatus = null;
                private long tokenDPC_pumpStatus_FontSize = 0;
                public void UpdateChildListeners_pumpStatus(global::Windows.UI.Xaml.Controls.TextBlock obj)
                {
                    if (obj != cache_pumpStatus)
                    {
                        if (cache_pumpStatus != null)
                        {
                            cache_pumpStatus.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.FontSizeProperty, tokenDPC_pumpStatus_FontSize);
                            cache_pumpStatus = null;
                        }
                        if (obj != null)
                        {
                            cache_pumpStatus = obj;
                            tokenDPC_pumpStatus_FontSize = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.FontSizeProperty, DependencyPropertyChanged_pumpStatus_FontSize);
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.pumpItems = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 11:
                {
                    this.pumpContainer = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 12:
                {
                    this.cbPumpOptions = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 13:
                {
                    this.control = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 14:
                {
                    this.cbStacked = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 17:
                {
                    this.currentStackImage = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            case 20:
                {
                    this.pumpImage = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            case 21:
                {
                    this.pumpNumber = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 23:
                {
                    this.pumpStatus = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    PumpDataTemplate_obj1_Bindings bindings = new PumpDataTemplate_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

