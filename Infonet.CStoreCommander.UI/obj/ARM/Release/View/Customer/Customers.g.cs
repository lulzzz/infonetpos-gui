#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Customer\Customers.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "74BCF6F4A502BC81F8EA809899E4C8B6"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Customer
{
    partial class Customers : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(global::MyToolkit.Extended.Controls.CustomTextBox obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.EnterPressedCommand = value;
            }
        };

        private class Customers_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ICustomers_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Customer.Customers dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::WinRT.Triggers.InvokeCommandAction obj2;
            private global::Windows.UI.Xaml.Controls.Grid obj4;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj5;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj6;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj7;
            private global::MyToolkit.Controls.DataGrid obj8;
            private global::WinRT.Triggers.InvokeCommandAction obj9;
            private global::WinRT.Triggers.InvokeCommandAction obj10;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj11;

            private Customers_obj1_BindingsTracking bindingsTracking;

            public Customers_obj1_Bindings()
            {
                this.bindingsTracking = new Customers_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        ((global::Windows.UI.Xaml.Controls.Grid)target).LayoutUpdated += (global::System.Object param0, global::System.Object param1) =>
                        {
                        this.dataRoot.CustomersLayoutUpdated(param0, param1);
                        };
                        break;
                    case 5:
                        this.obj5 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 6:
                        this.obj6 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 7:
                        this.obj7 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 8:
                        this.obj8 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj8).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.CustomersScreenVM.SelectedCustomer = (global::Infonet.CStoreCommander.EntityLayer.Entities.Customer.Customer)this.LookupConverter("SelectedCustomerConverter").ConvertBack((this.obj8).SelectedItem, typeof(global::Infonet.CStoreCommander.EntityLayer.Entities.Customer.Customer), null, null);
                                }
                            });
                        break;
                    case 9:
                        this.obj9 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 10:
                        this.obj10 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 11:
                        this.obj11 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        break;
                    default:
                        break;
                }
            }

            // ICustomers_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // Customers_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.View.Customer.Customers newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Customer.Customers obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CustomersScreenVM(obj.CustomersScreenVM, phase);
                    }
                }
            }
            private void Update_CustomersScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.Customer.CustomersScreenVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_CustomersScreenVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CustomersScreenVM_LoadAllCustomersCommand(obj.LoadAllCustomersCommand, phase);
                        this.Update_CustomersScreenVM_SelectCustomerForSaleCommand(obj.SelectCustomerForSaleCommand, phase);
                        this.Update_CustomersScreenVM_IsSelectCustomerEnabled(obj.IsSelectCustomerEnabled, phase);
                        this.Update_CustomersScreenVM_SelectCashCustomerForSaleCommand(obj.SelectCashCustomerForSaleCommand, phase);
                        this.Update_CustomersScreenVM_IsTaxExemptionVisible(obj.IsTaxExemptionVisible, phase);
                        this.Update_CustomersScreenVM_OpenTaxExemptionPopupCommand(obj.OpenTaxExemptionPopupCommand, phase);
                        this.Update_CustomersScreenVM_SelectedCustomer(obj.SelectedCustomer, phase);
                        this.Update_CustomersScreenVM_CustomerSelectedCommand(obj.CustomerSelectedCommand, phase);
                        this.Update_CustomersScreenVM_RefreshCommand(obj.RefreshCommand, phase);
                        this.Update_CustomersScreenVM_SearchCommand(obj.SearchCommand, phase);
                    }
                }
            }
            private void Update_CustomersScreenVM_LoadAllCustomersCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj2, obj, null);
                }
            }
            private void Update_CustomersScreenVM_SelectCustomerForSaleCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj5, obj, null);
                }
            }
            private void Update_CustomersScreenVM_IsSelectCustomerEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj5, obj);
                }
            }
            private void Update_CustomersScreenVM_SelectCashCustomerForSaleCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj6, obj, null);
                }
            }
            private void Update_CustomersScreenVM_IsTaxExemptionVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_CustomersScreenVM_OpenTaxExemptionPopupCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj7, obj, null);
                }
            }
            private void Update_CustomersScreenVM_SelectedCustomer(global::Infonet.CStoreCommander.EntityLayer.Entities.Customer.Customer obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj8, (global::System.Object)this.LookupConverter("SelectedCustomerConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_CustomersScreenVM_CustomerSelectedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj9, obj, null);
                }
            }
            private void Update_CustomersScreenVM_RefreshCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj10, obj, null);
                }
            }
            private void Update_CustomersScreenVM_SearchCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(this.obj11, obj, null);
                }
            }

            private class Customers_obj1_BindingsTracking
            {
                global::System.WeakReference<Customers_obj1_Bindings> WeakRefToBindingObj; 

                public Customers_obj1_BindingsTracking(Customers_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<Customers_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_CustomersScreenVM(null);
                }

                public void PropertyChanged_CustomersScreenVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Customers_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Customer.CustomersScreenVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Customer.CustomersScreenVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_CustomersScreenVM_LoadAllCustomersCommand(obj.LoadAllCustomersCommand, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_SelectCustomerForSaleCommand(obj.SelectCustomerForSaleCommand, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_IsSelectCustomerEnabled(obj.IsSelectCustomerEnabled, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_SelectCashCustomerForSaleCommand(obj.SelectCashCustomerForSaleCommand, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_IsTaxExemptionVisible(obj.IsTaxExemptionVisible, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_OpenTaxExemptionPopupCommand(obj.OpenTaxExemptionPopupCommand, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_SelectedCustomer(obj.SelectedCustomer, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_CustomerSelectedCommand(obj.CustomerSelectedCommand, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_RefreshCommand(obj.RefreshCommand, DATA_CHANGED);
                                    bindings.Update_CustomersScreenVM_SearchCommand(obj.SearchCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "LoadAllCustomersCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_LoadAllCustomersCommand(obj.LoadAllCustomersCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectCustomerForSaleCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_SelectCustomerForSaleCommand(obj.SelectCustomerForSaleCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSelectCustomerEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_IsSelectCustomerEnabled(obj.IsSelectCustomerEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectCashCustomerForSaleCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_SelectCashCustomerForSaleCommand(obj.SelectCashCustomerForSaleCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxExemptionVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_IsTaxExemptionVisible(obj.IsTaxExemptionVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenTaxExemptionPopupCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_OpenTaxExemptionPopupCommand(obj.OpenTaxExemptionPopupCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedCustomer":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_SelectedCustomer(obj.SelectedCustomer, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CustomerSelectedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_CustomerSelectedCommand(obj.CustomerSelectedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RefreshCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_RefreshCommand(obj.RefreshCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CustomersScreenVM_SearchCommand(obj.SearchCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Customer.CustomersScreenVM cache_CustomersScreenVM = null;
                public void UpdateChildListeners_CustomersScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.Customer.CustomersScreenVM obj)
                {
                    if (obj != cache_CustomersScreenVM)
                    {
                        if (cache_CustomersScreenVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_CustomersScreenVM).PropertyChanged -= PropertyChanged_CustomersScreenVM;
                            cache_CustomersScreenVM = null;
                        }
                        if (obj != null)
                        {
                            cache_CustomersScreenVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_CustomersScreenVM;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3:
                {
                    this.GenericButtonStyle = (global::Windows.UI.Xaml.Style)(target);
                }
                break;
            case 4:
                {
                    global::Windows.UI.Xaml.Controls.Grid element4 = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 8:
                {
                    this.DataGrid = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 11:
                {
                    this.txtCustomerSearchTextBox = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    Customers_obj1_Bindings bindings = new Customers_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

