#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\ExtendedSplashScreen.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "F43FD00D3B1EAA58BC991DBFC1AB4AB2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View
{
    partial class ExtendedSplashScreen : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(global::Windows.UI.Xaml.Controls.Primitives.Popup obj, global::System.Boolean value)
            {
                obj.IsOpen = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Message = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Description = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.ButtonBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Continue = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Title = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.HeadingText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.FirstButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.SecondButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.FirstButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.SecondButtonText = value ?? global::System.String.Empty;
            }
        };

        private class ExtendedSplashScreen_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IExtendedSplashScreen_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.ExtendedSplashScreen dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj3;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj4;
            private global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj5;
            private global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj6;

            private ExtendedSplashScreen_obj1_BindingsTracking bindingsTracking;

            public ExtendedSplashScreen_obj1_Bindings()
            {
                this.bindingsTracking = new ExtendedSplashScreen_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3:
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 5:
                        this.obj5 = (global::Infonet.CStoreCommander.UI.Controls.NotificationPopup)target;
                        break;
                    case 6:
                        this.obj6 = (global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons)target;
                        break;
                    default:
                        break;
                }
            }

            // IExtendedSplashScreen_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // ExtendedSplashScreen_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.View.ExtendedSplashScreen newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.ExtendedSplashScreen obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ExtendedSplashScreenVM(obj.ExtendedSplashScreenVM, phase);
                    }
                }
            }
            private void Update_ExtendedSplashScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.ExtendedSplashScreenVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ExtendedSplashScreenVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ExtendedSplashScreenVM_PopupService(obj.PopupService, phase);
                        this.Update_ExtendedSplashScreenVM_Title(obj.Title, phase);
                    }
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ExtendedSplashScreenVM_PopupService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ExtendedSplashScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_Message(obj.Message, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_Continue(obj.Continue, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_Title(obj.Title, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_YesButtonText(obj.YesButtonText, phase);
                        this.Update_ExtendedSplashScreenVM_PopupService_NoButtonText(obj.NoButtonText, phase);
                    }
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_IsConfirmationPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj3, obj);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_IsAlertPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj4, obj);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_Message(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(this.obj5, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(this.obj6, obj, null);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_OkButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(this.obj5, obj, null);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_Continue(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(this.obj5, obj, null);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_Title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(this.obj5, obj, null);
                }
            }
            private void Update_ExtendedSplashScreenVM_Title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(this.obj6, obj, null);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_YesButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(this.obj6, obj, null);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_NoButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(this.obj6, obj, null);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_YesButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(this.obj6, obj, null);
                }
            }
            private void Update_ExtendedSplashScreenVM_PopupService_NoButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(this.obj6, obj, null);
                }
            }

            private class ExtendedSplashScreen_obj1_BindingsTracking
            {
                global::System.WeakReference<ExtendedSplashScreen_obj1_Bindings> WeakRefToBindingObj; 

                public ExtendedSplashScreen_obj1_BindingsTracking(ExtendedSplashScreen_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<ExtendedSplashScreen_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ExtendedSplashScreenVM(null);
                    UpdateChildListeners_ExtendedSplashScreenVM_PopupService(null);
                }

                public void PropertyChanged_ExtendedSplashScreenVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ExtendedSplashScreen_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.ExtendedSplashScreenVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.ExtendedSplashScreenVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ExtendedSplashScreenVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_Title(obj.Title, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "PopupService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.ExtendedSplashScreenVM cache_ExtendedSplashScreenVM = null;
                public void UpdateChildListeners_ExtendedSplashScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.ExtendedSplashScreenVM obj)
                {
                    if (obj != cache_ExtendedSplashScreenVM)
                    {
                        if (cache_ExtendedSplashScreenVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ExtendedSplashScreenVM).PropertyChanged -= PropertyChanged_ExtendedSplashScreenVM;
                            cache_ExtendedSplashScreenVM = null;
                        }
                        if (obj != null)
                        {
                            cache_ExtendedSplashScreenVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ExtendedSplashScreenVM;
                        }
                    }
                }
                public void PropertyChanged_ExtendedSplashScreenVM_PopupService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ExtendedSplashScreen_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Utility.PopupService obj = sender as global::Infonet.CStoreCommander.UI.Utility.PopupService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                    bindings.Update_ExtendedSplashScreenVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsConfirmationPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAlertPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Message":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OkButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Continue":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ExtendedSplashScreenVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Utility.PopupService cache_ExtendedSplashScreenVM_PopupService = null;
                public void UpdateChildListeners_ExtendedSplashScreenVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj)
                {
                    if (obj != cache_ExtendedSplashScreenVM_PopupService)
                    {
                        if (cache_ExtendedSplashScreenVM_PopupService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ExtendedSplashScreenVM_PopupService).PropertyChanged -= PropertyChanged_ExtendedSplashScreenVM_PopupService;
                            cache_ExtendedSplashScreenVM_PopupService = null;
                        }
                        if (obj != null)
                        {
                            cache_ExtendedSplashScreenVM_PopupService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ExtendedSplashScreenVM_PopupService;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.gdMainScreen = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 3:
                {
                    this.confirmationPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 4:
                {
                    this.ErrorPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    ExtendedSplashScreen_obj1_Bindings bindings = new ExtendedSplashScreen_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

