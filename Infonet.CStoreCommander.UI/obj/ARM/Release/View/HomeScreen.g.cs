#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\HomeScreen.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "955F0C511E25CE5F45876C4C74ED754A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View
{
    partial class HomeScreen : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Value = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_SplitView_IsPaneOpen(global::Windows.UI.Xaml.Controls.SplitView obj, global::System.Boolean value)
            {
                obj.IsPaneOpen = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_SplitView_OpenPaneLength(global::Windows.UI.Xaml.Controls.SplitView obj, global::System.Double value)
            {
                obj.OpenPaneLength = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(global::Windows.UI.Xaml.Controls.Primitives.Popup obj, global::System.Boolean value)
            {
                obj.IsOpen = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTextBox_PasswordRevealMode(global::Infonet.CStoreCommander.UI.Controls.PopupWithTextBox obj, global::Windows.UI.Xaml.Controls.PasswordRevealMode value)
            {
                obj.PasswordRevealMode = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PumpOptions_CancelCommand(global::Infonet.CStoreCommander.UI.Controls.PumpOptions obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelCommand = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_MessagePopup_Heading(global::Infonet.CStoreCommander.UI.Controls.MessagePopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Heading = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_ReasonList_Heading(global::Infonet.CStoreCommander.UI.Controls.ReasonList obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Heading = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Title = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.HeadingText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_MessagePopup_CancelCommand(global::Infonet.CStoreCommander.UI.Controls.MessagePopup obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelCommand = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_ReasonList_ItemClicked(global::Infonet.CStoreCommander.UI.Controls.ReasonList obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.ItemClicked = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Message = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Description = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Continue = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.ButtonBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.FirstButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.SecondButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.FirstButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.SecondButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.ThirdButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_IsThirdButtonVisible(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.Boolean value)
            {
                obj.IsThirdButtonVisible = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.ThirdButtonBottomBackgroundColor = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
        };

        private class HomeScreen_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IHomeScreen_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.HomeScreen dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj3;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj4;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj5;
            private global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger obj6;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj7;
            private global::Windows.UI.Xaml.Controls.Grid obj8;
            private global::Windows.UI.Xaml.Controls.SplitView obj9;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj11;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj12;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj13;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj14;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj15;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj16;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj17;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj18;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj19;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj20;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj21;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj22;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj23;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj24;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj25;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj26;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj27;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj28;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj29;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj30;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj31;
            private global::Infonet.CStoreCommander.UI.Controls.PopupWithTextBox obj32;
            private global::Infonet.CStoreCommander.UI.Controls.PumpOptions obj33;
            private global::Infonet.CStoreCommander.UI.Controls.MessagePopup obj34;
            private global::Infonet.CStoreCommander.UI.Controls.ReasonList obj35;
            private global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj36;
            private global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj37;
            private global::Windows.UI.Xaml.Controls.Button obj38;
            private global::Windows.UI.Xaml.Controls.Button obj39;
            private global::Windows.UI.Xaml.Controls.Button obj40;
            private global::Windows.UI.Xaml.Controls.Button obj41;
            private global::Windows.UI.Xaml.Controls.Button obj42;
            private global::WinRT.Triggers.InvokeCommandAction obj43;
            private global::Windows.UI.Xaml.Documents.Run obj45;
            private global::WinRT.Triggers.InvokeCommandAction obj46;
            private global::WinRT.Triggers.InvokeCommandAction obj47;
            private global::WinRT.Triggers.InvokeCommandAction obj48;
            private global::WinRT.Triggers.InvokeCommandAction obj49;
            private global::Windows.UI.Xaml.Controls.TextBlock obj51;
            private global::Windows.UI.Xaml.Controls.TextBlock obj52;
            private global::Windows.UI.Xaml.Controls.Button obj53;
            private global::Windows.UI.Xaml.Controls.Button obj54;
            private global::Windows.UI.Xaml.Controls.Button obj55;
            private global::Windows.UI.Xaml.Controls.Button obj56;
            private global::Windows.UI.Xaml.Controls.Button obj57;
            private global::Windows.UI.Xaml.Controls.Button obj58;
            private global::WinRT.Triggers.InvokeCommandAction obj59;
            private global::WinRT.Triggers.InvokeCommandAction obj60;
            private global::WinRT.Triggers.InvokeCommandAction obj61;
            private global::WinRT.Triggers.InvokeCommandAction obj62;
            private global::WinRT.Triggers.InvokeCommandAction obj63;
            private global::WinRT.Triggers.InvokeCommandAction obj64;
            private global::Windows.UI.Xaml.Controls.GridView obj68;
            private global::Windows.UI.Xaml.Controls.Border obj69;
            private global::Windows.UI.Xaml.Controls.Button obj71;
            private global::Windows.UI.Xaml.Controls.Button obj72;
            private global::WinRT.Triggers.InvokeCommandAction obj73;
            private global::WinRT.Triggers.InvokeCommandAction obj74;
            private global::WinRT.Triggers.InvokeCommandAction obj75;
            private global::Windows.UI.Xaml.Controls.Button obj76;
            private global::Windows.UI.Xaml.Controls.TextBlock obj78;

            private HomeScreen_obj1_BindingsTracking bindingsTracking;

            public HomeScreen_obj1_Bindings()
            {
                this.bindingsTracking = new HomeScreen_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3:
                        this.obj3 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 4:
                        this.obj4 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 5:
                        this.obj5 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 6:
                        this.obj6 = (global::Infonet.CStoreCommander.UI.Trigger.EqualsStateTrigger)target;
                        break;
                    case 7:
                        this.obj7 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 9:
                        this.obj9 = (global::Windows.UI.Xaml.Controls.SplitView)target;
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 18:
                        this.obj18 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 19:
                        this.obj19 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 20:
                        this.obj20 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 21:
                        this.obj21 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 22:
                        this.obj22 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 23:
                        this.obj23 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 24:
                        this.obj24 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 25:
                        this.obj25 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 26:
                        this.obj26 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 27:
                        this.obj27 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 28:
                        this.obj28 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 29:
                        this.obj29 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 30:
                        this.obj30 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 31:
                        this.obj31 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 32:
                        this.obj32 = (global::Infonet.CStoreCommander.UI.Controls.PopupWithTextBox)target;
                        break;
                    case 33:
                        this.obj33 = (global::Infonet.CStoreCommander.UI.Controls.PumpOptions)target;
                        break;
                    case 34:
                        this.obj34 = (global::Infonet.CStoreCommander.UI.Controls.MessagePopup)target;
                        break;
                    case 35:
                        this.obj35 = (global::Infonet.CStoreCommander.UI.Controls.ReasonList)target;
                        break;
                    case 36:
                        this.obj36 = (global::Infonet.CStoreCommander.UI.Controls.NotificationPopup)target;
                        break;
                    case 37:
                        this.obj37 = (global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons)target;
                        break;
                    case 38:
                        this.obj38 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 39:
                        this.obj39 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 40:
                        this.obj40 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 41:
                        this.obj41 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 42:
                        this.obj42 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 43:
                        this.obj43 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 45:
                        this.obj45 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 46:
                        this.obj46 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 47:
                        this.obj47 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 48:
                        this.obj48 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 49:
                        this.obj49 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 51:
                        this.obj51 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 52:
                        this.obj52 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 53:
                        this.obj53 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 54:
                        this.obj54 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 55:
                        this.obj55 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 56:
                        this.obj56 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 57:
                        this.obj57 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 58:
                        this.obj58 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 59:
                        this.obj59 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 60:
                        this.obj60 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 61:
                        this.obj61 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 62:
                        this.obj62 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 63:
                        this.obj63 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 64:
                        this.obj64 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 68:
                        this.obj68 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 69:
                        this.obj69 = (global::Windows.UI.Xaml.Controls.Border)target;
                        break;
                    case 71:
                        this.obj71 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 72:
                        this.obj72 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 73:
                        this.obj73 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 74:
                        this.obj74 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 75:
                        this.obj75 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 76:
                        this.obj76 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 78:
                        this.obj78 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IHomeScreen_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // HomeScreen_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.View.HomeScreen newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.HomeScreen obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_txtShiftDate(obj.txtShiftDate, phase);
                        this.Update_txtSettingMenuShift(obj.txtSettingMenuShift, phase);
                        this.Update_HomeScreenVM(obj.HomeScreenVM, phase);
                    }
                }
            }
            private void Update_txtShiftDate(global::Windows.UI.Xaml.Documents.Run obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_txtShiftDate_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_txtShiftDate_Text(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj3, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj4, obj, null);
                }
            }
            private void Update_txtSettingMenuShift(global::Windows.UI.Xaml.Controls.TextBlock obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_txtSettingMenuShift(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_txtSettingMenuShift_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_txtSettingMenuShift_Text(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj5, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Trigger_EqualsStateTrigger_Value(this.obj6, obj, null);
                }
            }
            private void Update_HomeScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_HomeScreenVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HomeScreenVM_HideBigPumpCommand(obj.HideBigPumpCommand, phase);
                        this.Update_HomeScreenVM_IsFuelOnlySystem(obj.IsFuelOnlySystem, phase);
                        this.Update_HomeScreenVM_IsPosOnlySystem(obj.IsPosOnlySystem, phase);
                        this.Update_HomeScreenVM_IsPaneOpen(obj.IsPaneOpen, phase);
                        this.Update_HomeScreenVM_Width(obj.Width, phase);
                        this.Update_HomeScreenVM_PopupService(obj.PopupService, phase);
                        this.Update_HomeScreenVM_ClosePumpOptionsPopupCommand(obj.ClosePumpOptionsPopupCommand, phase);
                        this.Update_HomeScreenVM_IsPaymentEnable(obj.IsPaymentEnable, phase);
                        this.Update_HomeScreenVM_OpenPaymentOptionsCommand(obj.OpenPaymentOptionsCommand, phase);
                        this.Update_HomeScreenVM_OpenMaintenanceWindowCommand(obj.OpenMaintenanceWindowCommand, phase);
                        this.Update_HomeScreenVM_IsShiftDateVisible(obj.IsShiftDateVisible, phase);
                        this.Update_HomeScreenVM_TrainingCaption(obj.TrainingCaption, phase);
                        this.Update_HomeScreenVM_IsErrorVisible(obj.IsErrorVisible, phase);
                        this.Update_HomeScreenVM_ShowErrorsCommand(obj.ShowErrorsCommand, phase);
                        this.Update_HomeScreenVM_ShiftDate(obj.ShiftDate, phase);
                        this.Update_HomeScreenVM_LogoutCommand(obj.LogoutCommand, phase);
                        this.Update_HomeScreenVM_OpenReportsCommand(obj.OpenReportsCommand, phase);
                        this.Update_HomeScreenVM_Shift(obj.Shift, phase);
                        this.Update_HomeScreenVM_Till(obj.Till, phase);
                        this.Update_HomeScreenVM_IsUserNotInSaleSummary(obj.IsUserNotInSaleSummary, phase);
                        this.Update_HomeScreenVM_IsLogoutEnable(obj.IsLogoutEnable, phase);
                        this.Update_HomeScreenVM_ToggleSplitViewCommand(obj.ToggleSplitViewCommand, phase);
                        this.Update_HomeScreenVM_PumpDetails(obj.PumpDetails, phase);
                        this.Update_HomeScreenVM_IsBigPumpVisible(obj.IsBigPumpVisible, phase);
                        this.Update_HomeScreenVM_IsFuelPumpOptionEnable(obj.IsFuelPumpOptionEnable, phase);
                        this.Update_HomeScreenVM_LogoutButtonForFuelOnlySystem(obj.LogoutButtonForFuelOnlySystem, phase);
                        this.Update_HomeScreenVM_OpenPumpOptionsPopupCommand(obj.OpenPumpOptionsPopupCommand, phase);
                        this.Update_HomeScreenVM_OpenEmergencyPopupCommand(obj.OpenEmergencyPopupCommand, phase);
                        this.Update_HomeScreenVM_BigPump(obj.BigPump, phase);
                    }
                }
            }
            private void Update_HomeScreenVM_HideBigPumpCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj7, obj, null);
                }
            }
            private void Update_HomeScreenVM_IsFuelOnlySystem(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj8, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_HomeScreenVM_IsPosOnlySystem(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_HomeScreenVM_IsPaneOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_SplitView_IsPaneOpen(this.obj9, obj);
                }
            }
            private void Update_HomeScreenVM_Width(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_SplitView_OpenPaneLength(this.obj9, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_HomeScreenVM_PopupService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HomeScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsEmergencyPopupOpen(obj.IsEmergencyPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsReasonPopupOpen(obj.IsReasonPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsCheckoutOptionsOpen(obj.IsCheckoutOptionsOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsReturnsPopupOpen(obj.IsReturnsPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsEnvelopeOpen(obj.IsEnvelopeOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsGstPstPopupOpen(obj.IsGstPstPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsQitePopupOpen(obj.IsQitePopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsMessagePopupOpen(obj.IsMessagePopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsPurchaseOrderPopupOpen(obj.IsPurchaseOrderPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsPumpOptionsPopupOpen(obj.IsPumpOptionsPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsPopupWithTextBoxOpen(obj.IsPopupWithTextBoxOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsTaxExemptionPopupOpen(obj.IsTaxExemptionPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsFngtrPopupOpen(obj.IsFngtrPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsKickbackBalancePopupOpen(obj.IsKickbackBalancePopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsKickbackNumberPopupOpen(obj.IsKickbackNumberPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsAckTenderPopOpen(obj.IsAckTenderPopOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsAckBalacePopOpen(obj.IsAckBalacePopOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsCarwashPopupOpen(obj.IsCarwashPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_IsFuelDiscountPopupOpen(obj.IsFuelDiscountPopupOpen, phase);
                        this.Update_HomeScreenVM_PopupService_PasswordRevelMode(obj.PasswordRevelMode, phase);
                        this.Update_HomeScreenVM_PopupService_Title(obj.Title, phase);
                        this.Update_HomeScreenVM_PopupService_CloseCommand(obj.CloseCommand, phase);
                        this.Update_HomeScreenVM_PopupService_MessageItemClicked(obj.MessageItemClicked, phase);
                        this.Update_HomeScreenVM_PopupService_Message(obj.Message, phase);
                        this.Update_HomeScreenVM_PopupService_Continue(obj.Continue, phase);
                        this.Update_HomeScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, phase);
                        this.Update_HomeScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, phase);
                        this.Update_HomeScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, phase);
                        this.Update_HomeScreenVM_PopupService_YesButtonText(obj.YesButtonText, phase);
                        this.Update_HomeScreenVM_PopupService_NoButtonText(obj.NoButtonText, phase);
                        this.Update_HomeScreenVM_PopupService_ThirdButtonText(obj.ThirdButtonText, phase);
                        this.Update_HomeScreenVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, phase);
                        this.Update_HomeScreenVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, phase);
                    }
                }
            }
            private void Update_HomeScreenVM_PopupService_IsConfirmationPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj11, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsEmergencyPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj12, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsAlertPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj13, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsReasonPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj14, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsCheckoutOptionsOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj15, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsReturnsPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj16, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsEnvelopeOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj17, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsGstPstPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj18, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsQitePopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj19, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsMessagePopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj20, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsPurchaseOrderPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj21, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsPumpOptionsPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj22, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsPopupWithTextBoxOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj23, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsTaxExemptionPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj24, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsFngtrPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj25, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsKickbackBalancePopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj26, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsKickbackNumberPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj27, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsAckTenderPopOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj28, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsAckBalacePopOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj29, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsCarwashPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj30, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsFuelDiscountPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj31, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_PasswordRevelMode(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTextBox_PasswordRevealMode(this.obj32, (global::Windows.UI.Xaml.Controls.PasswordRevealMode)this.LookupConverter("BoolToPassswordVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Controls.PasswordRevealMode), null, null));
                }
            }
            private void Update_HomeScreenVM_ClosePumpOptionsPopupCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PumpOptions_CancelCommand(this.obj33, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_Title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_MessagePopup_Heading(this.obj34, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ReasonList_Heading(this.obj35, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(this.obj36, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(this.obj37, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_CloseCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_MessagePopup_CancelCommand(this.obj34, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_MessageItemClicked(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ReasonList_ItemClicked(this.obj35, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_Message(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(this.obj36, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(this.obj37, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_Continue(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(this.obj36, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_OkButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(this.obj36, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_YesButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(this.obj37, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_NoButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(this.obj37, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_YesButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(this.obj37, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_NoButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(this.obj37, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_ThirdButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonText(this.obj37, obj, null);
                }
            }
            private void Update_HomeScreenVM_PopupService_IsThirdButtonVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_IsThirdButtonVisible(this.obj37, obj);
                }
            }
            private void Update_HomeScreenVM_PopupService_ThirdButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonBottomBackgroundColor(this.obj37, obj, null);
                }
            }
            private void Update_HomeScreenVM_IsPaymentEnable(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj38, obj);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj55, obj);
                }
            }
            private void Update_HomeScreenVM_OpenPaymentOptionsCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj38, obj, null);
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj48, obj, null);
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj62, obj, null);
                }
            }
            private void Update_HomeScreenVM_OpenMaintenanceWindowCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj39, obj, null);
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj47, obj, null);
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj61, obj, null);
                }
            }
            private void Update_HomeScreenVM_IsShiftDateVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj40, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToPassswordVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_HomeScreenVM_TrainingCaption(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj41, obj, null);
                }
            }
            private void Update_HomeScreenVM_IsErrorVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj42, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToPassswordVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj58, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToPassswordVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_HomeScreenVM_ShowErrorsCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj43, obj, null);
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj59, obj, null);
                }
            }
            private void Update_HomeScreenVM_ShiftDate(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj45, obj, null);
                }
            }
            private void Update_HomeScreenVM_LogoutCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj46, obj, null);
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj60, obj, null);
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj73, obj, null);
                }
            }
            private void Update_HomeScreenVM_OpenReportsCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj49, obj, null);
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj63, obj, null);
                }
            }
            private void Update_HomeScreenVM_Shift(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj51, obj.ToString(), null);
                }
            }
            private void Update_HomeScreenVM_Till(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj52, obj.ToString(), null);
                }
            }
            private void Update_HomeScreenVM_IsUserNotInSaleSummary(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj53, obj);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj54, obj);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj56, obj);
                }
            }
            private void Update_HomeScreenVM_IsLogoutEnable(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj57, obj);
                }
            }
            private void Update_HomeScreenVM_ToggleSplitViewCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj64, obj, null);
                }
            }
            private void Update_HomeScreenVM_PumpDetails(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.PumpDetailModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj68, obj, null);
                }
            }
            private void Update_HomeScreenVM_IsBigPumpVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj69, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_HomeScreenVM_IsFuelPumpOptionEnable(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj71, obj);
                }
            }
            private void Update_HomeScreenVM_LogoutButtonForFuelOnlySystem(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj72, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_HomeScreenVM_OpenPumpOptionsPopupCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj74, obj, null);
                }
            }
            private void Update_HomeScreenVM_OpenEmergencyPopupCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj75, obj, null);
                }
            }
            private void Update_HomeScreenVM_BigPump(global::Infonet.CStoreCommander.UI.Model.BigPumpsModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_HomeScreenVM_BigPump(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_HomeScreenVM_BigPump_Amount(obj.Amount, phase);
                        this.Update_HomeScreenVM_BigPump_PumpLabel(obj.PumpLabel, phase);
                    }
                }
            }
            private void Update_HomeScreenVM_BigPump_Amount(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj76, obj, null);
                }
            }
            private void Update_HomeScreenVM_BigPump_PumpLabel(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj78, obj, null);
                }
            }

            private class HomeScreen_obj1_BindingsTracking
            {
                global::System.WeakReference<HomeScreen_obj1_Bindings> WeakRefToBindingObj; 

                public HomeScreen_obj1_BindingsTracking(HomeScreen_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<HomeScreen_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_txtSettingMenuShift(null);
                    UpdateChildListeners_HomeScreenVM(null);
                    UpdateChildListeners_HomeScreenVM_PopupService(null);
                    UpdateChildListeners_HomeScreenVM_BigPump(null);
                }

                public void DependencyPropertyChanged_txtSettingMenuShift_Text(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    HomeScreen_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Windows.UI.Xaml.Controls.TextBlock obj = sender as global::Windows.UI.Xaml.Controls.TextBlock;
        if (obj != null)
        {
            bindings.Update_txtSettingMenuShift_Text(obj.Text, DATA_CHANGED);
        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.TextBlock cache_txtSettingMenuShift = null;
                private long tokenDPC_txtSettingMenuShift_Text = 0;
                public void UpdateChildListeners_txtSettingMenuShift(global::Windows.UI.Xaml.Controls.TextBlock obj)
                {
                    if (obj != cache_txtSettingMenuShift)
                    {
                        if (cache_txtSettingMenuShift != null)
                        {
                            cache_txtSettingMenuShift.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, tokenDPC_txtSettingMenuShift_Text);
                            cache_txtSettingMenuShift = null;
                        }
                        if (obj != null)
                        {
                            cache_txtSettingMenuShift = obj;
                            tokenDPC_txtSettingMenuShift_Text = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, DependencyPropertyChanged_txtSettingMenuShift_Text);
                        }
                    }
                }
                public void PropertyChanged_HomeScreenVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    HomeScreen_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_HomeScreenVM_HideBigPumpCommand(obj.HideBigPumpCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsFuelOnlySystem(obj.IsFuelOnlySystem, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsPosOnlySystem(obj.IsPosOnlySystem, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsPaneOpen(obj.IsPaneOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_Width(obj.Width, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_ClosePumpOptionsPopupCommand(obj.ClosePumpOptionsPopupCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsPaymentEnable(obj.IsPaymentEnable, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_OpenPaymentOptionsCommand(obj.OpenPaymentOptionsCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_OpenMaintenanceWindowCommand(obj.OpenMaintenanceWindowCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsShiftDateVisible(obj.IsShiftDateVisible, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_TrainingCaption(obj.TrainingCaption, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsErrorVisible(obj.IsErrorVisible, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_ShowErrorsCommand(obj.ShowErrorsCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_ShiftDate(obj.ShiftDate, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_LogoutCommand(obj.LogoutCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_OpenReportsCommand(obj.OpenReportsCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_Shift(obj.Shift, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_Till(obj.Till, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsUserNotInSaleSummary(obj.IsUserNotInSaleSummary, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsLogoutEnable(obj.IsLogoutEnable, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_ToggleSplitViewCommand(obj.ToggleSplitViewCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PumpDetails(obj.PumpDetails, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsBigPumpVisible(obj.IsBigPumpVisible, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_IsFuelPumpOptionEnable(obj.IsFuelPumpOptionEnable, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_LogoutButtonForFuelOnlySystem(obj.LogoutButtonForFuelOnlySystem, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_OpenPumpOptionsPopupCommand(obj.OpenPumpOptionsPopupCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_OpenEmergencyPopupCommand(obj.OpenEmergencyPopupCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_BigPump(obj.BigPump, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "HideBigPumpCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_HideBigPumpCommand(obj.HideBigPumpCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsFuelOnlySystem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsFuelOnlySystem(obj.IsFuelOnlySystem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPosOnlySystem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsPosOnlySystem(obj.IsPosOnlySystem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPaneOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsPaneOpen(obj.IsPaneOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Width":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_Width(obj.Width, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PopupService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ClosePumpOptionsPopupCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_ClosePumpOptionsPopupCommand(obj.ClosePumpOptionsPopupCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPaymentEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsPaymentEnable(obj.IsPaymentEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenPaymentOptionsCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_OpenPaymentOptionsCommand(obj.OpenPaymentOptionsCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenMaintenanceWindowCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_OpenMaintenanceWindowCommand(obj.OpenMaintenanceWindowCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsShiftDateVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsShiftDateVisible(obj.IsShiftDateVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TrainingCaption":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_TrainingCaption(obj.TrainingCaption, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsErrorVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsErrorVisible(obj.IsErrorVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowErrorsCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_ShowErrorsCommand(obj.ShowErrorsCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShiftDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_ShiftDate(obj.ShiftDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LogoutCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_LogoutCommand(obj.LogoutCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenReportsCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_OpenReportsCommand(obj.OpenReportsCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Shift":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_Shift(obj.Shift, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Till":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_Till(obj.Till, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsUserNotInSaleSummary":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsUserNotInSaleSummary(obj.IsUserNotInSaleSummary, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsLogoutEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsLogoutEnable(obj.IsLogoutEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ToggleSplitViewCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_ToggleSplitViewCommand(obj.ToggleSplitViewCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PumpDetails":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PumpDetails(obj.PumpDetails, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsBigPumpVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsBigPumpVisible(obj.IsBigPumpVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsFuelPumpOptionEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_IsFuelPumpOptionEnable(obj.IsFuelPumpOptionEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LogoutButtonForFuelOnlySystem":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_LogoutButtonForFuelOnlySystem(obj.LogoutButtonForFuelOnlySystem, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenPumpOptionsPopupCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_OpenPumpOptionsPopupCommand(obj.OpenPumpOptionsPopupCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenEmergencyPopupCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_OpenEmergencyPopupCommand(obj.OpenEmergencyPopupCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BigPump":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_BigPump(obj.BigPump, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM cache_HomeScreenVM = null;
                public void UpdateChildListeners_HomeScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.HomeScreenVM obj)
                {
                    if (obj != cache_HomeScreenVM)
                    {
                        if (cache_HomeScreenVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_HomeScreenVM).PropertyChanged -= PropertyChanged_HomeScreenVM;
                            cache_HomeScreenVM = null;
                        }
                        if (obj != null)
                        {
                            cache_HomeScreenVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_HomeScreenVM;
                        }
                    }
                }
                public void PropertyChanged_HomeScreenVM_PopupService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    HomeScreen_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Utility.PopupService obj = sender as global::Infonet.CStoreCommander.UI.Utility.PopupService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_HomeScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsEmergencyPopupOpen(obj.IsEmergencyPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsReasonPopupOpen(obj.IsReasonPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsCheckoutOptionsOpen(obj.IsCheckoutOptionsOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsReturnsPopupOpen(obj.IsReturnsPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsEnvelopeOpen(obj.IsEnvelopeOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsGstPstPopupOpen(obj.IsGstPstPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsQitePopupOpen(obj.IsQitePopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsMessagePopupOpen(obj.IsMessagePopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsPurchaseOrderPopupOpen(obj.IsPurchaseOrderPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsPumpOptionsPopupOpen(obj.IsPumpOptionsPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsPopupWithTextBoxOpen(obj.IsPopupWithTextBoxOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsTaxExemptionPopupOpen(obj.IsTaxExemptionPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsFngtrPopupOpen(obj.IsFngtrPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsKickbackBalancePopupOpen(obj.IsKickbackBalancePopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsKickbackNumberPopupOpen(obj.IsKickbackNumberPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsAckTenderPopOpen(obj.IsAckTenderPopOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsAckBalacePopOpen(obj.IsAckBalacePopOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsCarwashPopupOpen(obj.IsCarwashPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsFuelDiscountPopupOpen(obj.IsFuelDiscountPopupOpen, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_PasswordRevelMode(obj.PasswordRevelMode, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_CloseCommand(obj.CloseCommand, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_MessageItemClicked(obj.MessageItemClicked, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_ThirdButtonText(obj.ThirdButtonText, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsConfirmationPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEmergencyPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsEmergencyPopupOpen(obj.IsEmergencyPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAlertPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsReasonPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsReasonPopupOpen(obj.IsReasonPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCheckoutOptionsOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsCheckoutOptionsOpen(obj.IsCheckoutOptionsOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsReturnsPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsReturnsPopupOpen(obj.IsReturnsPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEnvelopeOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsEnvelopeOpen(obj.IsEnvelopeOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsGstPstPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsGstPstPopupOpen(obj.IsGstPstPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsQitePopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsQitePopupOpen(obj.IsQitePopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsMessagePopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsMessagePopupOpen(obj.IsMessagePopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPurchaseOrderPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsPurchaseOrderPopupOpen(obj.IsPurchaseOrderPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPumpOptionsPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsPumpOptionsPopupOpen(obj.IsPumpOptionsPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPopupWithTextBoxOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsPopupWithTextBoxOpen(obj.IsPopupWithTextBoxOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxExemptionPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsTaxExemptionPopupOpen(obj.IsTaxExemptionPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsFngtrPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsFngtrPopupOpen(obj.IsFngtrPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsKickbackBalancePopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsKickbackBalancePopupOpen(obj.IsKickbackBalancePopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsKickbackNumberPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsKickbackNumberPopupOpen(obj.IsKickbackNumberPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAckTenderPopOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsAckTenderPopOpen(obj.IsAckTenderPopOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAckBalacePopOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsAckBalacePopOpen(obj.IsAckBalacePopOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCarwashPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsCarwashPopupOpen(obj.IsCarwashPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsFuelDiscountPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsFuelDiscountPopupOpen(obj.IsFuelDiscountPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PasswordRevelMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_PasswordRevelMode(obj.PasswordRevelMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CloseCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_CloseCommand(obj.CloseCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MessageItemClicked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_MessageItemClicked(obj.MessageItemClicked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Message":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Continue":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OkButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ThirdButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_ThirdButtonText(obj.ThirdButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsThirdButtonVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ThirdButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Utility.PopupService cache_HomeScreenVM_PopupService = null;
                public void UpdateChildListeners_HomeScreenVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj)
                {
                    if (obj != cache_HomeScreenVM_PopupService)
                    {
                        if (cache_HomeScreenVM_PopupService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_HomeScreenVM_PopupService).PropertyChanged -= PropertyChanged_HomeScreenVM_PopupService;
                            cache_HomeScreenVM_PopupService = null;
                        }
                        if (obj != null)
                        {
                            cache_HomeScreenVM_PopupService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_HomeScreenVM_PopupService;
                        }
                    }
                }
                public void PropertyChanged_HomeScreenVM_PumpDetails(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    HomeScreen_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.PumpDetailModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.PumpDetailModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_HomeScreenVM_PumpDetails(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    HomeScreen_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.PumpDetailModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.PumpDetailModel>;
                    }
                }
                public void PropertyChanged_HomeScreenVM_BigPump(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    HomeScreen_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.BigPumpsModel obj = sender as global::Infonet.CStoreCommander.UI.Model.BigPumpsModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_HomeScreenVM_BigPump_Amount(obj.Amount, DATA_CHANGED);
                                    bindings.Update_HomeScreenVM_BigPump_PumpLabel(obj.PumpLabel, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Amount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_BigPump_Amount(obj.Amount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PumpLabel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_HomeScreenVM_BigPump_PumpLabel(obj.PumpLabel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.BigPumpsModel cache_HomeScreenVM_BigPump = null;
                public void UpdateChildListeners_HomeScreenVM_BigPump(global::Infonet.CStoreCommander.UI.Model.BigPumpsModel obj)
                {
                    if (obj != cache_HomeScreenVM_BigPump)
                    {
                        if (cache_HomeScreenVM_BigPump != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_HomeScreenVM_BigPump).PropertyChanged -= PropertyChanged_HomeScreenVM_BigPump;
                            cache_HomeScreenVM_BigPump = null;
                        }
                        if (obj != null)
                        {
                            cache_HomeScreenVM_BigPump = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_HomeScreenVM_BigPump;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.RootGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 8:
                {
                    this.pumps = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 10:
                {
                    this.gdFrameContainer = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 11:
                {
                    this.ConfirmationPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 12:
                {
                    this.PumpEmergencyPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 13:
                {
                    this.AlertPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 14:
                {
                    this.ReasonPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 15:
                {
                    this.CheckoutOptionsOpen = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 16:
                {
                    this.ReturnsPopupOpen = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 17:
                {
                    this.EnvelopePopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 18:
                {
                    this.TreatyNumberPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 19:
                {
                    this.QitePopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 20:
                {
                    this.MessagePopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 21:
                {
                    this.purchaseOrderPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 22:
                {
                    this.pumpOptionsPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 23:
                {
                    this.popupWithTextBoxFleet = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 24:
                {
                    this.taxExemptionNumberpopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 25:
                {
                    this.FNGTRPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 26:
                {
                    this.KickbackBalancePopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 27:
                {
                    this.KickbackNumberPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 28:
                {
                    this.AckTenderPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 29:
                {
                    this.AckBalancePopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 30:
                {
                    this.CarwashPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 31:
                {
                    this.FuelDiscountPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 40:
                {
                    this.btnShiftDate = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 44:
                {
                    this.txtShiftDate = (global::Windows.UI.Xaml.Documents.Run)(target);
                }
                break;
            case 50:
                {
                    this.txtSettingMenuShift = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 65:
                {
                    this.ParentFrameGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 66:
                {
                    this.frmFirst = (global::Windows.UI.Xaml.Controls.Frame)(target);
                }
                break;
            case 67:
                {
                    this.frmSecond = (global::Windows.UI.Xaml.Controls.Frame)(target);
                }
                break;
            case 68:
                {
                    this.pumpsTemplate = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 70:
                {
                    this.btnEmergency = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 76:
                {
                    this.control = (global::Windows.UI.Xaml.Controls.Button)(target);
                }
                break;
            case 77:
                {
                    this.pumpImage = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    HomeScreen_obj1_Bindings bindings = new HomeScreen_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

