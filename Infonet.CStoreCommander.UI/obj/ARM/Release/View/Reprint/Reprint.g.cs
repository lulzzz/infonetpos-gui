#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Reprint\Reprint.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "F0D6101914978681F2C9A21381F0CA86"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Reprint
{
    partial class Reprint : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj, global::System.DateTimeOffset value)
            {
                obj.SelectedDate = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_PasswordBox_Password(global::Windows.UI.Xaml.Controls.PasswordBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        private class Reprint_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReprint_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Reprint.Reprint dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::MyToolkit.Controls.DataGrid obj2;
            private global::MyToolkit.Controls.DataGrid obj3;
            private global::MyToolkit.Controls.DataGrid obj4;
            private global::MyToolkit.Controls.DataGrid obj5;
            private global::Windows.UI.Xaml.Controls.ComboBox obj8;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj9;
            private global::Windows.UI.Xaml.Controls.PasswordBox obj10;
            private global::WinRT.Triggers.InvokeCommandAction obj11;

            private Reprint_obj1_BindingsTracking bindingsTracking;

            public Reprint_obj1_Bindings()
            {
                this.bindingsTracking = new Reprint_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj2).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ReprintVM.SelectedPaymentInsideSale = (global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj2).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel), null, null);
                                }
                            });
                        break;
                    case 3:
                        this.obj3 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj3).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ReprintVM.SelectedPayAtPumpSale = (global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj3).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel), null, null);
                                }
                            });
                        break;
                    case 4:
                        this.obj4 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj4).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ReprintVM.SelectedPaymentSale = (global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj4).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel), null, null);
                                }
                            });
                        break;
                    case 5:
                        this.obj5 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj5).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ReprintVM.SelectedCloseBatchSale = (global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj5).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel), null, null);
                                }
                            });
                        break;
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        (this.obj8).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ReprintVM.SelectedReportIndex = (this.obj8).SelectedIndex;
                                }
                            });
                        break;
                    case 9:
                        this.obj9 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        (this.obj9).RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker.SelectedDateProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ReprintVM.SelectedDate = (this.obj9).SelectedDate;
                                }
                            });
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.PasswordBox)target;
                        (this.obj10).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.ReprintVM.SearchSaleNumber = (this.obj10).Password;
                                }
                            });
                        break;
                    case 11:
                        this.obj11 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IReprint_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // Reprint_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.View.Reprint.Reprint newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Reprint.Reprint obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ReprintVM(obj.ReprintVM, phase);
                    }
                }
            }
            private void Update_ReprintVM(global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ReprintVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ReprintVM_SelectedPaymentInsideSale(obj.SelectedPaymentInsideSale, phase);
                        this.Update_ReprintVM_PayInsideSales(obj.PayInsideSales, phase);
                        this.Update_ReprintVM_IsPayInsideSaleVisible(obj.IsPayInsideSaleVisible, phase);
                        this.Update_ReprintVM_SelectedPayAtPumpSale(obj.SelectedPayAtPumpSale, phase);
                        this.Update_ReprintVM_PayAtPumpSales(obj.PayAtPumpSales, phase);
                        this.Update_ReprintVM_IsPayAtPumpSaleVisible(obj.IsPayAtPumpSaleVisible, phase);
                        this.Update_ReprintVM_SelectedPaymentSale(obj.SelectedPaymentSale, phase);
                        this.Update_ReprintVM_PaymentSales(obj.PaymentSales, phase);
                        this.Update_ReprintVM_IsPaymentSaleVisible(obj.IsPaymentSaleVisible, phase);
                        this.Update_ReprintVM_SelectedCloseBatchSale(obj.SelectedCloseBatchSale, phase);
                        this.Update_ReprintVM_CloseBatchSales(obj.CloseBatchSales, phase);
                        this.Update_ReprintVM_IsCloseBatchSaleVisible(obj.IsCloseBatchSaleVisible, phase);
                        this.Update_ReprintVM_ReportTypes(obj.ReportTypes, phase);
                        this.Update_ReprintVM_SelectedReportIndex(obj.SelectedReportIndex, phase);
                        this.Update_ReprintVM_IsDateEnabled(obj.IsDateEnabled, phase);
                        this.Update_ReprintVM_SelectedDate(obj.SelectedDate, phase);
                        this.Update_ReprintVM_IsSearchBoxVisible(obj.IsSearchBoxVisible, phase);
                        this.Update_ReprintVM_SearchSaleNumber(obj.SearchSaleNumber, phase);
                        this.Update_ReprintVM_SearchBySaleNumberCommand(obj.SearchBySaleNumberCommand, phase);
                    }
                }
            }
            private void Update_ReprintVM_SelectedPaymentInsideSale(global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj2, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_ReprintVM_PayInsideSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj2, obj, null);
                }
            }
            private void Update_ReprintVM_IsPayInsideSaleVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj2, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ReprintVM_SelectedPayAtPumpSale(global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj3, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_ReprintVM_PayAtPumpSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj3, obj, null);
                }
            }
            private void Update_ReprintVM_IsPayAtPumpSaleVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ReprintVM_SelectedPaymentSale(global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj4, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_ReprintVM_PaymentSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj4, obj, null);
                }
            }
            private void Update_ReprintVM_IsPaymentSaleVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ReprintVM_SelectedCloseBatchSale(global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj5, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_ReprintVM_CloseBatchSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj5, obj, null);
                }
            }
            private void Update_ReprintVM_IsCloseBatchSaleVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ReprintVM_ReportTypes(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj8, obj, null);
                }
            }
            private void Update_ReprintVM_SelectedReportIndex(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj8, obj);
                }
            }
            private void Update_ReprintVM_IsDateEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ReprintVM_SelectedDate(global::System.DateTimeOffset obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj9, obj);
                }
            }
            private void Update_ReprintVM_IsSearchBoxVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_ReprintVM_SearchSaleNumber(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_Password(this.obj10, obj, null);
                }
            }
            private void Update_ReprintVM_SearchBySaleNumberCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj11, obj, null);
                }
            }

            private class Reprint_obj1_BindingsTracking
            {
                global::System.WeakReference<Reprint_obj1_Bindings> WeakRefToBindingObj; 

                public Reprint_obj1_BindingsTracking(Reprint_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<Reprint_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ReprintVM(null);
                }

                public void PropertyChanged_ReprintVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_ReprintVM_SelectedPaymentInsideSale(obj.SelectedPaymentInsideSale, DATA_CHANGED);
                                    bindings.Update_ReprintVM_PayInsideSales(obj.PayInsideSales, DATA_CHANGED);
                                    bindings.Update_ReprintVM_IsPayInsideSaleVisible(obj.IsPayInsideSaleVisible, DATA_CHANGED);
                                    bindings.Update_ReprintVM_SelectedPayAtPumpSale(obj.SelectedPayAtPumpSale, DATA_CHANGED);
                                    bindings.Update_ReprintVM_PayAtPumpSales(obj.PayAtPumpSales, DATA_CHANGED);
                                    bindings.Update_ReprintVM_IsPayAtPumpSaleVisible(obj.IsPayAtPumpSaleVisible, DATA_CHANGED);
                                    bindings.Update_ReprintVM_SelectedPaymentSale(obj.SelectedPaymentSale, DATA_CHANGED);
                                    bindings.Update_ReprintVM_PaymentSales(obj.PaymentSales, DATA_CHANGED);
                                    bindings.Update_ReprintVM_IsPaymentSaleVisible(obj.IsPaymentSaleVisible, DATA_CHANGED);
                                    bindings.Update_ReprintVM_SelectedCloseBatchSale(obj.SelectedCloseBatchSale, DATA_CHANGED);
                                    bindings.Update_ReprintVM_CloseBatchSales(obj.CloseBatchSales, DATA_CHANGED);
                                    bindings.Update_ReprintVM_IsCloseBatchSaleVisible(obj.IsCloseBatchSaleVisible, DATA_CHANGED);
                                    bindings.Update_ReprintVM_ReportTypes(obj.ReportTypes, DATA_CHANGED);
                                    bindings.Update_ReprintVM_SelectedReportIndex(obj.SelectedReportIndex, DATA_CHANGED);
                                    bindings.Update_ReprintVM_IsDateEnabled(obj.IsDateEnabled, DATA_CHANGED);
                                    bindings.Update_ReprintVM_SelectedDate(obj.SelectedDate, DATA_CHANGED);
                                    bindings.Update_ReprintVM_IsSearchBoxVisible(obj.IsSearchBoxVisible, DATA_CHANGED);
                                    bindings.Update_ReprintVM_SearchSaleNumber(obj.SearchSaleNumber, DATA_CHANGED);
                                    bindings.Update_ReprintVM_SearchBySaleNumberCommand(obj.SearchBySaleNumberCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SelectedPaymentInsideSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedPaymentInsideSale(obj.SelectedPaymentInsideSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PayInsideSales":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_PayInsideSales(obj.PayInsideSales, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPayInsideSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsPayInsideSaleVisible(obj.IsPayInsideSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPayAtPumpSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedPayAtPumpSale(obj.SelectedPayAtPumpSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PayAtPumpSales":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_PayAtPumpSales(obj.PayAtPumpSales, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPayAtPumpSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsPayAtPumpSaleVisible(obj.IsPayAtPumpSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPaymentSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedPaymentSale(obj.SelectedPaymentSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PaymentSales":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_PaymentSales(obj.PaymentSales, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPaymentSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsPaymentSaleVisible(obj.IsPaymentSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedCloseBatchSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedCloseBatchSale(obj.SelectedCloseBatchSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CloseBatchSales":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_CloseBatchSales(obj.CloseBatchSales, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCloseBatchSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsCloseBatchSaleVisible(obj.IsCloseBatchSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportTypes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_ReportTypes(obj.ReportTypes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedReportIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedReportIndex(obj.SelectedReportIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDateEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsDateEnabled(obj.IsDateEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedDate(obj.SelectedDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSearchBoxVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsSearchBoxVisible(obj.IsSearchBoxVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchSaleNumber":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SearchSaleNumber(obj.SearchSaleNumber, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchBySaleNumberCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SearchBySaleNumberCommand(obj.SearchBySaleNumberCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM cache_ReprintVM = null;
                public void UpdateChildListeners_ReprintVM(global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM obj)
                {
                    if (obj != cache_ReprintVM)
                    {
                        if (cache_ReprintVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ReprintVM).PropertyChanged -= PropertyChanged_ReprintVM;
                            cache_ReprintVM = null;
                        }
                        if (obj != null)
                        {
                            cache_ReprintVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ReprintVM;
                        }
                    }
                }
                public void PropertyChanged_ReprintVM_PayInsideSales(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_PayInsideSales(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel>;
                    }
                }
                public void PropertyChanged_ReprintVM_PayAtPumpSales(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_PayAtPumpSales(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel>;
                    }
                }
                public void PropertyChanged_ReprintVM_PaymentSales(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_PaymentSales(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel>;
                    }
                }
                public void PropertyChanged_ReprintVM_CloseBatchSales(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_CloseBatchSales(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel>;
                    }
                }
                public void PropertyChanged_ReprintVM_ReportTypes(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_ReportTypes(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel>;
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.PayInside = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 3:
                {
                    this.PayAtPump = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 4:
                {
                    this.PaymentSales = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 5:
                {
                    this.CloseBatch = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 6:
                {
                    this.txtAmount = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 7:
                {
                    this.txtTime = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    Reprint_obj1_Bindings bindings = new Reprint_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

