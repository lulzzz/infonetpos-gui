#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\Controls\EnvelopeNumberPopup.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "B67B57EE5367A2585F33DB746194A176"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.Controls
{
    partial class EnvelopeNumberPopup : 
        global::Windows.UI.Xaml.Controls.UserControl, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Border_Background(global::Windows.UI.Xaml.Controls.Border obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Background = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_SmallPopupHeader_CancelCommand(global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(global::MyToolkit.Extended.Controls.CustomTextBox obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.EnterPressedCommand = value;
            }
        };

        private class EnvelopeNumberPopup_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IEnvelopeNumberPopup_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Controls.EnvelopeNumberPopup dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Border obj2;
            private global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader obj3;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj4;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj5;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj6;

            private EnvelopeNumberPopup_obj1_BindingsTracking bindingsTracking;

            public EnvelopeNumberPopup_obj1_Bindings()
            {
                this.bindingsTracking = new EnvelopeNumberPopup_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = (global::Windows.UI.Xaml.Controls.Border)target;
                        break;
                    case 3:
                        this.obj3 = (global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader)target;
                        break;
                    case 4:
                        this.obj4 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 5:
                        this.obj5 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 6:
                        this.obj6 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        break;
                    default:
                        break;
                }
            }

            // IEnvelopeNumberPopup_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // EnvelopeNumberPopup_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.Controls.EnvelopeNumberPopup newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Controls.EnvelopeNumberPopup obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_BackgroundOverlay(obj.BackgroundOverlay, phase);
                        this.Update_SaleGridVM(obj.SaleGridVM, phase);
                    }
                }
            }
            private void Update_BackgroundOverlay(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Border_Background(this.obj2, obj, null);
                }
            }
            private void Update_SaleGridVM(global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleGridVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SaleGridVM_PopupService(obj.PopupService, phase);
                    }
                }
            }
            private void Update_SaleGridVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleGridVM_PopupService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SaleGridVM_PopupService_CloseCommand(obj.CloseCommand, phase);
                        this.Update_SaleGridVM_PopupService_IsYesbuttonEnabled(obj.IsYesbuttonEnabled, phase);
                        this.Update_SaleGridVM_PopupService_YesConfirmationCommand(obj.YesConfirmationCommand, phase);
                        this.Update_SaleGridVM_PopupService_NoConfirmationCommand(obj.NoConfirmationCommand, phase);
                        this.Update_SaleGridVM_PopupService_IsNoButtonEnabled(obj.IsNoButtonEnabled, phase);
                    }
                }
            }
            private void Update_SaleGridVM_PopupService_CloseCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_SmallPopupHeader_CancelCommand(this.obj3, obj, null);
                }
            }
            private void Update_SaleGridVM_PopupService_IsYesbuttonEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj4, obj);
                }
            }
            private void Update_SaleGridVM_PopupService_YesConfirmationCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                    XamlBindingSetters.Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(this.obj6, obj, null);
                }
            }
            private void Update_SaleGridVM_PopupService_NoConfirmationCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj5, obj, null);
                }
            }
            private void Update_SaleGridVM_PopupService_IsNoButtonEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj5, obj);
                }
            }

            private class EnvelopeNumberPopup_obj1_BindingsTracking
            {
                global::System.WeakReference<EnvelopeNumberPopup_obj1_Bindings> WeakRefToBindingObj; 

                public EnvelopeNumberPopup_obj1_BindingsTracking(EnvelopeNumberPopup_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<EnvelopeNumberPopup_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                    UpdateChildListeners_SaleGridVM(null);
                    UpdateChildListeners_SaleGridVM_PopupService(null);
                }

                public void DependencyPropertyChanged_BackgroundOverlay(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    EnvelopeNumberPopup_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Infonet.CStoreCommander.UI.Controls.EnvelopeNumberPopup obj = sender as global::Infonet.CStoreCommander.UI.Controls.EnvelopeNumberPopup;
        if (obj != null)
        {
            bindings.Update_BackgroundOverlay(obj.BackgroundOverlay, DATA_CHANGED);
        }
                    }
                }
                private long tokenDPC_BackgroundOverlay = 0;
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Controls.EnvelopeNumberPopup obj)
                {
                    EnvelopeNumberPopup_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            bindings.dataRoot.UnregisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.EnvelopeNumberPopup.BackgroundOverlayProperty, tokenDPC_BackgroundOverlay);
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            tokenDPC_BackgroundOverlay = obj.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.UI.Controls.EnvelopeNumberPopup.BackgroundOverlayProperty, DependencyPropertyChanged_BackgroundOverlay);
                        }
                    }
                }
                public void PropertyChanged_SaleGridVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    EnvelopeNumberPopup_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_SaleGridVM_PopupService(obj.PopupService, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "PopupService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM cache_SaleGridVM = null;
                public void UpdateChildListeners_SaleGridVM(global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM obj)
                {
                    if (obj != cache_SaleGridVM)
                    {
                        if (cache_SaleGridVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleGridVM).PropertyChanged -= PropertyChanged_SaleGridVM;
                            cache_SaleGridVM = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleGridVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleGridVM;
                        }
                    }
                }
                public void PropertyChanged_SaleGridVM_PopupService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    EnvelopeNumberPopup_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Utility.PopupService obj = sender as global::Infonet.CStoreCommander.UI.Utility.PopupService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_SaleGridVM_PopupService_CloseCommand(obj.CloseCommand, DATA_CHANGED);
                                    bindings.Update_SaleGridVM_PopupService_IsYesbuttonEnabled(obj.IsYesbuttonEnabled, DATA_CHANGED);
                                    bindings.Update_SaleGridVM_PopupService_YesConfirmationCommand(obj.YesConfirmationCommand, DATA_CHANGED);
                                    bindings.Update_SaleGridVM_PopupService_NoConfirmationCommand(obj.NoConfirmationCommand, DATA_CHANGED);
                                    bindings.Update_SaleGridVM_PopupService_IsNoButtonEnabled(obj.IsNoButtonEnabled, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CloseCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_PopupService_CloseCommand(obj.CloseCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsYesbuttonEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_PopupService_IsYesbuttonEnabled(obj.IsYesbuttonEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesConfirmationCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_PopupService_YesConfirmationCommand(obj.YesConfirmationCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoConfirmationCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_PopupService_NoConfirmationCommand(obj.NoConfirmationCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsNoButtonEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_PopupService_IsNoButtonEnabled(obj.IsNoButtonEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Utility.PopupService cache_SaleGridVM_PopupService = null;
                public void UpdateChildListeners_SaleGridVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj)
                {
                    if (obj != cache_SaleGridVM_PopupService)
                    {
                        if (cache_SaleGridVM_PopupService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleGridVM_PopupService).PropertyChanged -= PropertyChanged_SaleGridVM_PopupService;
                            cache_SaleGridVM_PopupService = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleGridVM_PopupService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleGridVM_PopupService;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3:
                {
                    this.TitleText = (global::Infonet.CStoreCommander.UI.Controls.SmallPopupHeader)(target);
                }
                break;
            case 6:
                {
                    this.EnvelopeNumber = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.UserControl element1 = (global::Windows.UI.Xaml.Controls.UserControl)target;
                    EnvelopeNumberPopup_obj1_Bindings bindings = new EnvelopeNumberPopup_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

