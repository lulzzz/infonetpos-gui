#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\GiveX\GiveX.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "BC12FF94A6BEF6E18E8A1A19762BC375"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.GiveX
{
    partial class GiveX : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        private class GiveX_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IGiveX_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.GiveX.GiveX dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj2;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj3;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj4;
            private global::Windows.UI.Xaml.Controls.Grid obj5;
            private global::Windows.UI.Xaml.Controls.Grid obj6;
            private global::WinRT.Triggers.InvokeCommandAction obj7;
            private global::Windows.UI.Xaml.Controls.Button obj8;
            private global::WinRT.Triggers.InvokeCommandAction obj9;
            private global::Windows.UI.Xaml.Controls.Button obj10;
            private global::WinRT.Triggers.InvokeCommandAction obj11;
            private global::Windows.UI.Xaml.Controls.Button obj13;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj14;
            private global::WinRT.Triggers.InvokeCommandAction obj15;

            private GiveX_obj1_BindingsTracking bindingsTracking;

            public GiveX_obj1_Bindings()
            {
                this.bindingsTracking = new GiveX_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 3:
                        this.obj3 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 4:
                        this.obj4 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 7:
                        this.obj7 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 9:
                        this.obj9 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 11:
                        this.obj11 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 14:
                        this.obj14 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 15:
                        this.obj15 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IGiveX_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // GiveX_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.View.GiveX.GiveX newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.GiveX.GiveX obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_GiveXVM(obj.GiveXVM, phase);
                    }
                }
            }
            private void Update_GiveXVM(global::Infonet.CStoreCommander.UI.ViewModel.GiveX.GiveXVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_GiveXVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_GiveXVM_ActivateCommand(obj.ActivateCommand, phase);
                        this.Update_GiveXVM_IsActiveVisible(obj.IsActiveVisible, phase);
                        this.Update_GiveXVM_IsCloseBatchEnabled(obj.IsCloseBatchEnabled, phase);
                        this.Update_GiveXVM_CloseBatchCommand(obj.CloseBatchCommand, phase);
                        this.Update_GiveXVM_DeactivateCommand(obj.DeactivateCommand, phase);
                        this.Update_GiveXVM_IsDeactivateVisible(obj.IsDeactivateVisible, phase);
                        this.Update_GiveXVM_IsExistingCardVisible(obj.IsExistingCardVisible, phase);
                        this.Update_GiveXVM_IsNewCardVisible(obj.IsNewCardVisible, phase);
                        this.Update_GiveXVM_AmountEnteredCommand(obj.AmountEnteredCommand, phase);
                        this.Update_GiveXVM_AddCommand(obj.AddCommand, phase);
                        this.Update_GiveXVM_AddEnteredCommand(obj.AddEnteredCommand, phase);
                        this.Update_GiveXVM_AllowAdjustmentForGiveX(obj.AllowAdjustmentForGiveX, phase);
                        this.Update_GiveXVM_SetCommand(obj.SetCommand, phase);
                        this.Update_GiveXVM_BalanceEnteredCommand(obj.BalanceEnteredCommand, phase);
                        this.Update_GiveXVM_SubmitCommand(obj.SubmitCommand, phase);
                        this.Update_GiveXVM_IsSubmitButtonEnable(obj.IsSubmitButtonEnable, phase);
                        this.Update_GiveXVM_OpenGivexReportCommand(obj.OpenGivexReportCommand, phase);
                        this.Update_GiveXVM_CardNumberEnteredCommand(obj.CardNumberEnteredCommand, phase);
                    }
                }
            }
            private void Update_GiveXVM_ActivateCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj2, obj, null);
                }
            }
            private void Update_GiveXVM_IsActiveVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj2, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_GiveXVM_IsCloseBatchEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj3, obj);
                }
            }
            private void Update_GiveXVM_CloseBatchCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                }
            }
            private void Update_GiveXVM_DeactivateCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                }
            }
            private void Update_GiveXVM_IsDeactivateVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_GiveXVM_IsExistingCardVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_GiveXVM_IsNewCardVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj6, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_GiveXVM_AmountEnteredCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj7, obj, null);
                }
            }
            private void Update_GiveXVM_AddCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                }
            }
            private void Update_GiveXVM_AddEnteredCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj9, obj, null);
                }
            }
            private void Update_GiveXVM_AllowAdjustmentForGiveX(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                }
            }
            private void Update_GiveXVM_SetCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj10, obj, null);
                }
            }
            private void Update_GiveXVM_BalanceEnteredCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj11, obj, null);
                }
            }
            private void Update_GiveXVM_SubmitCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj13, obj, null);
                }
            }
            private void Update_GiveXVM_IsSubmitButtonEnable(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj13, obj);
                }
            }
            private void Update_GiveXVM_OpenGivexReportCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj14, obj, null);
                }
            }
            private void Update_GiveXVM_CardNumberEnteredCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj15, obj, null);
                }
            }

            private class GiveX_obj1_BindingsTracking
            {
                global::System.WeakReference<GiveX_obj1_Bindings> WeakRefToBindingObj; 

                public GiveX_obj1_BindingsTracking(GiveX_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<GiveX_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_GiveXVM(null);
                }

                public void PropertyChanged_GiveXVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    GiveX_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.GiveX.GiveXVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.GiveX.GiveXVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_GiveXVM_ActivateCommand(obj.ActivateCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_IsActiveVisible(obj.IsActiveVisible, DATA_CHANGED);
                                    bindings.Update_GiveXVM_IsCloseBatchEnabled(obj.IsCloseBatchEnabled, DATA_CHANGED);
                                    bindings.Update_GiveXVM_CloseBatchCommand(obj.CloseBatchCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_DeactivateCommand(obj.DeactivateCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_IsDeactivateVisible(obj.IsDeactivateVisible, DATA_CHANGED);
                                    bindings.Update_GiveXVM_IsExistingCardVisible(obj.IsExistingCardVisible, DATA_CHANGED);
                                    bindings.Update_GiveXVM_IsNewCardVisible(obj.IsNewCardVisible, DATA_CHANGED);
                                    bindings.Update_GiveXVM_AmountEnteredCommand(obj.AmountEnteredCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_AddCommand(obj.AddCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_AddEnteredCommand(obj.AddEnteredCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_AllowAdjustmentForGiveX(obj.AllowAdjustmentForGiveX, DATA_CHANGED);
                                    bindings.Update_GiveXVM_SetCommand(obj.SetCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_BalanceEnteredCommand(obj.BalanceEnteredCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_SubmitCommand(obj.SubmitCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_IsSubmitButtonEnable(obj.IsSubmitButtonEnable, DATA_CHANGED);
                                    bindings.Update_GiveXVM_OpenGivexReportCommand(obj.OpenGivexReportCommand, DATA_CHANGED);
                                    bindings.Update_GiveXVM_CardNumberEnteredCommand(obj.CardNumberEnteredCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ActivateCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_ActivateCommand(obj.ActivateCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsActiveVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_IsActiveVisible(obj.IsActiveVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCloseBatchEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_IsCloseBatchEnabled(obj.IsCloseBatchEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CloseBatchCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_CloseBatchCommand(obj.CloseBatchCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DeactivateCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_DeactivateCommand(obj.DeactivateCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDeactivateVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_IsDeactivateVisible(obj.IsDeactivateVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsExistingCardVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_IsExistingCardVisible(obj.IsExistingCardVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsNewCardVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_IsNewCardVisible(obj.IsNewCardVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AmountEnteredCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_AmountEnteredCommand(obj.AmountEnteredCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AddCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_AddCommand(obj.AddCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AddEnteredCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_AddEnteredCommand(obj.AddEnteredCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AllowAdjustmentForGiveX":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_AllowAdjustmentForGiveX(obj.AllowAdjustmentForGiveX, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SetCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_SetCommand(obj.SetCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BalanceEnteredCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_BalanceEnteredCommand(obj.BalanceEnteredCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SubmitCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_SubmitCommand(obj.SubmitCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSubmitButtonEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_IsSubmitButtonEnable(obj.IsSubmitButtonEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenGivexReportCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_OpenGivexReportCommand(obj.OpenGivexReportCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CardNumberEnteredCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiveXVM_CardNumberEnteredCommand(obj.CardNumberEnteredCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.GiveX.GiveXVM cache_GiveXVM = null;
                public void UpdateChildListeners_GiveXVM(global::Infonet.CStoreCommander.UI.ViewModel.GiveX.GiveXVM obj)
                {
                    if (obj != cache_GiveXVM)
                    {
                        if (cache_GiveXVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_GiveXVM).PropertyChanged -= PropertyChanged_GiveXVM;
                            cache_GiveXVM = null;
                        }
                        if (obj != null)
                        {
                            cache_GiveXVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_GiveXVM;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 12:
                {
                    this.txtCard = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    GiveX_obj1_Bindings bindings = new GiveX_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

