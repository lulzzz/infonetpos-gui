#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Login\TillClose.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "0E6BC8EF198DB698C36AAB313178C43D"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Login
{
    partial class TillClose : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(global::Windows.UI.Xaml.Controls.Primitives.Popup obj, global::System.Boolean value)
            {
                obj.IsOpen = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Message = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Description = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Continue = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.ButtonBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Title = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.HeadingText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.FirstButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.SecondButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.FirstButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.SecondButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.ThirdButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_IsThirdButtonVisible(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.Boolean value)
            {
                obj.IsThirdButtonVisible = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.ThirdButtonBottomBackgroundColor = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Documents_Run_Text(global::Windows.UI.Xaml.Documents.Run obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(global::MyToolkit.Controls.DataGridTextColumn obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.KeyUpCommand = value;
            }
        };

        private class TillClose_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ITillClose_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Login.TillClose dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Button obj3;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj4;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj5;
            private global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj6;
            private global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj7;
            private global::MyToolkit.Controls.DataGrid obj8;
            private global::MyToolkit.Controls.DataGrid obj9;
            private global::MyToolkit.Controls.DataGrid obj10;
            private global::MyToolkit.Controls.DataGrid obj11;
            private global::MyToolkit.Controls.DataGrid obj12;
            private global::Windows.UI.Xaml.Controls.Grid obj13;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj14;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj15;
            private global::Windows.UI.Xaml.Controls.Grid obj16;
            private global::Windows.UI.Xaml.Documents.Run obj17;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj18;
            private global::Windows.UI.Xaml.Controls.TextBlock obj19;
            private global::MyToolkit.Controls.DataGridTextColumn obj20;
            private global::MyToolkit.Controls.DataGridTextColumn obj21;
            private global::MyToolkit.Controls.DataGridTextColumn obj22;

            private TillClose_obj1_BindingsTracking bindingsTracking;

            public TillClose_obj1_Bindings()
            {
                this.bindingsTracking = new TillClose_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3:
                        this.obj3 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 4:
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 5:
                        this.obj5 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 6:
                        this.obj6 = (global::Infonet.CStoreCommander.UI.Controls.NotificationPopup)target;
                        break;
                    case 7:
                        this.obj7 = (global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons)target;
                        break;
                    case 8:
                        this.obj8 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj8).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.CloseTillVM.SelectedCloseTillTenders = (global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj8).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel), null, null);
                                }
                            });
                        break;
                    case 9:
                        this.obj9 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj9).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.CloseTillVM.SelectedCloseTillTenders = (global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj9).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel), null, null);
                                }
                            });
                        break;
                    case 10:
                        this.obj10 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj10).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.CloseTillVM.SelectedCloseTillTenders = (global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj10).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel), null, null);
                                }
                            });
                        break;
                    case 11:
                        this.obj11 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj11).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.CloseTillVM.SelectedCloseTillTenders = (global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj11).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel), null, null);
                                }
                            });
                        break;
                    case 12:
                        this.obj12 = (global::MyToolkit.Controls.DataGrid)target;
                        (this.obj12).RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.CloseTillVM.SelectedBillCoin = (global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel)this.LookupConverter("NothingConverter").ConvertBack((this.obj12).SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel), null, null);
                                }
                            });
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 14:
                        this.obj14 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 15:
                        this.obj15 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Documents.Run)target;
                        break;
                    case 18:
                        this.obj18 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 19:
                        this.obj19 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 20:
                        this.obj20 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 21:
                        this.obj21 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 22:
                        this.obj22 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    default:
                        break;
                }
            }

            // ITillClose_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // TillClose_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.View.Login.TillClose newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Login.TillClose obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CloseTillVM(obj.CloseTillVM, phase);
                    }
                }
            }
            private void Update_CloseTillVM(global::Infonet.CStoreCommander.UI.ViewModel.Login.CloseTillVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_CloseTillVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CloseTillVM_ExitCommand(obj.ExitCommand, phase);
                        this.Update_CloseTillVM_IsExitButtonEnable(obj.IsExitButtonEnable, phase);
                        this.Update_CloseTillVM_PopupService(obj.PopupService, phase);
                        this.Update_CloseTillVM_CloseTillModel(obj.CloseTillModel, phase);
                        this.Update_CloseTillVM_SelectedCloseTillTenders(obj.SelectedCloseTillTenders, phase);
                        this.Update_CloseTillVM_GridWidth5ColumnVisible(obj.GridWidth5ColumnVisible, phase);
                        this.Update_CloseTillVM_GridWithSystemColumnVisible(obj.GridWithSystemColumnVisible, phase);
                        this.Update_CloseTillVM_GridWidthEnteredColumnVisible(obj.GridWidthEnteredColumnVisible, phase);
                        this.Update_CloseTillVM_GridWidth2ColumnVisible(obj.GridWidth2ColumnVisible, phase);
                        this.Update_CloseTillVM_SelectedBillCoin(obj.SelectedBillCoin, phase);
                        this.Update_CloseTillVM_IsBillCoinGridVisible(obj.IsBillCoinGridVisible, phase);
                        this.Update_CloseTillVM_IsReportVisible(obj.IsReportVisible, phase);
                        this.Update_CloseTillVM_IsBillCoinCounterEnable(obj.IsBillCoinCounterEnable, phase);
                        this.Update_CloseTillVM_BillCoinButtonPressedCommand(obj.BillCoinButtonPressedCommand, phase);
                        this.Update_CloseTillVM_IsCompleteTillCloseButtonEnable(obj.IsCompleteTillCloseButtonEnable, phase);
                        this.Update_CloseTillVM_FinishTillCloseCommand(obj.FinishTillCloseCommand, phase);
                        this.Update_CloseTillVM_PrintReportCommand(obj.PrintReportCommand, phase);
                        this.Update_CloseTillVM_TillCloseReport(obj.TillCloseReport, phase);
                        this.Update_CloseTillVM_BillCoinValueChangedCommand(obj.BillCoinValueChangedCommand, phase);
                        this.Update_CloseTillVM_TenderValueChangedCommand(obj.TenderValueChangedCommand, phase);
                    }
                }
            }
            private void Update_CloseTillVM_ExitCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                }
            }
            private void Update_CloseTillVM_IsExitButtonEnable(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj3, obj);
                }
            }
            private void Update_CloseTillVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_CloseTillVM_PopupService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CloseTillVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, phase);
                        this.Update_CloseTillVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, phase);
                        this.Update_CloseTillVM_PopupService_Message(obj.Message, phase);
                        this.Update_CloseTillVM_PopupService_Continue(obj.Continue, phase);
                        this.Update_CloseTillVM_PopupService_OkButtonColor(obj.OkButtonColor, phase);
                        this.Update_CloseTillVM_PopupService_Title(obj.Title, phase);
                        this.Update_CloseTillVM_PopupService_YesButtonColor(obj.YesButtonColor, phase);
                        this.Update_CloseTillVM_PopupService_NoButtonColor(obj.NoButtonColor, phase);
                        this.Update_CloseTillVM_PopupService_YesButtonText(obj.YesButtonText, phase);
                        this.Update_CloseTillVM_PopupService_NoButtonText(obj.NoButtonText, phase);
                        this.Update_CloseTillVM_PopupService_ThirdButtonText(obj.ThirdButtonText, phase);
                        this.Update_CloseTillVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, phase);
                        this.Update_CloseTillVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, phase);
                    }
                }
            }
            private void Update_CloseTillVM_PopupService_IsConfirmationPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj4, obj);
                }
            }
            private void Update_CloseTillVM_PopupService_IsAlertPopupOpen(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj5, obj);
                }
            }
            private void Update_CloseTillVM_PopupService_Message(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(this.obj6, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(this.obj7, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_Continue(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(this.obj6, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_OkButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(this.obj6, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_Title(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(this.obj6, obj, null);
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(this.obj7, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_YesButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(this.obj7, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_NoButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(this.obj7, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_YesButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(this.obj7, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_NoButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(this.obj7, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_ThirdButtonText(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonText(this.obj7, obj, null);
                }
            }
            private void Update_CloseTillVM_PopupService_IsThirdButtonVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_IsThirdButtonVisible(this.obj7, obj);
                }
            }
            private void Update_CloseTillVM_PopupService_ThirdButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonBottomBackgroundColor(this.obj7, obj, null);
                }
            }
            private void Update_CloseTillVM_CloseTillModel(global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_CloseTillVM_CloseTillModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CloseTillVM_CloseTillModel_Tenders(obj.Tenders, phase);
                        this.Update_CloseTillVM_CloseTillModel_BillCoins(obj.BillCoins, phase);
                        this.Update_CloseTillVM_CloseTillModel_ShowBillCoins(obj.ShowBillCoins, phase);
                        this.Update_CloseTillVM_CloseTillModel_Total(obj.Total, phase);
                    }
                }
            }
            private void Update_CloseTillVM_CloseTillModel_Tenders(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj8, obj, null);
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj9, obj, null);
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj10, obj, null);
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj11, obj, null);
                }
            }
            private void Update_CloseTillVM_SelectedCloseTillTenders(global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj8, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj9, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj10, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj11, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_CloseTillVM_GridWidth5ColumnVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj8, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_CloseTillVM_GridWithSystemColumnVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_CloseTillVM_GridWidthEnteredColumnVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_CloseTillVM_GridWidth2ColumnVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj11, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_CloseTillVM_SelectedBillCoin(global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj12, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_CloseTillVM_CloseTillModel_BillCoins(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj12, obj, null);
                }
            }
            private void Update_CloseTillVM_IsBillCoinGridVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj16, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_CloseTillVM_IsReportVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj13, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_CloseTillVM_IsBillCoinCounterEnable(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj14, obj);
                }
            }
            private void Update_CloseTillVM_CloseTillModel_ShowBillCoins(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_CloseTillVM_BillCoinButtonPressedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj14, obj, null);
                }
            }
            private void Update_CloseTillVM_IsCompleteTillCloseButtonEnable(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj15, obj);
                }
            }
            private void Update_CloseTillVM_FinishTillCloseCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj15, obj, null);
                }
            }
            private void Update_CloseTillVM_CloseTillModel_Total(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Documents_Run_Text(this.obj17, obj, null);
                }
            }
            private void Update_CloseTillVM_PrintReportCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj18, obj, null);
                }
            }
            private void Update_CloseTillVM_TillCloseReport(global::Infonet.CStoreCommander.EntityLayer.Entities.Reports.Report obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_CloseTillVM_TillCloseReport_ReportContent(obj.ReportContent, phase);
                    }
                }
            }
            private void Update_CloseTillVM_TillCloseReport_ReportContent(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj19, obj, null);
                }
            }
            private void Update_CloseTillVM_BillCoinValueChangedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj20, obj, null);
                }
            }
            private void Update_CloseTillVM_TenderValueChangedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj21, obj, null);
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj22, obj, null);
                }
            }

            private class TillClose_obj1_BindingsTracking
            {
                global::System.WeakReference<TillClose_obj1_Bindings> WeakRefToBindingObj; 

                public TillClose_obj1_BindingsTracking(TillClose_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<TillClose_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_CloseTillVM(null);
                    UpdateChildListeners_CloseTillVM_PopupService(null);
                    UpdateChildListeners_CloseTillVM_CloseTillModel(null);
                }

                public void PropertyChanged_CloseTillVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Login.CloseTillVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Login.CloseTillVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_CloseTillVM_ExitCommand(obj.ExitCommand, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_IsExitButtonEnable(obj.IsExitButtonEnable, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_CloseTillModel(obj.CloseTillModel, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_SelectedCloseTillTenders(obj.SelectedCloseTillTenders, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_GridWidth5ColumnVisible(obj.GridWidth5ColumnVisible, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_GridWithSystemColumnVisible(obj.GridWithSystemColumnVisible, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_GridWidthEnteredColumnVisible(obj.GridWidthEnteredColumnVisible, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_GridWidth2ColumnVisible(obj.GridWidth2ColumnVisible, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_SelectedBillCoin(obj.SelectedBillCoin, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_IsBillCoinGridVisible(obj.IsBillCoinGridVisible, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_IsReportVisible(obj.IsReportVisible, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_IsBillCoinCounterEnable(obj.IsBillCoinCounterEnable, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_BillCoinButtonPressedCommand(obj.BillCoinButtonPressedCommand, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_IsCompleteTillCloseButtonEnable(obj.IsCompleteTillCloseButtonEnable, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_FinishTillCloseCommand(obj.FinishTillCloseCommand, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PrintReportCommand(obj.PrintReportCommand, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_TillCloseReport(obj.TillCloseReport, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_BillCoinValueChangedCommand(obj.BillCoinValueChangedCommand, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_TenderValueChangedCommand(obj.TenderValueChangedCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ExitCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_ExitCommand(obj.ExitCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsExitButtonEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_IsExitButtonEnable(obj.IsExitButtonEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PopupService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CloseTillModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_CloseTillModel(obj.CloseTillModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedCloseTillTenders":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_SelectedCloseTillTenders(obj.SelectedCloseTillTenders, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GridWidth5ColumnVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_GridWidth5ColumnVisible(obj.GridWidth5ColumnVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GridWithSystemColumnVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_GridWithSystemColumnVisible(obj.GridWithSystemColumnVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GridWidthEnteredColumnVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_GridWidthEnteredColumnVisible(obj.GridWidthEnteredColumnVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GridWidth2ColumnVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_GridWidth2ColumnVisible(obj.GridWidth2ColumnVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedBillCoin":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_SelectedBillCoin(obj.SelectedBillCoin, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsBillCoinGridVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_IsBillCoinGridVisible(obj.IsBillCoinGridVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsReportVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_IsReportVisible(obj.IsReportVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsBillCoinCounterEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_IsBillCoinCounterEnable(obj.IsBillCoinCounterEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BillCoinButtonPressedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_BillCoinButtonPressedCommand(obj.BillCoinButtonPressedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCompleteTillCloseButtonEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_IsCompleteTillCloseButtonEnable(obj.IsCompleteTillCloseButtonEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FinishTillCloseCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_FinishTillCloseCommand(obj.FinishTillCloseCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PrintReportCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PrintReportCommand(obj.PrintReportCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TillCloseReport":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_TillCloseReport(obj.TillCloseReport, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BillCoinValueChangedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_BillCoinValueChangedCommand(obj.BillCoinValueChangedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TenderValueChangedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_TenderValueChangedCommand(obj.TenderValueChangedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Login.CloseTillVM cache_CloseTillVM = null;
                public void UpdateChildListeners_CloseTillVM(global::Infonet.CStoreCommander.UI.ViewModel.Login.CloseTillVM obj)
                {
                    if (obj != cache_CloseTillVM)
                    {
                        if (cache_CloseTillVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_CloseTillVM).PropertyChanged -= PropertyChanged_CloseTillVM;
                            cache_CloseTillVM = null;
                        }
                        if (obj != null)
                        {
                            cache_CloseTillVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_CloseTillVM;
                        }
                    }
                }
                public void PropertyChanged_CloseTillVM_PopupService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Utility.PopupService obj = sender as global::Infonet.CStoreCommander.UI.Utility.PopupService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_CloseTillVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_ThirdButtonText(obj.ThirdButtonText, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsConfirmationPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAlertPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Message":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Continue":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OkButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ThirdButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_ThirdButtonText(obj.ThirdButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsThirdButtonVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ThirdButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Utility.PopupService cache_CloseTillVM_PopupService = null;
                public void UpdateChildListeners_CloseTillVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj)
                {
                    if (obj != cache_CloseTillVM_PopupService)
                    {
                        if (cache_CloseTillVM_PopupService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_CloseTillVM_PopupService).PropertyChanged -= PropertyChanged_CloseTillVM_PopupService;
                            cache_CloseTillVM_PopupService = null;
                        }
                        if (obj != null)
                        {
                            cache_CloseTillVM_PopupService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_CloseTillVM_PopupService;
                        }
                    }
                }
                public void PropertyChanged_CloseTillVM_CloseTillModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_CloseTillVM_CloseTillModel_Tenders(obj.Tenders, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_CloseTillModel_BillCoins(obj.BillCoins, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_CloseTillModel_ShowBillCoins(obj.ShowBillCoins, DATA_CHANGED);
                                    bindings.Update_CloseTillVM_CloseTillModel_Total(obj.Total, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Tenders":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_CloseTillModel_Tenders(obj.Tenders, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BillCoins":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_CloseTillModel_BillCoins(obj.BillCoins, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowBillCoins":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_CloseTillModel_ShowBillCoins(obj.ShowBillCoins, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Total":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_CloseTillVM_CloseTillModel_Total(obj.Total, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillModel cache_CloseTillVM_CloseTillModel = null;
                public void UpdateChildListeners_CloseTillVM_CloseTillModel(global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillModel obj)
                {
                    if (obj != cache_CloseTillVM_CloseTillModel)
                    {
                        if (cache_CloseTillVM_CloseTillModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_CloseTillVM_CloseTillModel).PropertyChanged -= PropertyChanged_CloseTillVM_CloseTillModel;
                            cache_CloseTillVM_CloseTillModel = null;
                        }
                        if (obj != null)
                        {
                            cache_CloseTillVM_CloseTillModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_CloseTillVM_CloseTillModel;
                        }
                    }
                }
                public void PropertyChanged_CloseTillVM_CloseTillModel_Tenders(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_CloseTillVM_CloseTillModel_Tenders(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel>;
                    }
                }
                public void PropertyChanged_CloseTillVM_SelectedCloseTillTenders(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Logout.CloseTillTendersModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void PropertyChanged_CloseTillVM_SelectedBillCoin(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void PropertyChanged_CloseTillVM_CloseTillModel_BillCoins(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_CloseTillVM_CloseTillModel_BillCoins(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    TillClose_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Logout.BillCoinsModel>;
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.gdFrameContainer = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 4:
                {
                    this.ConfirmationPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 5:
                {
                    this.AlertPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    TillClose_obj1_Bindings bindings = new TillClose_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

