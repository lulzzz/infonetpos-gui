#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Stock\AddStock.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "DC93C373ADC70ECE3422829E792D63DF"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Stock
{
    partial class AddStock : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.BackCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Nullable<global::System.Boolean>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Nullable<global::System.Boolean>), targetNullValue);
                }
                obj.IsChecked = value;
            }
        };

        private class AddStock_obj8_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IAddStock_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj8;

            private AddStock_obj8_BindingsTracking bindingsTracking;

            public AddStock_obj8_Bindings()
            {
                this.bindingsTracking = new AddStock_obj8_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 8:
                        this.obj8 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.CheckBox)target);
                        (this.obj8.Target as global::Windows.UI.Xaml.Controls.CheckBox).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.IsChecked = (this.obj8.Target as global::Windows.UI.Xaml.Controls.CheckBox).IsChecked;
                                }
                            });
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes data = args.NewValue as global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.CheckBox)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IAddStock_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // AddStock_obj8_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_TaxCode(obj.TaxCode, phase);
                        this.Update_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_TaxCode(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content(this.obj8.Target as global::Windows.UI.Xaml.Controls.CheckBox, obj, null);
                }
            }
            private void Update_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj8.Target as global::Windows.UI.Xaml.Controls.CheckBox, obj, null);
                }
            }

            private class AddStock_obj8_BindingsTracking
            {
                global::System.WeakReference<AddStock_obj8_Bindings> WeakRefToBindingObj; 

                public AddStock_obj8_BindingsTracking(AddStock_obj8_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<AddStock_obj8_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AddStock_obj8_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes obj = sender as global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_TaxCode(obj.TaxCode, DATA_CHANGED);
                                    bindings.Update_IsChecked(obj.IsChecked, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "TaxCode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TaxCode(obj.TaxCode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsChecked(obj.IsChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes obj)
                {
                    AddStock_obj8_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class AddStock_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IAddStock_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Stock.AddStock dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj2;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj3;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj4;
            private global::Windows.UI.Xaml.Controls.GridView obj7;
            private global::WinRT.Triggers.InvokeCommandAction obj9;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj10;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj11;

            private AddStock_obj1_BindingsTracking bindingsTracking;

            public AddStock_obj1_Bindings()
            {
                this.bindingsTracking = new AddStock_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2:
                        this.obj2 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 3:
                        this.obj3 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 4:
                        this.obj4 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 9:
                        this.obj9 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 10:
                        this.obj10 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 11:
                        this.obj11 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IAddStock_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // AddStock_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.View.Stock.AddStock newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Stock.AddStock obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AddStockScreenVM(obj.AddStockScreenVM, phase);
                    }
                }
            }
            private void Update_AddStockScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.Stock.AddStockScreenVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_AddStockScreenVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AddStockScreenVM_BackCommand(obj.BackCommand, phase);
                        this.Update_AddStockScreenVM_IsAddButtonEnabled(obj.IsAddButtonEnabled, phase);
                        this.Update_AddStockScreenVM_AddStockCommand(obj.AddStockCommand, phase);
                        this.Update_AddStockScreenVM_IsNotReceivedFromAddSale(obj.IsNotReceivedFromAddSale, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_AddStockScreenVM_TaxCodes(obj.TaxCodes, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AddStockScreenVM_RegularPriceCompletedCommand(obj.RegularPriceCompletedCommand, phase);
                        this.Update_AddStockScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, phase);
                    }
                }
            }
            private void Update_AddStockScreenVM_BackCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(this.obj2, obj, null);
                }
            }
            private void Update_AddStockScreenVM_IsAddButtonEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj3, obj);
                }
            }
            private void Update_AddStockScreenVM_AddStockCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                }
            }
            private void Update_AddStockScreenVM_IsNotReceivedFromAddSale(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj4, obj);
                }
            }
            private void Update_AddStockScreenVM_TaxCodes(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj7, obj, null);
                }
            }
            private void Update_AddStockScreenVM_RegularPriceCompletedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj9, obj, null);
                }
            }
            private void Update_AddStockScreenVM_InvokeKeyboardCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj10, obj, null);
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj11, obj, null);
                }
            }

            private class AddStock_obj1_BindingsTracking
            {
                global::System.WeakReference<AddStock_obj1_Bindings> WeakRefToBindingObj; 

                public AddStock_obj1_BindingsTracking(AddStock_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<AddStock_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_AddStockScreenVM(null);
                }

                public void PropertyChanged_AddStockScreenVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AddStock_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Stock.AddStockScreenVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Stock.AddStockScreenVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_AddStockScreenVM_BackCommand(obj.BackCommand, DATA_CHANGED);
                                    bindings.Update_AddStockScreenVM_IsAddButtonEnabled(obj.IsAddButtonEnabled, DATA_CHANGED);
                                    bindings.Update_AddStockScreenVM_AddStockCommand(obj.AddStockCommand, DATA_CHANGED);
                                    bindings.Update_AddStockScreenVM_IsNotReceivedFromAddSale(obj.IsNotReceivedFromAddSale, DATA_CHANGED);
                                    bindings.Update_AddStockScreenVM_RegularPriceCompletedCommand(obj.RegularPriceCompletedCommand, DATA_CHANGED);
                                    bindings.Update_AddStockScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "BackCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddStockScreenVM_BackCommand(obj.BackCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAddButtonEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddStockScreenVM_IsAddButtonEnabled(obj.IsAddButtonEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AddStockCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddStockScreenVM_AddStockCommand(obj.AddStockCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsNotReceivedFromAddSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddStockScreenVM_IsNotReceivedFromAddSale(obj.IsNotReceivedFromAddSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RegularPriceCompletedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddStockScreenVM_RegularPriceCompletedCommand(obj.RegularPriceCompletedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "InvokeKeyboardCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddStockScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Stock.AddStockScreenVM cache_AddStockScreenVM = null;
                public void UpdateChildListeners_AddStockScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.Stock.AddStockScreenVM obj)
                {
                    if (obj != cache_AddStockScreenVM)
                    {
                        if (cache_AddStockScreenVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_AddStockScreenVM).PropertyChanged -= PropertyChanged_AddStockScreenVM;
                            cache_AddStockScreenVM = null;
                        }
                        if (obj != null)
                        {
                            cache_AddStockScreenVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_AddStockScreenVM;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3:
                {
                    this.btnSave = (global::Infonet.CStoreCommander.ControlLib.GenericButton)(target);
                }
                break;
            case 4:
                {
                    this.txtStockCode = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            case 5:
                {
                    this.txtDescription = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            case 6:
                {
                    this.txtRegularPrice = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    AddStock_obj1_Bindings bindings = new AddStock_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 8:
                {
                    global::Windows.UI.Xaml.Controls.CheckBox element8 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                    AddStock_obj8_Bindings bindings = new AddStock_obj8_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::Infonet.CStoreCommander.UI.Model.Stock.TaxCodes) element8.DataContext);
                    element8.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element8, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

