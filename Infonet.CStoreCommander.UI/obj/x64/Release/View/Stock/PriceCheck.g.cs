#pragma checksum "C:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Stock\PriceCheck.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "E73777A7FAC352594B12CB84C17E2C38"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Stock
{
    partial class PriceCheck : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj, global::System.DateTimeOffset value)
            {
                obj.SelectedDate = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_PasswordBox_Password(global::Windows.UI.Xaml.Controls.PasswordBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
        };

        private class PriceCheck_obj21_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPriceCheck_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Button obj22;

            private PriceCheck_obj21_BindingsTracking bindingsTracking;

            public PriceCheck_obj21_Bindings()
            {
                this.bindingsTracking = new PriceCheck_obj21_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 22:
                        this.obj22 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel data = args.NewValue as global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IPriceCheck_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // PriceCheck_obj21_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Id(obj.Id, phase);
                    }
                }
            }
            private void Update_Id(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(this.obj22, obj, null);
                }
            }

            private class PriceCheck_obj21_BindingsTracking
            {
                global::System.WeakReference<PriceCheck_obj21_Bindings> WeakRefToBindingObj; 

                public PriceCheck_obj21_BindingsTracking(PriceCheck_obj21_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<PriceCheck_obj21_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj21_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Id(obj.Id, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Id":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Id(obj.Id, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj)
                {
                    PriceCheck_obj21_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class PriceCheck_obj26_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPriceCheck_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Button obj27;

            private PriceCheck_obj26_BindingsTracking bindingsTracking;

            public PriceCheck_obj26_Bindings()
            {
                this.bindingsTracking = new PriceCheck_obj26_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 27:
                        this.obj27 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel data = args.NewValue as global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel;
                 if (args.NewValue != null && data == null)
                 {
                    throw new global::System.ArgumentException("Incorrect type passed into template. Based on the x:DataType global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel was expected.");
                 }
                 this.SetDataRoot(data);
                 this.Update();
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                switch(args.Phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(args.Item as global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            ((global::Windows.UI.Xaml.Controls.Grid)args.ItemContainer.ContentTemplateRoot).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel) args.Item, 1 << (int)args.Phase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IPriceCheck_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // PriceCheck_obj26_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Id(obj.Id, phase);
                    }
                }
            }
            private void Update_Id(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(this.obj27, obj, null);
                }
            }

            private class PriceCheck_obj26_BindingsTracking
            {
                global::System.WeakReference<PriceCheck_obj26_Bindings> WeakRefToBindingObj; 

                public PriceCheck_obj26_BindingsTracking(PriceCheck_obj26_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<PriceCheck_obj26_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj26_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_Id(obj.Id, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Id":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Id(obj.Id, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj)
                {
                    PriceCheck_obj26_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        private class PriceCheck_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPriceCheck_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Stock.PriceCheck dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj4;
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj5;
            private global::Windows.UI.Xaml.Controls.Border obj6;
            private global::Windows.UI.Xaml.Controls.ScrollViewer obj7;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj8;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj9;
            private global::Windows.UI.Xaml.Controls.ComboBox obj10;
            private global::Windows.UI.Xaml.Controls.Grid obj11;
            private global::Windows.UI.Xaml.Controls.Grid obj12;
            private global::Windows.UI.Xaml.Controls.ComboBox obj13;
            private global::Windows.UI.Xaml.Controls.Grid obj14;
            private global::Windows.UI.Xaml.Controls.Grid obj15;
            private global::Windows.UI.Xaml.Controls.Grid obj16;
            private global::Windows.UI.Xaml.Controls.Grid obj17;
            private global::Windows.UI.Xaml.Controls.GridView obj18;
            private global::Windows.UI.Xaml.Controls.Grid obj19;
            private global::Windows.UI.Xaml.Controls.Button obj20;
            private global::Windows.UI.Xaml.Controls.TextBlock obj23;
            private global::Windows.UI.Xaml.Controls.GridView obj24;
            private global::Windows.UI.Xaml.Controls.Grid obj25;
            private global::Windows.UI.Xaml.Controls.TextBlock obj28;
            private global::Windows.UI.Xaml.Controls.GridView obj29;
            private global::Windows.UI.Xaml.Controls.TextBlock obj30;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj31;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj32;
            private global::Windows.UI.Xaml.Controls.TextBox obj33;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj34;
            private global::Windows.UI.Xaml.Controls.TextBox obj35;
            private global::Windows.UI.Xaml.Controls.TextBlock obj36;
            private global::Windows.UI.Xaml.Controls.PasswordBox obj37;
            private global::WinRT.Triggers.InvokeCommandAction obj38;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj39;

            private PriceCheck_obj1_BindingsTracking bindingsTracking;

            public PriceCheck_obj1_Bindings()
            {
                this.bindingsTracking = new PriceCheck_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4:
                        this.obj4 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 5:
                        this.obj5 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 6:
                        this.obj6 = (global::Windows.UI.Xaml.Controls.Border)target;
                        break;
                    case 7:
                        this.obj7 = (global::Windows.UI.Xaml.Controls.ScrollViewer)target;
                        break;
                    case 8:
                        this.obj8 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 9:
                        this.obj9 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        (this.obj10).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PriceCheckVM.SelectedPriceIndex = (global::System.Int32)this.LookupConverter("NothingConverter").ConvertBack((this.obj10).SelectedIndex, typeof(global::System.Int32), null, null);
                                }
                            });
                        break;
                    case 11:
                        this.obj11 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        (this.obj13).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PriceCheckVM.SelectedPriceUnitIndex = (global::System.Int32)this.LookupConverter("NothingConverter").ConvertBack((this.obj13).SelectedIndex, typeof(global::System.Int32), null, null);
                                }
                            });
                        break;
                    case 14:
                        this.obj14 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 16:
                        this.obj16 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 18:
                        this.obj18 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 19:
                        this.obj19 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 20:
                        this.obj20 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 23:
                        this.obj23 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 24:
                        this.obj24 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 25:
                        this.obj25 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 28:
                        this.obj28 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 29:
                        this.obj29 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 30:
                        this.obj30 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 31:
                        this.obj31 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        (this.obj31).RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker.SelectedDateProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PriceCheckVM.StockPriceModel.FromDate = (this.obj31).SelectedDate;
                                }
                            });
                        break;
                    case 32:
                        this.obj32 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        (this.obj32).RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker.SelectedDateProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PriceCheckVM.StockPriceModel.ToDate = (this.obj32).SelectedDate;
                                }
                            });
                        break;
                    case 33:
                        this.obj33 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj33).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PriceCheckVM.StockPriceModel.TaxExemptAvailable = (this.obj33).Text;
                                }
                            };
                        break;
                    case 34:
                        this.obj34 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        (this.obj34).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PriceCheckVM.StockPriceModel.IsSpecialPricingVisible = (global::System.Boolean)this.LookupConverter("BoolToVisibilityConverter").ConvertBack((this.obj34).Visibility, typeof(global::System.Boolean), null, null);
                                }
                            });
                        break;
                    case 35:
                        this.obj35 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        (this.obj35).LostFocus += (global::System.Object sender, global::Windows.UI.Xaml.RoutedEventArgs e) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PriceCheckVM.StockPriceModel.AvailableQuantity = (this.obj35).Text;
                                }
                            };
                        break;
                    case 36:
                        this.obj36 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 37:
                        this.obj37 = (global::Windows.UI.Xaml.Controls.PasswordBox)target;
                        (this.obj37).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.PriceCheckVM.StockCode = (this.obj37).Password;
                                }
                            });
                        break;
                    case 38:
                        this.obj38 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 39:
                        this.obj39 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IPriceCheck_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // PriceCheck_obj1_Bindings

            public void SetDataRoot(global::Infonet.CStoreCommander.UI.View.Stock.PriceCheck newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Stock.PriceCheck obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PriceCheckVM(obj.PriceCheckVM, phase);
                    }
                }
            }
            private void Update_PriceCheckVM(global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceCheckVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PriceCheckVM_ShowPriceCheck(obj.ShowPriceCheck, phase);
                        this.Update_PriceCheckVM_ShowPriceChange(obj.ShowPriceChange, phase);
                        this.Update_PriceCheckVM_IsEditButtonEnabled(obj.IsEditButtonEnabled, phase);
                        this.Update_PriceCheckVM_ShowEditButton(obj.ShowEditButton, phase);
                        this.Update_PriceCheckVM_StockPriceModel(obj.StockPriceModel, phase);
                        this.Update_PriceCheckVM_EditPriceCommand(obj.EditPriceCommand, phase);
                        this.Update_PriceCheckVM_ShowSaveButton(obj.ShowSaveButton, phase);
                        this.Update_PriceCheckVM_ChangePriceCommand(obj.ChangePriceCommand, phase);
                        this.Update_PriceCheckVM_IsEditButtonPressed(obj.IsEditButtonPressed, phase);
                        this.Update_PriceCheckVM_SelectedPriceIndex(obj.SelectedPriceIndex, phase);
                        this.Update_PriceCheckVM_ShowDates(obj.ShowDates, phase);
                        this.Update_PriceCheckVM_ShowPriceUnits(obj.ShowPriceUnits, phase);
                        this.Update_PriceCheckVM_PriceUnits(obj.PriceUnits, phase);
                        this.Update_PriceCheckVM_SelectedPriceUnitIndex(obj.SelectedPriceUnitIndex, phase);
                        this.Update_PriceCheckVM_ShowGrids(obj.ShowGrids, phase);
                        this.Update_PriceCheckVM_ShowPrices(obj.ShowPrices, phase);
                        this.Update_PriceCheckVM_ShowQuantityAndPrice(obj.ShowQuantityAndPrice, phase);
                        this.Update_PriceCheckVM_ShowFromToPrice(obj.ShowFromToPrice, phase);
                        this.Update_PriceCheckVM_PriceTypeList(obj.PriceTypeList, phase);
                        this.Update_PriceCheckVM_PlusCommand(obj.PlusCommand, phase);
                        this.Update_PriceCheckVM_Column2Header(obj.Column2Header, phase);
                        this.Update_PriceCheckVM_StockCode(obj.StockCode, phase);
                        this.Update_PriceCheckVM_IsStockCodeEnabled(obj.IsStockCodeEnabled, phase);
                        this.Update_PriceCheckVM_SearchByStockCodeCommand(obj.SearchByStockCodeCommand, phase);
                        this.Update_PriceCheckVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, phase);
                    }
                }
            }
            private void Update_PriceCheckVM_ShowPriceCheck(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowPriceChange(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_IsEditButtonEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj6, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj7, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowEditButton(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj8, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel(global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceCheckVM_StockPriceModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PriceCheckVM_StockPriceModel_IsChangePriceEnable(obj.IsChangePriceEnable, phase);
                        this.Update_PriceCheckVM_StockPriceModel_IsPriceVisible(obj.IsPriceVisible, phase);
                        this.Update_PriceCheckVM_StockPriceModel_SpecialPriceTypes(obj.SpecialPriceTypes, phase);
                        this.Update_PriceCheckVM_StockPriceModel_IsTaxExemptVisible(obj.IsTaxExemptVisible, phase);
                        this.Update_PriceCheckVM_StockPriceModel_FromDate(obj.FromDate, phase);
                        this.Update_PriceCheckVM_StockPriceModel_ToDate(obj.ToDate, phase);
                        this.Update_PriceCheckVM_StockPriceModel_TaxExemptAvailable(obj.TaxExemptAvailable, phase);
                        this.Update_PriceCheckVM_StockPriceModel_IsSpecialPricingVisible(obj.IsSpecialPricingVisible, phase);
                        this.Update_PriceCheckVM_StockPriceModel_AvailableQuantity(obj.AvailableQuantity, phase);
                        this.Update_PriceCheckVM_StockPriceModel_IsAvQtyVisible(obj.IsAvQtyVisible, phase);
                        this.Update_PriceCheckVM_StockPriceModel_Description(obj.Description, phase);
                    }
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsChangePriceEnable(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj8, obj);
                }
            }
            private void Update_PriceCheckVM_EditPriceCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                }
            }
            private void Update_PriceCheckVM_ShowSaveButton(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ChangePriceCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj9, obj, null);
                }
            }
            private void Update_PriceCheckVM_IsEditButtonPressed(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj19, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj25, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj31, obj);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj32, obj);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj34, obj);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsPriceVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_SpecialPriceTypes(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj10, obj, null);
                }
            }
            private void Update_PriceCheckVM_SelectedPriceIndex(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj10, (global::System.Int32)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Int32), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsTaxExemptVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj11, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowDates(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowPriceUnits(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj13, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_PriceUnits(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj13, obj, null);
                }
            }
            private void Update_PriceCheckVM_SelectedPriceUnitIndex(global::System.Int32 obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj13, (global::System.Int32)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Int32), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowGrids(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowPrices(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj15, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowQuantityAndPrice(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj16, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowFromToPrice(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj17, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_PriceTypeList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj18, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj24, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj29, obj, null);
                }
            }
            private void Update_PriceCheckVM_PlusCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj20, obj, null);
                }
            }
            private void Update_PriceCheckVM_Column2Header(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj23, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj28, obj, null);
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj30, obj, null);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_FromDate(global::System.DateTimeOffset obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj31, obj);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_ToDate(global::System.DateTimeOffset obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj32, obj);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_TaxExemptAvailable(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj33, obj, null);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsSpecialPricingVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj34, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_AvailableQuantity(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj35, obj, null);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsAvQtyVisible(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj35, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_Description(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj36, obj, null);
                }
            }
            private void Update_PriceCheckVM_StockCode(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_Password(this.obj37, obj, null);
                }
            }
            private void Update_PriceCheckVM_IsStockCodeEnabled(global::System.Boolean obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj37, obj);
                }
            }
            private void Update_PriceCheckVM_SearchByStockCodeCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj38, obj, null);
                }
            }
            private void Update_PriceCheckVM_InvokeKeyboardCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj39, obj, null);
                }
            }

            private class PriceCheck_obj1_BindingsTracking
            {
                global::System.WeakReference<PriceCheck_obj1_Bindings> WeakRefToBindingObj; 

                public PriceCheck_obj1_BindingsTracking(PriceCheck_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<PriceCheck_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_PriceCheckVM(null);
                    UpdateChildListeners_PriceCheckVM_StockPriceModel(null);
                }

                public void PropertyChanged_PriceCheckVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_PriceCheckVM_ShowPriceCheck(obj.ShowPriceCheck, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowPriceChange(obj.ShowPriceChange, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_IsEditButtonEnabled(obj.IsEditButtonEnabled, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowEditButton(obj.ShowEditButton, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel(obj.StockPriceModel, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_EditPriceCommand(obj.EditPriceCommand, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowSaveButton(obj.ShowSaveButton, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ChangePriceCommand(obj.ChangePriceCommand, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_IsEditButtonPressed(obj.IsEditButtonPressed, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_SelectedPriceIndex(obj.SelectedPriceIndex, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowDates(obj.ShowDates, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowPriceUnits(obj.ShowPriceUnits, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_PriceUnits(obj.PriceUnits, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_SelectedPriceUnitIndex(obj.SelectedPriceUnitIndex, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowGrids(obj.ShowGrids, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowPrices(obj.ShowPrices, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowQuantityAndPrice(obj.ShowQuantityAndPrice, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_ShowFromToPrice(obj.ShowFromToPrice, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_PriceTypeList(obj.PriceTypeList, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_PlusCommand(obj.PlusCommand, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_Column2Header(obj.Column2Header, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockCode(obj.StockCode, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_IsStockCodeEnabled(obj.IsStockCodeEnabled, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_SearchByStockCodeCommand(obj.SearchByStockCodeCommand, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ShowPriceCheck":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowPriceCheck(obj.ShowPriceCheck, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowPriceChange":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowPriceChange(obj.ShowPriceChange, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEditButtonEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_IsEditButtonEnabled(obj.IsEditButtonEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowEditButton":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowEditButton(obj.ShowEditButton, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StockPriceModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel(obj.StockPriceModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditPriceCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_EditPriceCommand(obj.EditPriceCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowSaveButton":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowSaveButton(obj.ShowSaveButton, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ChangePriceCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ChangePriceCommand(obj.ChangePriceCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEditButtonPressed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_IsEditButtonPressed(obj.IsEditButtonPressed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPriceIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_SelectedPriceIndex(obj.SelectedPriceIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowDates":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowDates(obj.ShowDates, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowPriceUnits":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowPriceUnits(obj.ShowPriceUnits, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PriceUnits":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_PriceUnits(obj.PriceUnits, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPriceUnitIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_SelectedPriceUnitIndex(obj.SelectedPriceUnitIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowGrids":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowGrids(obj.ShowGrids, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowPrices":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowPrices(obj.ShowPrices, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowQuantityAndPrice":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowQuantityAndPrice(obj.ShowQuantityAndPrice, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowFromToPrice":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowFromToPrice(obj.ShowFromToPrice, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PriceTypeList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_PriceTypeList(obj.PriceTypeList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlusCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_PlusCommand(obj.PlusCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Column2Header":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_Column2Header(obj.Column2Header, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StockCode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockCode(obj.StockCode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsStockCodeEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_IsStockCodeEnabled(obj.IsStockCodeEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchByStockCodeCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_SearchByStockCodeCommand(obj.SearchByStockCodeCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "InvokeKeyboardCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM cache_PriceCheckVM = null;
                public void UpdateChildListeners_PriceCheckVM(global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM obj)
                {
                    if (obj != cache_PriceCheckVM)
                    {
                        if (cache_PriceCheckVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceCheckVM).PropertyChanged -= PropertyChanged_PriceCheckVM;
                            cache_PriceCheckVM = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceCheckVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceCheckVM;
                        }
                    }
                }
                public void PropertyChanged_PriceCheckVM_StockPriceModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_PriceCheckVM_StockPriceModel_IsChangePriceEnable(obj.IsChangePriceEnable, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_IsPriceVisible(obj.IsPriceVisible, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_SpecialPriceTypes(obj.SpecialPriceTypes, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_IsTaxExemptVisible(obj.IsTaxExemptVisible, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_FromDate(obj.FromDate, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_ToDate(obj.ToDate, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_TaxExemptAvailable(obj.TaxExemptAvailable, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_IsSpecialPricingVisible(obj.IsSpecialPricingVisible, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_AvailableQuantity(obj.AvailableQuantity, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_IsAvQtyVisible(obj.IsAvQtyVisible, DATA_CHANGED);
                                    bindings.Update_PriceCheckVM_StockPriceModel_Description(obj.Description, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsChangePriceEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsChangePriceEnable(obj.IsChangePriceEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPriceVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsPriceVisible(obj.IsPriceVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SpecialPriceTypes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_SpecialPriceTypes(obj.SpecialPriceTypes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxExemptVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsTaxExemptVisible(obj.IsTaxExemptVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FromDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_FromDate(obj.FromDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ToDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_ToDate(obj.ToDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TaxExemptAvailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_TaxExemptAvailable(obj.TaxExemptAvailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSpecialPricingVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsSpecialPricingVisible(obj.IsSpecialPricingVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AvailableQuantity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_AvailableQuantity(obj.AvailableQuantity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAvQtyVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsAvQtyVisible(obj.IsAvQtyVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Description":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_Description(obj.Description, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel cache_PriceCheckVM_StockPriceModel = null;
                public void UpdateChildListeners_PriceCheckVM_StockPriceModel(global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel obj)
                {
                    if (obj != cache_PriceCheckVM_StockPriceModel)
                    {
                        if (cache_PriceCheckVM_StockPriceModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceCheckVM_StockPriceModel).PropertyChanged -= PropertyChanged_PriceCheckVM_StockPriceModel;
                            cache_PriceCheckVM_StockPriceModel = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceCheckVM_StockPriceModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceCheckVM_StockPriceModel;
                        }
                    }
                }
                public void PropertyChanged_PriceCheckVM_StockPriceModel_SpecialPriceTypes(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PriceCheckVM_StockPriceModel_SpecialPriceTypes(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                    }
                }
                public void PropertyChanged_PriceCheckVM_PriceTypeList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PriceCheckVM_PriceTypeList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel>;
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.GenericButtonStyle = (global::Windows.UI.Xaml.Style)(target);
                }
                break;
            case 3:
                {
                    this.RootGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 18:
                {
                    this.gridView = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 24:
                {
                    this.gridViewWithTwoColumn = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 29:
                {
                    this.ProductListContainer = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 34:
                {
                    this.txtRegularPrice = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            case 35:
                {
                    this.txtAvailableQuantity = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 37:
                {
                    this.txtStockCode = (global::Windows.UI.Xaml.Controls.PasswordBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    PriceCheck_obj1_Bindings bindings = new PriceCheck_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 21:
                {
                    global::Windows.UI.Xaml.Controls.Grid element21 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    PriceCheck_obj21_Bindings bindings = new PriceCheck_obj21_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel) element21.DataContext);
                    element21.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element21, bindings);
                }
                break;
            case 26:
                {
                    global::Windows.UI.Xaml.Controls.Grid element26 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    PriceCheck_obj26_Bindings bindings = new PriceCheck_obj26_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot((global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel) element26.DataContext);
                    element26.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element26, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

