#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\Checkout\GiftCertificate.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "59FAB3D1B98471B8F72C59B5D2DC34B4"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Checkout
{
    partial class GiftCertificate : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Controls_SecondFrameHeading_PreviousFrame(global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.PreviousFrame = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
            public static void Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(global::MyToolkit.Extended.Controls.CustomTextBox obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.EnterPressedCommand = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemToAdd(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemToAdd = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedValues(global::MyToolkit.Controls.DataGrid obj, global::System.Collections.Generic.List<global::System.Object> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Collections.Generic.List<global::System.Object>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Collections.Generic.List<global::System.Object>), targetNullValue);
                }
                obj.SelectedValues = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class GiftCertificate_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IGiftCertificate_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Checkout.GiftCertificate dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading obj2;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj3;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj4;
            private global::MyToolkit.Controls.DataGrid obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2PreviousFrameDisabled = false;
            private static bool isobj3CommandDisabled = false;
            private static bool isobj3CommandParameterDisabled = false;
            private static bool isobj4EnterPressedCommandDisabled = false;
            private static bool isobj5ItemToAddDisabled = false;
            private static bool isobj5SelectedValuesDisabled = false;
            private static bool isobj6TextDisabled = false;

            private GiftCertificate_obj1_BindingsTracking bindingsTracking;

            public GiftCertificate_obj1_Bindings()
            {
                this.bindingsTracking = new GiftCertificate_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 55 && columnNumber == 38)
                {
                    isobj2PreviousFrameDisabled = true;
                }
                else if (lineNumber == 167 && columnNumber == 35)
                {
                    isobj3CommandDisabled = true;
                }
                else if (lineNumber == 168 && columnNumber == 35)
                {
                    isobj3CommandParameterDisabled = true;
                }
                else if (lineNumber == 96 && columnNumber == 42)
                {
                    isobj4EnterPressedCommandDisabled = true;
                }
                else if (lineNumber == 110 && columnNumber == 36)
                {
                    isobj5ItemToAddDisabled = true;
                }
                else if (lineNumber == 114 && columnNumber == 36)
                {
                    isobj5SelectedValuesDisabled = true;
                }
                else if (lineNumber == 69 && columnNumber == 24)
                {
                    isobj6TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\Checkout\GiftCertificate.xaml line 53
                        this.obj2 = (global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading)target;
                        break;
                    case 3: // View\Checkout\GiftCertificate.xaml line 163
                        this.obj3 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 4: // View\Checkout\GiftCertificate.xaml line 89
                        this.obj4 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        break;
                    case 5: // View\Checkout\GiftCertificate.xaml line 102
                        this.obj5 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // View\Checkout\GiftCertificate.xaml line 69
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IGiftCertificate_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Checkout.GiftCertificate)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Checkout.GiftCertificate obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_GiftCertificateVM(obj.GiftCertificateVM, phase);
                        this.Update_giftCertificateGrid(obj.giftCertificateGrid, phase);
                    }
                }
            }
            private void Update_GiftCertificateVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.GiftCertificateVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_GiftCertificateVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_GiftCertificateVM_GetSaleSummaryCommand(obj.GetSaleSummaryCommand, phase);
                        this.Update_GiftCertificateVM_SaveGiftCertificatesCommand(obj.SaveGiftCertificatesCommand, phase);
                        this.Update_GiftCertificateVM_SearchCertificateNumberCommand(obj.SearchCertificateNumberCommand, phase);
                        this.Update_GiftCertificateVM_GiftCertificateToAdd(obj.GiftCertificateToAdd, phase);
                        this.Update_GiftCertificateVM_SelectedGiftCertificates(obj.SelectedGiftCertificates, phase);
                        this.Update_GiftCertificateVM_TotalAmount(obj.TotalAmount, phase);
                    }
                }
            }
            private void Update_GiftCertificateVM_GetSaleSummaryCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\GiftCertificate.xaml line 53
                    if (!isobj2PreviousFrameDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_SecondFrameHeading_PreviousFrame(this.obj2, obj, null);
                    }
                }
            }
            private void Update_GiftCertificateVM_SaveGiftCertificatesCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\GiftCertificate.xaml line 163
                    if (!isobj3CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                    }
                }
            }
            private void Update_giftCertificateGrid(global::MyToolkit.Controls.DataGrid obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_giftCertificateGrid(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_giftCertificateGrid_SelectedRows(obj.SelectedRows, phase);
                    }
                }
            }
            private void Update_giftCertificateGrid_SelectedRows(global::System.Collections.Generic.IList<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\GiftCertificate.xaml line 163
                    if (!isobj3CommandParameterDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(this.obj3, obj, null);
                    }
                }
            }
            private void Update_GiftCertificateVM_SearchCertificateNumberCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\GiftCertificate.xaml line 89
                    if (!isobj4EnterPressedCommandDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(this.obj4, obj, null);
                    }
                }
            }
            private void Update_GiftCertificateVM_GiftCertificateToAdd(global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\GiftCertificate.xaml line 102
                    if (!isobj5ItemToAddDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemToAdd(this.obj5, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_GiftCertificateVM_SelectedGiftCertificates(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_GiftCertificateVM_SelectedGiftCertificates(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\GiftCertificate.xaml line 102
                    if (!isobj5SelectedValuesDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedValues(this.obj5, (global::System.Collections.Generic.List<global::System.Object>)this.LookupConverter("GiftCertificateConverter").Convert(obj, typeof(global::System.Collections.Generic.List<global::System.Object>), null, null), null);
                    }
                }
            }
            private void Update_GiftCertificateVM_TotalAmount(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\GiftCertificate.xaml line 69
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, (global::System.String)this.LookupConverter("CurrencyConverter").Convert(obj, typeof(global::System.String), null, null), null);
                    }
                }
            }
            private void UpdateTwoWay_5_SelectedValues()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.GiftCertificateVM != null)
                        {
                            this.dataRoot.GiftCertificateVM.SelectedGiftCertificates = (global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel>)this.LookupConverter("GiftCertificateConverter").ConvertBack(this.obj5.SelectedValues, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel>), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class GiftCertificate_obj1_BindingsTracking
            {
                private global::System.WeakReference<GiftCertificate_obj1_Bindings> weakRefToBindingObj; 

                public GiftCertificate_obj1_BindingsTracking(GiftCertificate_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<GiftCertificate_obj1_Bindings>(obj);
                }

                public GiftCertificate_obj1_Bindings TryGetBindingObject()
                {
                    GiftCertificate_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_GiftCertificateVM(null);
                    UpdateChildListeners_giftCertificateGrid(null);
                    UpdateChildListeners_GiftCertificateVM_SelectedGiftCertificates(null);
                }

                public void PropertyChanged_GiftCertificateVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    GiftCertificate_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Checkout.GiftCertificateVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Checkout.GiftCertificateVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_GiftCertificateVM_GetSaleSummaryCommand(obj.GetSaleSummaryCommand, DATA_CHANGED);
                                bindings.Update_GiftCertificateVM_SaveGiftCertificatesCommand(obj.SaveGiftCertificatesCommand, DATA_CHANGED);
                                bindings.Update_GiftCertificateVM_SearchCertificateNumberCommand(obj.SearchCertificateNumberCommand, DATA_CHANGED);
                                bindings.Update_GiftCertificateVM_GiftCertificateToAdd(obj.GiftCertificateToAdd, DATA_CHANGED);
                                bindings.Update_GiftCertificateVM_SelectedGiftCertificates(obj.SelectedGiftCertificates, DATA_CHANGED);
                                bindings.Update_GiftCertificateVM_TotalAmount(obj.TotalAmount, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "GetSaleSummaryCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiftCertificateVM_GetSaleSummaryCommand(obj.GetSaleSummaryCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SaveGiftCertificatesCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiftCertificateVM_SaveGiftCertificatesCommand(obj.SaveGiftCertificatesCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchCertificateNumberCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiftCertificateVM_SearchCertificateNumberCommand(obj.SearchCertificateNumberCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GiftCertificateToAdd":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiftCertificateVM_GiftCertificateToAdd(obj.GiftCertificateToAdd, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedGiftCertificates":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiftCertificateVM_SelectedGiftCertificates(obj.SelectedGiftCertificates, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TotalAmount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_GiftCertificateVM_TotalAmount(obj.TotalAmount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Checkout.GiftCertificateVM cache_GiftCertificateVM = null;
                public void UpdateChildListeners_GiftCertificateVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.GiftCertificateVM obj)
                {
                    if (obj != cache_GiftCertificateVM)
                    {
                        if (cache_GiftCertificateVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_GiftCertificateVM).PropertyChanged -= PropertyChanged_GiftCertificateVM;
                            cache_GiftCertificateVM = null;
                        }
                        if (obj != null)
                        {
                            cache_GiftCertificateVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_GiftCertificateVM;
                        }
                    }
                }
                public void DependencyPropertyChanged_giftCertificateGrid_SelectedRows(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    GiftCertificate_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::MyToolkit.Controls.DataGrid obj = sender as global::MyToolkit.Controls.DataGrid;
                        if (obj != null)
                        {
                            bindings.Update_giftCertificateGrid_SelectedRows(obj.SelectedRows, DATA_CHANGED);
                        }
                    }
                }
                private global::MyToolkit.Controls.DataGrid cache_giftCertificateGrid = null;
                private long tokenDPC_giftCertificateGrid_SelectedRows = 0;
                public void UpdateChildListeners_giftCertificateGrid(global::MyToolkit.Controls.DataGrid obj)
                {
                    if (obj != cache_giftCertificateGrid)
                    {
                        if (cache_giftCertificateGrid != null)
                        {
                            cache_giftCertificateGrid.UnregisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedRowsProperty, tokenDPC_giftCertificateGrid_SelectedRows);
                            cache_giftCertificateGrid = null;
                        }
                        if (obj != null)
                        {
                            cache_giftCertificateGrid = obj;
                            tokenDPC_giftCertificateGrid_SelectedRows = obj.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedRowsProperty, DependencyPropertyChanged_giftCertificateGrid_SelectedRows);
                        }
                    }
                }
                public void PropertyChanged_GiftCertificateVM_SelectedGiftCertificates(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    GiftCertificate_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_GiftCertificateVM_SelectedGiftCertificates(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    GiftCertificate_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel> cache_GiftCertificateVM_SelectedGiftCertificates = null;
                public void UpdateChildListeners_GiftCertificateVM_SelectedGiftCertificates(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.GiftCertificateModel> obj)
                {
                    if (obj != cache_GiftCertificateVM_SelectedGiftCertificates)
                    {
                        if (cache_GiftCertificateVM_SelectedGiftCertificates != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_GiftCertificateVM_SelectedGiftCertificates).PropertyChanged -= PropertyChanged_GiftCertificateVM_SelectedGiftCertificates;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_GiftCertificateVM_SelectedGiftCertificates).CollectionChanged -= CollectionChanged_GiftCertificateVM_SelectedGiftCertificates;
                            cache_GiftCertificateVM_SelectedGiftCertificates = null;
                        }
                        if (obj != null)
                        {
                            cache_GiftCertificateVM_SelectedGiftCertificates = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_GiftCertificateVM_SelectedGiftCertificates;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_GiftCertificateVM_SelectedGiftCertificates;
                        }
                    }
                }
                public void RegisterTwoWayListener_5(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedValuesProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_SelectedValues();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 5: // View\Checkout\GiftCertificate.xaml line 102
                {
                    this.giftCertificateGrid = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Checkout\GiftCertificate.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    GiftCertificate_obj1_Bindings bindings = new GiftCertificate_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

