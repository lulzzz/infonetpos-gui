#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\Checkout\SalesSummary.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "7124FD930DC4C3F1FCA3CACA335E089C"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Checkout
{
    partial class SalesSummary : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.BackCommand = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SalesSummary_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISalesSummary_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Checkout.SalesSummary dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj3;
            private global::MyToolkit.Controls.DataGrid obj4;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj5;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj6;
            private global::Windows.UI.Xaml.Controls.TextBlock obj7;
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj9;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj10;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3BackCommandDisabled = false;
            private static bool isobj4ItemsSourceDisabled = false;
            private static bool isobj5IsEnabledDisabled = false;
            private static bool isobj5IsOnDisabled = false;
            private static bool isobj6CommandDisabled = false;
            private static bool isobj6IsEnabledDisabled = false;
            private static bool isobj7TextDisabled = false;
            private static bool isobj8TextDisabled = false;
            private static bool isobj9IsEnabledDisabled = false;
            private static bool isobj9IsOnDisabled = false;
            private static bool isobj10IsEnabledDisabled = false;
            private static bool isobj10IsOnDisabled = false;

            private SalesSummary_obj1_BindingsTracking bindingsTracking;

            public SalesSummary_obj1_Bindings()
            {
                this.bindingsTracking = new SalesSummary_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 53 && columnNumber == 31)
                {
                    isobj3BackCommandDisabled = true;
                }
                else if (lineNumber == 62 && columnNumber == 35)
                {
                    isobj4ItemsSourceDisabled = true;
                }
                else if (lineNumber == 154 && columnNumber == 24)
                {
                    isobj5IsEnabledDisabled = true;
                }
                else if (lineNumber == 155 && columnNumber == 24)
                {
                    isobj5IsOnDisabled = true;
                }
                else if (lineNumber == 159 && columnNumber == 35)
                {
                    isobj6CommandDisabled = true;
                }
                else if (lineNumber == 162 && columnNumber == 35)
                {
                    isobj6IsEnabledDisabled = true;
                }
                else if (lineNumber == 130 && columnNumber == 32)
                {
                    isobj7TextDisabled = true;
                }
                else if (lineNumber == 135 && columnNumber == 32)
                {
                    isobj8TextDisabled = true;
                }
                else if (lineNumber == 116 && columnNumber == 36)
                {
                    isobj9IsEnabledDisabled = true;
                }
                else if (lineNumber == 117 && columnNumber == 36)
                {
                    isobj9IsOnDisabled = true;
                }
                else if (lineNumber == 120 && columnNumber == 35)
                {
                    isobj10IsEnabledDisabled = true;
                }
                else if (lineNumber == 121 && columnNumber == 35)
                {
                    isobj10IsOnDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // View\Checkout\SalesSummary.xaml line 52
                        this.obj3 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 4: // View\Checkout\SalesSummary.xaml line 55
                        this.obj4 = (global::MyToolkit.Controls.DataGrid)target;
                        break;
                    case 5: // View\Checkout\SalesSummary.xaml line 150
                        this.obj5 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // View\Checkout\SalesSummary.xaml line 158
                        this.obj6 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 7: // View\Checkout\SalesSummary.xaml line 130
                        this.obj7 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 8: // View\Checkout\SalesSummary.xaml line 135
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 9: // View\Checkout\SalesSummary.xaml line 115
                        this.obj9 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_9(this.obj9);
                        break;
                    case 10: // View\Checkout\SalesSummary.xaml line 119
                        this.obj10 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_10(this.obj10);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ISalesSummary_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Checkout.SalesSummary)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Checkout.SalesSummary obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SaleSummaryVM(obj.SaleSummaryVM, phase);
                    }
                }
            }
            private void Update_SaleSummaryVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SaleSummaryVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleSummaryVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SaleSummaryVM_CancelTenderCommand(obj.CancelTenderCommand, phase);
                        this.Update_SaleSummaryVM_Lines(obj.Lines, phase);
                        this.Update_SaleSummaryVM_IsPrintEnabled(obj.IsPrintEnabled, phase);
                        this.Update_SaleSummaryVM_Print(obj.Print, phase);
                        this.Update_SaleSummaryVM_CompleteSaleCommand(obj.CompleteSaleCommand, phase);
                        this.Update_SaleSummaryVM_CompletePaymentEnabled(obj.CompletePaymentEnabled, phase);
                        this.Update_SaleSummaryVM_SaleSummary(obj.SaleSummary, phase);
                        this.Update_SaleSummaryVM_IsRunAwayEnabled(obj.IsRunAwayEnabled, phase);
                        this.Update_SaleSummaryVM_RunAway(obj.RunAway, phase);
                        this.Update_SaleSummaryVM_IsPumpTestEnabled(obj.IsPumpTestEnabled, phase);
                        this.Update_SaleSummaryVM_IsPumpTestOn(obj.IsPumpTestOn, phase);
                    }
                }
            }
            private void Update_SaleSummaryVM_CancelTenderCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 52
                    if (!isobj3BackCommandDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(this.obj3, obj, null);
                    }
                }
            }
            private void Update_SaleSummaryVM_Lines(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryLineModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleSummaryVM_Lines(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 55
                    if (!isobj4ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj4, obj, null);
                    }
                }
            }
            private void Update_SaleSummaryVM_IsPrintEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 150
                    if (!isobj5IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj5, obj);
                    }
                }
            }
            private void Update_SaleSummaryVM_Print(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 150
                    if (!isobj5IsOnDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj5, obj);
                    }
                }
            }
            private void Update_SaleSummaryVM_CompleteSaleCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 158
                    if (!isobj6CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj6, obj, null);
                    }
                }
            }
            private void Update_SaleSummaryVM_CompletePaymentEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 158
                    if (!isobj6IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj6, obj);
                    }
                }
            }
            private void Update_SaleSummaryVM_SaleSummary(global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleSummaryVM_SaleSummary(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SaleSummaryVM_SaleSummary_Summary1(obj.Summary1, phase);
                        this.Update_SaleSummaryVM_SaleSummary_Summary2(obj.Summary2, phase);
                    }
                }
            }
            private void Update_SaleSummaryVM_SaleSummary_Summary1(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 130
                    if (!isobj7TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj7, obj, null);
                    }
                }
            }
            private void Update_SaleSummaryVM_SaleSummary_Summary2(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 135
                    if (!isobj8TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj, null);
                    }
                }
            }
            private void Update_SaleSummaryVM_IsRunAwayEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 115
                    if (!isobj9IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj9, obj);
                    }
                }
            }
            private void Update_SaleSummaryVM_RunAway(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 115
                    if (!isobj9IsOnDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj9, obj);
                    }
                }
            }
            private void Update_SaleSummaryVM_IsPumpTestEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 119
                    if (!isobj10IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                    }
                }
            }
            private void Update_SaleSummaryVM_IsPumpTestOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\SalesSummary.xaml line 119
                    if (!isobj10IsOnDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj10, obj);
                    }
                }
            }
            private void UpdateTwoWay_5_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.SaleSummaryVM != null)
                        {
                            this.dataRoot.SaleSummaryVM.Print = this.obj5.IsOn;
                        }
                    }
                }
            }
            private void UpdateTwoWay_9_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.SaleSummaryVM != null)
                        {
                            this.dataRoot.SaleSummaryVM.RunAway = this.obj9.IsOn;
                        }
                    }
                }
            }
            private void UpdateTwoWay_10_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.SaleSummaryVM != null)
                        {
                            this.dataRoot.SaleSummaryVM.IsPumpTestOn = this.obj10.IsOn;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SalesSummary_obj1_BindingsTracking
            {
                private global::System.WeakReference<SalesSummary_obj1_Bindings> weakRefToBindingObj; 

                public SalesSummary_obj1_BindingsTracking(SalesSummary_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SalesSummary_obj1_Bindings>(obj);
                }

                public SalesSummary_obj1_Bindings TryGetBindingObject()
                {
                    SalesSummary_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_SaleSummaryVM(null);
                    UpdateChildListeners_SaleSummaryVM_Lines(null);
                    UpdateChildListeners_SaleSummaryVM_SaleSummary(null);
                }

                public void PropertyChanged_SaleSummaryVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SalesSummary_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SaleSummaryVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SaleSummaryVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_SaleSummaryVM_CancelTenderCommand(obj.CancelTenderCommand, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_Lines(obj.Lines, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_IsPrintEnabled(obj.IsPrintEnabled, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_Print(obj.Print, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_CompleteSaleCommand(obj.CompleteSaleCommand, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_CompletePaymentEnabled(obj.CompletePaymentEnabled, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_SaleSummary(obj.SaleSummary, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_IsRunAwayEnabled(obj.IsRunAwayEnabled, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_RunAway(obj.RunAway, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_IsPumpTestEnabled(obj.IsPumpTestEnabled, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_IsPumpTestOn(obj.IsPumpTestOn, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CancelTenderCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_CancelTenderCommand(obj.CancelTenderCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Lines":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_Lines(obj.Lines, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPrintEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_IsPrintEnabled(obj.IsPrintEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Print":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_Print(obj.Print, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CompleteSaleCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_CompleteSaleCommand(obj.CompleteSaleCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CompletePaymentEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_CompletePaymentEnabled(obj.CompletePaymentEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SaleSummary":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_SaleSummary(obj.SaleSummary, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsRunAwayEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_IsRunAwayEnabled(obj.IsRunAwayEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RunAway":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_RunAway(obj.RunAway, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPumpTestEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_IsPumpTestEnabled(obj.IsPumpTestEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPumpTestOn":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_IsPumpTestOn(obj.IsPumpTestOn, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SaleSummaryVM cache_SaleSummaryVM = null;
                public void UpdateChildListeners_SaleSummaryVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SaleSummaryVM obj)
                {
                    if (obj != cache_SaleSummaryVM)
                    {
                        if (cache_SaleSummaryVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleSummaryVM).PropertyChanged -= PropertyChanged_SaleSummaryVM;
                            cache_SaleSummaryVM = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleSummaryVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleSummaryVM;
                        }
                    }
                }
                public void PropertyChanged_SaleSummaryVM_Lines(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SalesSummary_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryLineModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryLineModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_SaleSummaryVM_Lines(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SalesSummary_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryLineModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryLineModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryLineModel> cache_SaleSummaryVM_Lines = null;
                public void UpdateChildListeners_SaleSummaryVM_Lines(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryLineModel> obj)
                {
                    if (obj != cache_SaleSummaryVM_Lines)
                    {
                        if (cache_SaleSummaryVM_Lines != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleSummaryVM_Lines).PropertyChanged -= PropertyChanged_SaleSummaryVM_Lines;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_SaleSummaryVM_Lines).CollectionChanged -= CollectionChanged_SaleSummaryVM_Lines;
                            cache_SaleSummaryVM_Lines = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleSummaryVM_Lines = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleSummaryVM_Lines;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_SaleSummaryVM_Lines;
                        }
                    }
                }
                public void PropertyChanged_SaleSummaryVM_SaleSummary(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SalesSummary_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_SaleSummaryVM_SaleSummary_Summary1(obj.Summary1, DATA_CHANGED);
                                bindings.Update_SaleSummaryVM_SaleSummary_Summary2(obj.Summary2, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Summary1":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_SaleSummary_Summary1(obj.Summary1, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Summary2":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleSummaryVM_SaleSummary_Summary2(obj.Summary2, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryModel cache_SaleSummaryVM_SaleSummary = null;
                public void UpdateChildListeners_SaleSummaryVM_SaleSummary(global::Infonet.CStoreCommander.UI.Model.Checkout.SaleSummaryModel obj)
                {
                    if (obj != cache_SaleSummaryVM_SaleSummary)
                    {
                        if (cache_SaleSummaryVM_SaleSummary != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleSummaryVM_SaleSummary).PropertyChanged -= PropertyChanged_SaleSummaryVM_SaleSummary;
                            cache_SaleSummaryVM_SaleSummary = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleSummaryVM_SaleSummary = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleSummaryVM_SaleSummary;
                        }
                    }
                }
                public void RegisterTwoWayListener_5(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_IsOn();
                        }
                    });
                }
                public void RegisterTwoWayListener_9(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_9_IsOn();
                        }
                    });
                }
                public void RegisterTwoWayListener_10(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_IsOn();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // View\Checkout\SalesSummary.xaml line 40
                {
                    this.CurrencyConverter = (global::Infonet.CStoreCommander.UI.Converter.CurrencyConverter)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Checkout\SalesSummary.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    SalesSummary_obj1_Bindings bindings = new SalesSummary_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

