#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\Checkout\TaxExempt\SignatureScreen.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "2816C862CDB1CD827D30F42458DEB887"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Checkout.TaxExempt
{
    partial class SignatureScreen : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_SecondFrameHeading_PreviousFrame(global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.PreviousFrame = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Media_Imaging_BitmapImage_UriSource(global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj, global::System.Uri value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Uri) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Uri), targetNullValue);
                }
                obj.UriSource = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SignatureScreen_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISignatureScreen_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.SignatureScreen dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::WinRT.Triggers.InvokeCommandAction obj2;
            private global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading obj3;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj4;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj5;
            private global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj7;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2CommandDisabled = false;
            private static bool isobj3PreviousFrameDisabled = false;
            private static bool isobj4CommandDisabled = false;
            private static bool isobj5CommandDisabled = false;
            private static bool isobj7UriSourceDisabled = false;

            private SignatureScreen_obj1_BindingsTracking bindingsTracking;

            public SignatureScreen_obj1_Bindings()
            {
                this.bindingsTracking = new SignatureScreen_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 13 && columnNumber == 43)
                {
                    isobj2CommandDisabled = true;
                }
                else if (lineNumber == 25 && columnNumber == 37)
                {
                    isobj3PreviousFrameDisabled = true;
                }
                else if (lineNumber == 75 && columnNumber == 37)
                {
                    isobj4CommandDisabled = true;
                }
                else if (lineNumber == 82 && columnNumber == 37)
                {
                    isobj5CommandDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 42)
                {
                    isobj7UriSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\Checkout\TaxExempt\SignatureScreen.xaml line 13
                        this.obj2 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 3: // View\Checkout\TaxExempt\SignatureScreen.xaml line 24
                        this.obj3 = (global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading)target;
                        break;
                    case 4: // View\Checkout\TaxExempt\SignatureScreen.xaml line 74
                        this.obj4 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 5: // View\Checkout\TaxExempt\SignatureScreen.xaml line 81
                        this.obj5 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 7: // View\Checkout\TaxExempt\SignatureScreen.xaml line 57
                        this.obj7 = (global::Windows.UI.Xaml.Media.Imaging.BitmapImage)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ISignatureScreen_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.SignatureScreen)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.SignatureScreen obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SignatureVM(obj.SignatureVM, phase);
                    }
                }
            }
            private void Update_SignatureVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SignatureVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SignatureVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SignatureVM_ConnectToDeviceCommand(obj.ConnectToDeviceCommand, phase);
                        this.Update_SignatureVM_BackCommand(obj.BackCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_SignatureVM_ClearCommand(obj.ClearCommand, phase);
                        this.Update_SignatureVM_AcceptCommand(obj.AcceptCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SignatureVM_SignatureImage(obj.SignatureImage, phase);
                    }
                }
            }
            private void Update_SignatureVM_ConnectToDeviceCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\SignatureScreen.xaml line 13
                    if (!isobj2CommandDisabled)
                    {
                        XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj2, obj, null);
                    }
                }
            }
            private void Update_SignatureVM_BackCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\SignatureScreen.xaml line 24
                    if (!isobj3PreviousFrameDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_SecondFrameHeading_PreviousFrame(this.obj3, obj, null);
                    }
                }
            }
            private void Update_SignatureVM_ClearCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // View\Checkout\TaxExempt\SignatureScreen.xaml line 74
                    if (!isobj4CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                    }
                }
            }
            private void Update_SignatureVM_AcceptCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // View\Checkout\TaxExempt\SignatureScreen.xaml line 81
                    if (!isobj5CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj5, obj, null);
                    }
                }
            }
            private void Update_SignatureVM_SignatureImage(global::System.Uri obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\SignatureScreen.xaml line 57
                    if (!isobj7UriSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Media_Imaging_BitmapImage_UriSource(this.obj7, obj, null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SignatureScreen_obj1_BindingsTracking
            {
                private global::System.WeakReference<SignatureScreen_obj1_Bindings> weakRefToBindingObj; 

                public SignatureScreen_obj1_BindingsTracking(SignatureScreen_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SignatureScreen_obj1_Bindings>(obj);
                }

                public SignatureScreen_obj1_Bindings TryGetBindingObject()
                {
                    SignatureScreen_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_SignatureVM(null);
                }

                public void PropertyChanged_SignatureVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SignatureScreen_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SignatureVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SignatureVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_SignatureVM_ConnectToDeviceCommand(obj.ConnectToDeviceCommand, DATA_CHANGED);
                                bindings.Update_SignatureVM_BackCommand(obj.BackCommand, DATA_CHANGED);
                                bindings.Update_SignatureVM_SignatureImage(obj.SignatureImage, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ConnectToDeviceCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SignatureVM_ConnectToDeviceCommand(obj.ConnectToDeviceCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BackCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SignatureVM_BackCommand(obj.BackCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SignatureImage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SignatureVM_SignatureImage(obj.SignatureImage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SignatureVM cache_SignatureVM = null;
                public void UpdateChildListeners_SignatureVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.SignatureVM obj)
                {
                    if (obj != cache_SignatureVM)
                    {
                        if (cache_SignatureVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SignatureVM).PropertyChanged -= PropertyChanged_SignatureVM;
                            cache_SignatureVM = null;
                        }
                        if (obj != null)
                        {
                            cache_SignatureVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SignatureVM;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 6: // View\Checkout\TaxExempt\SignatureScreen.xaml line 52
                {
                    this.inkCanvas = (global::Windows.UI.Xaml.Controls.Image)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Checkout\TaxExempt\SignatureScreen.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    SignatureScreen_obj1_Bindings bindings = new SignatureScreen_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

