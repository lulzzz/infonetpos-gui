#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\Checkout\TaxExempt\TaxExemptOverLimit.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "EF024020898ADE6356B5F53510913B66"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Checkout.TaxExempt
{
    partial class TaxExemptOverLimit : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.BackCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj, global::System.DateTimeOffset value)
            {
                obj.SelectedDate = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class TaxExemptOverLimit_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ITaxExemptOverLimit_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.TaxExemptOverLimit dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::WinRT.Triggers.InvokeCommandAction obj2;
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj7;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj8;
            private global::Windows.UI.Xaml.Controls.ComboBox obj10;
            private global::Windows.UI.Xaml.Controls.TextBox obj11;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj12;
            private global::Windows.UI.Xaml.Controls.ComboBox obj13;
            private global::Windows.UI.Xaml.Controls.TextBox obj14;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj15;
            private global::Windows.UI.Xaml.Controls.ComboBox obj16;
            private global::Windows.UI.Xaml.Controls.TextBox obj17;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj18;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2CommandDisabled = false;
            private static bool isobj7BackCommandDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj10IsEnabledDisabled = false;
            private static bool isobj10ItemsSourceDisabled = false;
            private static bool isobj11IsEnabledDisabled = false;
            private static bool isobj12SelectedDateDisabled = false;
            private static bool isobj13IsEnabledDisabled = false;
            private static bool isobj13ItemsSourceDisabled = false;
            private static bool isobj14IsEnabledDisabled = false;
            private static bool isobj15SelectedDateDisabled = false;
            private static bool isobj16IsEnabledDisabled = false;
            private static bool isobj16ItemsSourceDisabled = false;
            private static bool isobj17IsEnabledDisabled = false;
            private static bool isobj18SelectedDateDisabled = false;

            private TaxExemptOverLimit_obj1_BindingsTracking bindingsTracking;

            public TaxExemptOverLimit_obj1_Bindings()
            {
                this.bindingsTracking = new TaxExemptOverLimit_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 15 && columnNumber == 43)
                {
                    isobj2CommandDisabled = true;
                }
                else if (lineNumber == 86 && columnNumber == 30)
                {
                    isobj7BackCommandDisabled = true;
                }
                else if (lineNumber == 361 && columnNumber == 33)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 207 && columnNumber == 27)
                {
                    isobj10IsEnabledDisabled = true;
                }
                else if (lineNumber == 208 && columnNumber == 27)
                {
                    isobj10ItemsSourceDisabled = true;
                }
                else if (lineNumber == 224 && columnNumber == 26)
                {
                    isobj11IsEnabledDisabled = true;
                }
                else if (lineNumber == 230 && columnNumber == 52)
                {
                    isobj12SelectedDateDisabled = true;
                }
                else if (lineNumber == 158 && columnNumber == 27)
                {
                    isobj13IsEnabledDisabled = true;
                }
                else if (lineNumber == 159 && columnNumber == 27)
                {
                    isobj13ItemsSourceDisabled = true;
                }
                else if (lineNumber == 175 && columnNumber == 26)
                {
                    isobj14IsEnabledDisabled = true;
                }
                else if (lineNumber == 182 && columnNumber == 52)
                {
                    isobj15SelectedDateDisabled = true;
                }
                else if (lineNumber == 108 && columnNumber == 27)
                {
                    isobj16IsEnabledDisabled = true;
                }
                else if (lineNumber == 109 && columnNumber == 27)
                {
                    isobj16ItemsSourceDisabled = true;
                }
                else if (lineNumber == 124 && columnNumber == 26)
                {
                    isobj17IsEnabledDisabled = true;
                }
                else if (lineNumber == 132 && columnNumber == 53)
                {
                    isobj18SelectedDateDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 15
                        this.obj2 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 7: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 84
                        this.obj7 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 8: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 356
                        this.obj8 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 10: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 203
                        this.obj10 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 11: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 219
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    case 12: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 227
                        this.obj12 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        break;
                    case 13: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 154
                        this.obj13 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 14: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 170
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    case 15: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 178
                        this.obj15 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        break;
                    case 16: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 103
                        this.obj16 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 17: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 119
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    case 18: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 128
                        this.obj18 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        this.bindingsTracking.RegisterTwoWayListener_18(this.obj18);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ITaxExemptOverLimit_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.TaxExemptOverLimit)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.TaxExemptOverLimit obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_OverLimitVM(obj.OverLimitVM, phase);
                    }
                }
            }
            private void Update_OverLimitVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverLimitVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_OverLimitVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_OverLimitVM_LoadOverLimitDetailsCommand(obj.LoadOverLimitDetailsCommand, phase);
                        this.Update_OverLimitVM_BackPageCommand(obj.BackPageCommand, phase);
                        this.Update_OverLimitVM_CompleteOverLimitCommand(obj.CompleteOverLimitCommand, phase);
                        this.Update_OverLimitVM_IsPropaneReason(obj.IsPropaneReason, phase);
                        this.Update_OverLimitVM_PropaneReasons(obj.PropaneReasons, phase);
                        this.Update_OverLimitVM_PropaneDate(obj.PropaneDate, phase);
                        this.Update_OverLimitVM_IsGasReason(obj.IsGasReason, phase);
                        this.Update_OverLimitVM_GasolineReasons(obj.GasolineReasons, phase);
                        this.Update_OverLimitVM_GasDate(obj.GasDate, phase);
                        this.Update_OverLimitVM_IsTobaccoReason(obj.IsTobaccoReason, phase);
                        this.Update_OverLimitVM_TobaccoReasons(obj.TobaccoReasons, phase);
                        this.Update_OverLimitVM_TobaccoDate(obj.TobaccoDate, phase);
                    }
                }
            }
            private void Update_OverLimitVM_LoadOverLimitDetailsCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 15
                    if (!isobj2CommandDisabled)
                    {
                        XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj2, obj, null);
                    }
                }
            }
            private void Update_OverLimitVM_BackPageCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 84
                    if (!isobj7BackCommandDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(this.obj7, obj, null);
                    }
                }
            }
            private void Update_OverLimitVM_CompleteOverLimitCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 356
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_OverLimitVM_IsPropaneReason(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 203
                    if (!isobj10IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                    }
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 219
                    if (!isobj11IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj11, obj);
                    }
                }
            }
            private void Update_OverLimitVM_PropaneReasons(global::System.Collections.Generic.List<global::Infonet.CStoreCommander.UI.Model.Checkout.ExplanationCodeModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 203
                    if (!isobj10ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj10, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_OverLimitVM_PropaneDate(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 227
                    if (!isobj12SelectedDateDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj12, obj);
                    }
                }
            }
            private void Update_OverLimitVM_IsGasReason(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 154
                    if (!isobj13IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj13, obj);
                    }
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 170
                    if (!isobj14IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj14, obj);
                    }
                }
            }
            private void Update_OverLimitVM_GasolineReasons(global::System.Collections.Generic.List<global::Infonet.CStoreCommander.UI.Model.Checkout.ExplanationCodeModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 154
                    if (!isobj13ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj13, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_OverLimitVM_GasDate(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 178
                    if (!isobj15SelectedDateDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj15, obj);
                    }
                }
            }
            private void Update_OverLimitVM_IsTobaccoReason(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 103
                    if (!isobj16IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj16, obj);
                    }
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 119
                    if (!isobj17IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj17, obj);
                    }
                }
            }
            private void Update_OverLimitVM_TobaccoReasons(global::System.Collections.Generic.List<global::Infonet.CStoreCommander.UI.Model.Checkout.ExplanationCodeModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 103
                    if (!isobj16ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj16, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_OverLimitVM_TobaccoDate(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 128
                    if (!isobj18SelectedDateDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj18, obj);
                    }
                }
            }
            private void UpdateTwoWay_18_SelectedDate()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.OverLimitVM != null)
                        {
                            this.dataRoot.OverLimitVM.TobaccoDate = this.obj18.SelectedDate;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class TaxExemptOverLimit_obj1_BindingsTracking
            {
                private global::System.WeakReference<TaxExemptOverLimit_obj1_Bindings> weakRefToBindingObj; 

                public TaxExemptOverLimit_obj1_BindingsTracking(TaxExemptOverLimit_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<TaxExemptOverLimit_obj1_Bindings>(obj);
                }

                public TaxExemptOverLimit_obj1_Bindings TryGetBindingObject()
                {
                    TaxExemptOverLimit_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_OverLimitVM(null);
                }

                public void PropertyChanged_OverLimitVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TaxExemptOverLimit_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverLimitVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverLimitVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_OverLimitVM_LoadOverLimitDetailsCommand(obj.LoadOverLimitDetailsCommand, DATA_CHANGED);
                                bindings.Update_OverLimitVM_BackPageCommand(obj.BackPageCommand, DATA_CHANGED);
                                bindings.Update_OverLimitVM_CompleteOverLimitCommand(obj.CompleteOverLimitCommand, DATA_CHANGED);
                                bindings.Update_OverLimitVM_IsPropaneReason(obj.IsPropaneReason, DATA_CHANGED);
                                bindings.Update_OverLimitVM_PropaneReasons(obj.PropaneReasons, DATA_CHANGED);
                                bindings.Update_OverLimitVM_PropaneDate(obj.PropaneDate, DATA_CHANGED);
                                bindings.Update_OverLimitVM_IsGasReason(obj.IsGasReason, DATA_CHANGED);
                                bindings.Update_OverLimitVM_GasolineReasons(obj.GasolineReasons, DATA_CHANGED);
                                bindings.Update_OverLimitVM_GasDate(obj.GasDate, DATA_CHANGED);
                                bindings.Update_OverLimitVM_IsTobaccoReason(obj.IsTobaccoReason, DATA_CHANGED);
                                bindings.Update_OverLimitVM_TobaccoReasons(obj.TobaccoReasons, DATA_CHANGED);
                                bindings.Update_OverLimitVM_TobaccoDate(obj.TobaccoDate, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "LoadOverLimitDetailsCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_LoadOverLimitDetailsCommand(obj.LoadOverLimitDetailsCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BackPageCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_BackPageCommand(obj.BackPageCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CompleteOverLimitCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_CompleteOverLimitCommand(obj.CompleteOverLimitCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPropaneReason":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_IsPropaneReason(obj.IsPropaneReason, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PropaneReasons":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_PropaneReasons(obj.PropaneReasons, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PropaneDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_PropaneDate(obj.PropaneDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsGasReason":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_IsGasReason(obj.IsGasReason, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GasolineReasons":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_GasolineReasons(obj.GasolineReasons, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "GasDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_GasDate(obj.GasDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTobaccoReason":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_IsTobaccoReason(obj.IsTobaccoReason, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TobaccoReasons":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_TobaccoReasons(obj.TobaccoReasons, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TobaccoDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverLimitVM_TobaccoDate(obj.TobaccoDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverLimitVM cache_OverLimitVM = null;
                public void UpdateChildListeners_OverLimitVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverLimitVM obj)
                {
                    if (obj != cache_OverLimitVM)
                    {
                        if (cache_OverLimitVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_OverLimitVM).PropertyChanged -= PropertyChanged_OverLimitVM;
                            cache_OverLimitVM = null;
                        }
                        if (obj != null)
                        {
                            cache_OverLimitVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_OverLimitVM;
                        }
                    }
                }
                public void RegisterTwoWayListener_18(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker.SelectedDateProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_18_SelectedDate();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 25
                {
                    this.GenericButtonStyle = (global::Windows.UI.Xaml.Style)(target);
                }
                break;
            case 9: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 245
                {
                    this.DataGrid = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 10: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 203
                {
                    this.propane = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 13: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 154
                {
                    this.gasoline = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 16: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 103
                {
                    this.tobacco = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Checkout\TaxExempt\TaxExemptOverLimit.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    TaxExemptOverLimit_obj1_Bindings bindings = new TaxExemptOverLimit_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

