#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\DipInput\DipInput.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "F049E7BC9F4E8073D036285F085DCBB4"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.DipInput
{
    partial class DipInput : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.BackCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(global::MyToolkit.Controls.DataGridTextColumn obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.KeyUpCommand = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class DipInput_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IDipInput_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.DipInput.DipInput dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj2;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj3;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj4;
            private global::MyToolkit.Controls.DataGrid obj5;
            private global::MyToolkit.Controls.DataGridTextColumn obj6;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2BackCommandDisabled = false;
            private static bool isobj3CommandDisabled = false;
            private static bool isobj4CommandDisabled = false;
            private static bool isobj5SelectedItemDisabled = false;
            private static bool isobj5ItemsSourceDisabled = false;
            private static bool isobj6KeyUpCommandDisabled = false;

            private DipInput_obj1_BindingsTracking bindingsTracking;

            public DipInput_obj1_Bindings()
            {
                this.bindingsTracking = new DipInput_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 39 && columnNumber == 30)
                {
                    isobj2BackCommandDisabled = true;
                }
                else if (lineNumber == 99 && columnNumber == 35)
                {
                    isobj3CommandDisabled = true;
                }
                else if (lineNumber == 107 && columnNumber == 35)
                {
                    isobj4CommandDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 39)
                {
                    isobj5SelectedItemDisabled = true;
                }
                else if (lineNumber == 52 && columnNumber == 39)
                {
                    isobj5ItemsSourceDisabled = true;
                }
                else if (lineNumber == 86 && columnNumber == 57)
                {
                    isobj6KeyUpCommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\DipInput\DipInput.xaml line 38
                        this.obj2 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 3: // View\DipInput\DipInput.xaml line 97
                        this.obj3 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 4: // View\DipInput\DipInput.xaml line 106
                        this.obj4 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 5: // View\DipInput\DipInput.xaml line 44
                        this.obj5 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // View\DipInput\DipInput.xaml line 79
                        this.obj6 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IDipInput_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.DipInput.DipInput)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.DipInput.DipInput obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_DipInputVM(obj.DipInputVM, phase);
                    }
                }
            }
            private void Update_DipInputVM(global::Infonet.CStoreCommander.UI.ViewModel.DipInputs.DipInputVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_DipInputVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_DipInputVM_BackDipInputCommand(obj.BackDipInputCommand, phase);
                        this.Update_DipInputVM_SaveDipInputCommand(obj.SaveDipInputCommand, phase);
                        this.Update_DipInputVM_PrintDipInputCommand(obj.PrintDipInputCommand, phase);
                        this.Update_DipInputVM_SelectedDipModel(obj.SelectedDipModel, phase);
                        this.Update_DipInputVM_DipInputList(obj.DipInputList, phase);
                        this.Update_DipInputVM_EnterPressedOnValueCommand(obj.EnterPressedOnValueCommand, phase);
                    }
                }
            }
            private void Update_DipInputVM_BackDipInputCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\DipInput\DipInput.xaml line 38
                    if (!isobj2BackCommandDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(this.obj2, obj, null);
                    }
                }
            }
            private void Update_DipInputVM_SaveDipInputCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\DipInput\DipInput.xaml line 97
                    if (!isobj3CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                    }
                }
            }
            private void Update_DipInputVM_PrintDipInputCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\DipInput\DipInput.xaml line 106
                    if (!isobj4CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                    }
                }
            }
            private void Update_DipInputVM_SelectedDipModel(global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_DipInputVM_SelectedDipModel(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\DipInput\DipInput.xaml line 44
                    if (!isobj5SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj5, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_DipInputVM_DipInputList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_DipInputVM_DipInputList(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\DipInput\DipInput.xaml line 44
                    if (!isobj5ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj5, obj, null);
                    }
                }
            }
            private void Update_DipInputVM_EnterPressedOnValueCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\DipInput\DipInput.xaml line 79
                    if (!isobj6KeyUpCommandDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj6, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_5_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.DipInputVM != null)
                        {
                            this.dataRoot.DipInputVM.SelectedDipModel = (global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj5.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class DipInput_obj1_BindingsTracking
            {
                private global::System.WeakReference<DipInput_obj1_Bindings> weakRefToBindingObj; 

                public DipInput_obj1_BindingsTracking(DipInput_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<DipInput_obj1_Bindings>(obj);
                }

                public DipInput_obj1_Bindings TryGetBindingObject()
                {
                    DipInput_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_DipInputVM(null);
                    UpdateChildListeners_DipInputVM_SelectedDipModel(null);
                    UpdateChildListeners_DipInputVM_DipInputList(null);
                }

                public void PropertyChanged_DipInputVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DipInput_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.DipInputs.DipInputVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.DipInputs.DipInputVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_DipInputVM_BackDipInputCommand(obj.BackDipInputCommand, DATA_CHANGED);
                                bindings.Update_DipInputVM_SaveDipInputCommand(obj.SaveDipInputCommand, DATA_CHANGED);
                                bindings.Update_DipInputVM_PrintDipInputCommand(obj.PrintDipInputCommand, DATA_CHANGED);
                                bindings.Update_DipInputVM_SelectedDipModel(obj.SelectedDipModel, DATA_CHANGED);
                                bindings.Update_DipInputVM_DipInputList(obj.DipInputList, DATA_CHANGED);
                                bindings.Update_DipInputVM_EnterPressedOnValueCommand(obj.EnterPressedOnValueCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "BackDipInputCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DipInputVM_BackDipInputCommand(obj.BackDipInputCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SaveDipInputCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DipInputVM_SaveDipInputCommand(obj.SaveDipInputCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PrintDipInputCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DipInputVM_PrintDipInputCommand(obj.PrintDipInputCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedDipModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DipInputVM_SelectedDipModel(obj.SelectedDipModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DipInputList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DipInputVM_DipInputList(obj.DipInputList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnterPressedOnValueCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_DipInputVM_EnterPressedOnValueCommand(obj.EnterPressedOnValueCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.DipInputs.DipInputVM cache_DipInputVM = null;
                public void UpdateChildListeners_DipInputVM(global::Infonet.CStoreCommander.UI.ViewModel.DipInputs.DipInputVM obj)
                {
                    if (obj != cache_DipInputVM)
                    {
                        if (cache_DipInputVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_DipInputVM).PropertyChanged -= PropertyChanged_DipInputVM;
                            cache_DipInputVM = null;
                        }
                        if (obj != null)
                        {
                            cache_DipInputVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_DipInputVM;
                        }
                    }
                }
                public void PropertyChanged_DipInputVM_SelectedDipModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DipInput_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel obj = sender as global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel cache_DipInputVM_SelectedDipModel = null;
                public void UpdateChildListeners_DipInputVM_SelectedDipModel(global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel obj)
                {
                    if (obj != cache_DipInputVM_SelectedDipModel)
                    {
                        if (cache_DipInputVM_SelectedDipModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_DipInputVM_SelectedDipModel).PropertyChanged -= PropertyChanged_DipInputVM_SelectedDipModel;
                            cache_DipInputVM_SelectedDipModel = null;
                        }
                        if (obj != null)
                        {
                            cache_DipInputVM_SelectedDipModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_DipInputVM_SelectedDipModel;
                        }
                    }
                }
                public void PropertyChanged_DipInputVM_DipInputList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    DipInput_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_DipInputVM_DipInputList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    DipInput_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel> cache_DipInputVM_DipInputList = null;
                public void UpdateChildListeners_DipInputVM_DipInputList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.DipInputs.DipInputModel> obj)
                {
                    if (obj != cache_DipInputVM_DipInputList)
                    {
                        if (cache_DipInputVM_DipInputList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_DipInputVM_DipInputList).PropertyChanged -= PropertyChanged_DipInputVM_DipInputList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_DipInputVM_DipInputList).CollectionChanged -= CollectionChanged_DipInputVM_DipInputList;
                            cache_DipInputVM_DipInputList = null;
                        }
                        if (obj != null)
                        {
                            cache_DipInputVM_DipInputList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_DipInputVM_DipInputList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_DipInputVM_DipInputList;
                        }
                    }
                }
                public void RegisterTwoWayListener_5(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3: // View\DipInput\DipInput.xaml line 97
                {
                    this.btnSave = (global::Infonet.CStoreCommander.ControlLib.GenericButton)(target);
                }
                break;
            case 5: // View\DipInput\DipInput.xaml line 44
                {
                    this.DataGrid = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\DipInput\DipInput.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    DipInput_obj1_Bindings bindings = new DipInput_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

