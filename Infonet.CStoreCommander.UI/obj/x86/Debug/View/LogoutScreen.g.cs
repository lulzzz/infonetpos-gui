#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\LogoutScreen.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "8E4BB83B1A454E871B20FC8B2BFF43E2"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View
{
    partial class LogoutScreen : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Message = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Description = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Continue = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.ButtonBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Title = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.HeadingText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.FirstButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.SecondButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.FirstButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.SecondButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.ThirdButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_IsThirdButtonVisible(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.Boolean value)
            {
                obj.IsThirdButtonVisible = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.ThirdButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_LargePopupHeader_CancelCommand(global::Infonet.CStoreCommander.UI.Controls.LargePopupHeader obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_PasswordBox_Password(global::Windows.UI.Xaml.Controls.PasswordBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class LogoutScreen_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ILogoutScreen_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.LogoutScreen dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj3;
            private global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj4;
            private global::Infonet.CStoreCommander.UI.Controls.LargePopupHeader obj5;
            private global::Windows.UI.Xaml.Controls.PasswordBox obj6;
            private global::Windows.UI.Xaml.Controls.PasswordBox obj7;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj8;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj9;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj10;
            private global::Windows.UI.Xaml.Controls.ComboBox obj11;
            private global::Windows.UI.Xaml.Controls.ComboBox obj12;
            private global::WinRT.Triggers.InvokeCommandAction obj13;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj14;
            private global::WinRT.Triggers.InvokeCommandAction obj15;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj16;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj3MessageDisabled = false;
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj3ContinueDisabled = false;
            private static bool isobj3ButtonBackgroundColorDisabled = false;
            private static bool isobj3TitleDisabled = false;
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj4HeadingTextDisabled = false;
            private static bool isobj4FirstButtonBottomBackgroundColorDisabled = false;
            private static bool isobj4SecondButtonBottomBackgroundColorDisabled = false;
            private static bool isobj4FirstButtonTextDisabled = false;
            private static bool isobj4SecondButtonTextDisabled = false;
            private static bool isobj4DescriptionDisabled = false;
            private static bool isobj4ThirdButtonTextDisabled = false;
            private static bool isobj4IsThirdButtonVisibleDisabled = false;
            private static bool isobj4ThirdButtonBottomBackgroundColorDisabled = false;
            private static bool isobj5CancelCommandDisabled = false;
            private static bool isobj6PasswordDisabled = false;
            private static bool isobj7PasswordDisabled = false;
            private static bool isobj7IsEnabledDisabled = false;
            private static bool isobj8IsEnabledDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj9IsEnabledDisabled = false;
            private static bool isobj9CommandDisabled = false;
            private static bool isobj10CommandDisabled = false;
            private static bool isobj10IsEnabledDisabled = false;
            private static bool isobj11SelectedItemDisabled = false;
            private static bool isobj11IsEnabledDisabled = false;
            private static bool isobj11ItemsSourceDisabled = false;
            private static bool isobj12SelectedItemDisabled = false;
            private static bool isobj12IsEnabledDisabled = false;
            private static bool isobj12ItemsSourceDisabled = false;
            private static bool isobj13CommandDisabled = false;
            private static bool isobj14CommandDisabled = false;
            private static bool isobj15CommandDisabled = false;
            private static bool isobj16CommandDisabled = false;

            private LogoutScreen_obj1_BindingsTracking bindingsTracking;

            public LogoutScreen_obj1_Bindings()
            {
                this.bindingsTracking = new LogoutScreen_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 177 && columnNumber == 37)
                {
                    isobj3MessageDisabled = true;
                }
                else if (lineNumber == 183 && columnNumber == 37)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 186 && columnNumber == 37)
                {
                    isobj3ContinueDisabled = true;
                }
                else if (lineNumber == 187 && columnNumber == 37)
                {
                    isobj3ButtonBackgroundColorDisabled = true;
                }
                else if (lineNumber == 188 && columnNumber == 37)
                {
                    isobj3TitleDisabled = true;
                }
                else if (lineNumber == 195 && columnNumber == 39)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 202 && columnNumber == 39)
                {
                    isobj4HeadingTextDisabled = true;
                }
                else if (lineNumber == 203 && columnNumber == 39)
                {
                    isobj4FirstButtonBottomBackgroundColorDisabled = true;
                }
                else if (lineNumber == 204 && columnNumber == 39)
                {
                    isobj4SecondButtonBottomBackgroundColorDisabled = true;
                }
                else if (lineNumber == 205 && columnNumber == 39)
                {
                    isobj4FirstButtonTextDisabled = true;
                }
                else if (lineNumber == 206 && columnNumber == 39)
                {
                    isobj4SecondButtonTextDisabled = true;
                }
                else if (lineNumber == 207 && columnNumber == 39)
                {
                    isobj4DescriptionDisabled = true;
                }
                else if (lineNumber == 208 && columnNumber == 39)
                {
                    isobj4ThirdButtonTextDisabled = true;
                }
                else if (lineNumber == 209 && columnNumber == 39)
                {
                    isobj4IsThirdButtonVisibleDisabled = true;
                }
                else if (lineNumber == 210 && columnNumber == 39)
                {
                    isobj4ThirdButtonBottomBackgroundColorDisabled = true;
                }
                else if (lineNumber == 51 && columnNumber == 40)
                {
                    isobj5CancelCommandDisabled = true;
                }
                else if (lineNumber == 64 && columnNumber == 30)
                {
                    isobj6PasswordDisabled = true;
                }
                else if (lineNumber == 88 && columnNumber == 30)
                {
                    isobj7PasswordDisabled = true;
                }
                else if (lineNumber == 89 && columnNumber == 30)
                {
                    isobj7IsEnabledDisabled = true;
                }
                else if (lineNumber == 161 && columnNumber == 43)
                {
                    isobj8IsEnabledDisabled = true;
                }
                else if (lineNumber == 162 && columnNumber == 43)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 143 && columnNumber == 47)
                {
                    isobj9IsEnabledDisabled = true;
                }
                else if (lineNumber == 148 && columnNumber == 47)
                {
                    isobj9CommandDisabled = true;
                }
                else if (lineNumber == 151 && columnNumber == 47)
                {
                    isobj10CommandDisabled = true;
                }
                else if (lineNumber == 152 && columnNumber == 47)
                {
                    isobj10IsEnabledDisabled = true;
                }
                else if (lineNumber == 119 && columnNumber == 31)
                {
                    isobj11SelectedItemDisabled = true;
                }
                else if (lineNumber == 120 && columnNumber == 31)
                {
                    isobj11IsEnabledDisabled = true;
                }
                else if (lineNumber == 121 && columnNumber == 31)
                {
                    isobj11ItemsSourceDisabled = true;
                }
                else if (lineNumber == 132 && columnNumber == 31)
                {
                    isobj12SelectedItemDisabled = true;
                }
                else if (lineNumber == 135 && columnNumber == 31)
                {
                    isobj12IsEnabledDisabled = true;
                }
                else if (lineNumber == 136 && columnNumber == 31)
                {
                    isobj12ItemsSourceDisabled = true;
                }
                else if (lineNumber == 97 && columnNumber == 59)
                {
                    isobj13CommandDisabled = true;
                }
                else if (lineNumber == 103 && columnNumber == 53)
                {
                    isobj14CommandDisabled = true;
                }
                else if (lineNumber == 72 && columnNumber == 59)
                {
                    isobj15CommandDisabled = true;
                }
                else if (lineNumber == 78 && columnNumber == 53)
                {
                    isobj16CommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 3: // View\LogoutScreen.xaml line 177
                        this.obj3 = (global::Infonet.CStoreCommander.UI.Controls.NotificationPopup)target;
                        break;
                    case 4: // View\LogoutScreen.xaml line 192
                        this.obj4 = (global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons)target;
                        break;
                    case 5: // View\LogoutScreen.xaml line 50
                        this.obj5 = (global::Infonet.CStoreCommander.UI.Controls.LargePopupHeader)target;
                        break;
                    case 6: // View\LogoutScreen.xaml line 61
                        this.obj6 = (global::Windows.UI.Xaml.Controls.PasswordBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    case 7: // View\LogoutScreen.xaml line 86
                        this.obj7 = (global::Windows.UI.Xaml.Controls.PasswordBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_7(this.obj7);
                        break;
                    case 8: // View\LogoutScreen.xaml line 160
                        this.obj8 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 9: // View\LogoutScreen.xaml line 142
                        this.obj9 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 10: // View\LogoutScreen.xaml line 150
                        this.obj10 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 11: // View\LogoutScreen.xaml line 112
                        this.obj11 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_11(this.obj11);
                        break;
                    case 12: // View\LogoutScreen.xaml line 126
                        this.obj12 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_12(this.obj12);
                        break;
                    case 13: // View\LogoutScreen.xaml line 97
                        this.obj13 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 14: // View\LogoutScreen.xaml line 103
                        this.obj14 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 15: // View\LogoutScreen.xaml line 72
                        this.obj15 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 16: // View\LogoutScreen.xaml line 78
                        this.obj16 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ILogoutScreen_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.LogoutScreen)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.LogoutScreen obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LogoutScreenVM(obj.LogoutScreenVM, phase);
                    }
                }
            }
            private void Update_LogoutScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.Login.LogoutScreenVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_LogoutScreenVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LogoutScreenVM_PopupService(obj.PopupService, phase);
                        this.Update_LogoutScreenVM_BackToHomeNavigationCommand(obj.BackToHomeNavigationCommand, phase);
                        this.Update_LogoutScreenVM_UserName(obj.UserName, phase);
                        this.Update_LogoutScreenVM_Password(obj.Password, phase);
                        this.Update_LogoutScreenVM_RequirePasswordOnChangeUser(obj.RequirePasswordOnChangeUser, phase);
                        this.Update_LogoutScreenVM_IsFreezeTillEnabled(obj.IsFreezeTillEnabled, phase);
                        this.Update_LogoutScreenVM_FreezeCommand(obj.FreezeCommand, phase);
                        this.Update_LogoutScreenVM_IsSwitchEnabled(obj.IsSwitchEnabled, phase);
                        this.Update_LogoutScreenVM_SwitchUserCommand(obj.SwitchUserCommand, phase);
                        this.Update_LogoutScreenVM_LogoutUserCommand(obj.LogoutUserCommand, phase);
                        this.Update_LogoutScreenVM_IsLogoutEnabled(obj.IsLogoutEnabled, phase);
                        this.Update_LogoutScreenVM_SelectedTill(obj.SelectedTill, phase);
                        this.Update_LogoutScreenVM_IsTillEnabled(obj.IsTillEnabled, phase);
                        this.Update_LogoutScreenVM_TillNumbers(obj.TillNumbers, phase);
                        this.Update_LogoutScreenVM_SelectedShift(obj.SelectedShift, phase);
                        this.Update_LogoutScreenVM_IsShiftEnabled(obj.IsShiftEnabled, phase);
                        this.Update_LogoutScreenVM_Shifts(obj.Shifts, phase);
                        this.Update_LogoutScreenVM_PasswordCompletedCommand(obj.PasswordCompletedCommand, phase);
                        this.Update_LogoutScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, phase);
                        this.Update_LogoutScreenVM_EnterPressedOnUserNameCommand(obj.EnterPressedOnUserNameCommand, phase);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_LogoutScreenVM_PopupService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LogoutScreenVM_PopupService_Message(obj.Message, phase);
                        this.Update_LogoutScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, phase);
                        this.Update_LogoutScreenVM_PopupService_Continue(obj.Continue, phase);
                        this.Update_LogoutScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, phase);
                        this.Update_LogoutScreenVM_PopupService_Title(obj.Title, phase);
                        this.Update_LogoutScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, phase);
                        this.Update_LogoutScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, phase);
                        this.Update_LogoutScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, phase);
                        this.Update_LogoutScreenVM_PopupService_YesButtonText(obj.YesButtonText, phase);
                        this.Update_LogoutScreenVM_PopupService_NoButtonText(obj.NoButtonText, phase);
                        this.Update_LogoutScreenVM_PopupService_ThirdButtonText(obj.ThirdButtonText, phase);
                        this.Update_LogoutScreenVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, phase);
                        this.Update_LogoutScreenVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, phase);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_Message(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 177
                    if (!isobj3MessageDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(this.obj3, obj, null);
                    }
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4DescriptionDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(this.obj4, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_IsAlertPopupOpen(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 177
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_Continue(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 177
                    if (!isobj3ContinueDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(this.obj3, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_OkButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 177
                    if (!isobj3ButtonBackgroundColorDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(this.obj3, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 177
                    if (!isobj3TitleDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(this.obj3, obj, null);
                    }
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4HeadingTextDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(this.obj4, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_IsConfirmationPopupOpen(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_YesButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4FirstButtonBottomBackgroundColorDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(this.obj4, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_NoButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4SecondButtonBottomBackgroundColorDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(this.obj4, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_YesButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4FirstButtonTextDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(this.obj4, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_NoButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4SecondButtonTextDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(this.obj4, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_ThirdButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4ThirdButtonTextDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonText(this.obj4, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_IsThirdButtonVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4IsThirdButtonVisibleDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_IsThirdButtonVisible(this.obj4, obj);
                    }
                }
            }
            private void Update_LogoutScreenVM_PopupService_ThirdButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 192
                    if (!isobj4ThirdButtonBottomBackgroundColorDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_ThirdButtonBottomBackgroundColor(this.obj4, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_BackToHomeNavigationCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 50
                    if (!isobj5CancelCommandDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_LargePopupHeader_CancelCommand(this.obj5, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_UserName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 61
                    if (!isobj6PasswordDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_Password(this.obj6, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_Password(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 86
                    if (!isobj7PasswordDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_Password(this.obj7, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_RequirePasswordOnChangeUser(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 86
                    if (!isobj7IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj7, obj);
                    }
                }
            }
            private void Update_LogoutScreenVM_IsFreezeTillEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 160
                    if (!isobj8IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj8, obj);
                    }
                }
            }
            private void Update_LogoutScreenVM_FreezeCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 160
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_IsSwitchEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 142
                    if (!isobj9IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj9, obj);
                    }
                }
            }
            private void Update_LogoutScreenVM_SwitchUserCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 142
                    if (!isobj9CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj9, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_LogoutUserCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 150
                    if (!isobj10CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj10, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_IsLogoutEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 150
                    if (!isobj10IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                    }
                }
            }
            private void Update_LogoutScreenVM_SelectedTill(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 112
                    if (!isobj11SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj11, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_LogoutScreenVM_IsTillEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 112
                    if (!isobj11IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj11, obj);
                    }
                }
            }
            private void Update_LogoutScreenVM_TillNumbers(global::System.Collections.Generic.List<global::System.Int32> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 112
                    if (!isobj11ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj11, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_SelectedShift(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 126
                    if (!isobj12SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj12, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_IsShiftEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 126
                    if (!isobj12IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj12, obj);
                    }
                }
            }
            private void Update_LogoutScreenVM_Shifts(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 126
                    if (!isobj12ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj12, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_PasswordCompletedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 97
                    if (!isobj13CommandDisabled)
                    {
                        XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj13, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_InvokeKeyboardCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 103
                    if (!isobj14CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj14, obj, null);
                    }
                    // View\LogoutScreen.xaml line 78
                    if (!isobj16CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj16, obj, null);
                    }
                }
            }
            private void Update_LogoutScreenVM_EnterPressedOnUserNameCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LogoutScreen.xaml line 72
                    if (!isobj15CommandDisabled)
                    {
                        XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj15, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_6_Password()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LogoutScreenVM != null)
                        {
                            this.dataRoot.LogoutScreenVM.UserName = this.obj6.Password;
                        }
                    }
                }
            }
            private void UpdateTwoWay_7_Password()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LogoutScreenVM != null)
                        {
                            this.dataRoot.LogoutScreenVM.Password = this.obj7.Password;
                        }
                    }
                }
            }
            private void UpdateTwoWay_11_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LogoutScreenVM != null)
                        {
                            this.dataRoot.LogoutScreenVM.SelectedTill = (global::System.Int32)this.LookupConverter("NothingConverter").ConvertBack(this.obj11.SelectedItem, typeof(global::System.Int32), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_12_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LogoutScreenVM != null)
                        {
                            this.dataRoot.LogoutScreenVM.SelectedShift = (global::System.String)this.obj12.SelectedItem;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class LogoutScreen_obj1_BindingsTracking
            {
                private global::System.WeakReference<LogoutScreen_obj1_Bindings> weakRefToBindingObj; 

                public LogoutScreen_obj1_BindingsTracking(LogoutScreen_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<LogoutScreen_obj1_Bindings>(obj);
                }

                public LogoutScreen_obj1_Bindings TryGetBindingObject()
                {
                    LogoutScreen_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_LogoutScreenVM(null);
                    UpdateChildListeners_LogoutScreenVM_PopupService(null);
                }

                public void PropertyChanged_LogoutScreenVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    LogoutScreen_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Login.LogoutScreenVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Login.LogoutScreenVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_LogoutScreenVM_PopupService(obj.PopupService, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_BackToHomeNavigationCommand(obj.BackToHomeNavigationCommand, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_UserName(obj.UserName, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_Password(obj.Password, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_RequirePasswordOnChangeUser(obj.RequirePasswordOnChangeUser, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_IsFreezeTillEnabled(obj.IsFreezeTillEnabled, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_FreezeCommand(obj.FreezeCommand, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_IsSwitchEnabled(obj.IsSwitchEnabled, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_SwitchUserCommand(obj.SwitchUserCommand, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_LogoutUserCommand(obj.LogoutUserCommand, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_IsLogoutEnabled(obj.IsLogoutEnabled, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_SelectedTill(obj.SelectedTill, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_IsTillEnabled(obj.IsTillEnabled, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_TillNumbers(obj.TillNumbers, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_SelectedShift(obj.SelectedShift, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_IsShiftEnabled(obj.IsShiftEnabled, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_Shifts(obj.Shifts, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PasswordCompletedCommand(obj.PasswordCompletedCommand, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_EnterPressedOnUserNameCommand(obj.EnterPressedOnUserNameCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "PopupService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BackToHomeNavigationCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_BackToHomeNavigationCommand(obj.BackToHomeNavigationCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UserName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_UserName(obj.UserName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Password":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_Password(obj.Password, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RequirePasswordOnChangeUser":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_RequirePasswordOnChangeUser(obj.RequirePasswordOnChangeUser, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsFreezeTillEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_IsFreezeTillEnabled(obj.IsFreezeTillEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreezeCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_FreezeCommand(obj.FreezeCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSwitchEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_IsSwitchEnabled(obj.IsSwitchEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SwitchUserCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_SwitchUserCommand(obj.SwitchUserCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LogoutUserCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_LogoutUserCommand(obj.LogoutUserCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsLogoutEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_IsLogoutEnabled(obj.IsLogoutEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedTill":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_SelectedTill(obj.SelectedTill, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTillEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_IsTillEnabled(obj.IsTillEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TillNumbers":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_TillNumbers(obj.TillNumbers, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedShift":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_SelectedShift(obj.SelectedShift, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsShiftEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_IsShiftEnabled(obj.IsShiftEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Shifts":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_Shifts(obj.Shifts, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PasswordCompletedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PasswordCompletedCommand(obj.PasswordCompletedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "InvokeKeyboardCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EnterPressedOnUserNameCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_EnterPressedOnUserNameCommand(obj.EnterPressedOnUserNameCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Login.LogoutScreenVM cache_LogoutScreenVM = null;
                public void UpdateChildListeners_LogoutScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.Login.LogoutScreenVM obj)
                {
                    if (obj != cache_LogoutScreenVM)
                    {
                        if (cache_LogoutScreenVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_LogoutScreenVM).PropertyChanged -= PropertyChanged_LogoutScreenVM;
                            cache_LogoutScreenVM = null;
                        }
                        if (obj != null)
                        {
                            cache_LogoutScreenVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_LogoutScreenVM;
                        }
                    }
                }
                public void PropertyChanged_LogoutScreenVM_PopupService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    LogoutScreen_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Utility.PopupService obj = sender as global::Infonet.CStoreCommander.UI.Utility.PopupService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_LogoutScreenVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_ThirdButtonText(obj.ThirdButtonText, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, DATA_CHANGED);
                                bindings.Update_LogoutScreenVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Message":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAlertPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Continue":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OkButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsConfirmationPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ThirdButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_ThirdButtonText(obj.ThirdButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsThirdButtonVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_IsThirdButtonVisible(obj.IsThirdButtonVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ThirdButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LogoutScreenVM_PopupService_ThirdButtonColor(obj.ThirdButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Utility.PopupService cache_LogoutScreenVM_PopupService = null;
                public void UpdateChildListeners_LogoutScreenVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj)
                {
                    if (obj != cache_LogoutScreenVM_PopupService)
                    {
                        if (cache_LogoutScreenVM_PopupService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_LogoutScreenVM_PopupService).PropertyChanged -= PropertyChanged_LogoutScreenVM_PopupService;
                            cache_LogoutScreenVM_PopupService = null;
                        }
                        if (obj != null)
                        {
                            cache_LogoutScreenVM_PopupService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_LogoutScreenVM_PopupService;
                        }
                    }
                }
                public void RegisterTwoWayListener_6(global::Windows.UI.Xaml.Controls.PasswordBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_Password();
                        }
                    });
                }
                public void RegisterTwoWayListener_7(global::Windows.UI.Xaml.Controls.PasswordBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_Password();
                        }
                    });
                }
                public void RegisterTwoWayListener_11(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_11_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_12(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_12_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // View\LogoutScreen.xaml line 36
                {
                    this.gdLogoutPopup = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 3: // View\LogoutScreen.xaml line 177
                {
                    this.errorPopup = (global::Infonet.CStoreCommander.UI.Controls.NotificationPopup)(target);
                }
                break;
            case 4: // View\LogoutScreen.xaml line 192
                {
                    this.ConfirmationPopup = (global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons)(target);
                }
                break;
            case 6: // View\LogoutScreen.xaml line 61
                {
                    this.txtUser = (global::Windows.UI.Xaml.Controls.PasswordBox)(target);
                }
                break;
            case 7: // View\LogoutScreen.xaml line 86
                {
                    this.txtPassword = (global::Windows.UI.Xaml.Controls.PasswordBox)(target);
                }
                break;
            case 11: // View\LogoutScreen.xaml line 112
                {
                    this.Till = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 12: // View\LogoutScreen.xaml line 126
                {
                    this.Shift = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\LogoutScreen.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    LogoutScreen_obj1_Bindings bindings = new LogoutScreen_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

