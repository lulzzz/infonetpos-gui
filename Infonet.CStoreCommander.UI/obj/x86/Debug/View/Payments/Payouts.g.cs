#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\Payments\Payouts.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "72BBB7E5E8E2DAF405CF8E9EAB687D8A"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Payments
{
    partial class Payouts : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(global::MyToolkit.Extended.Controls.CustomTextBox obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.EnterPressedCommand = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Header(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Header = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class Payouts_obj13_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPayouts_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj13;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj13HeaderDisabled = false;

            private Payouts_obj13_BindingsTracking bindingsTracking;

            public Payouts_obj13_Bindings()
            {
                this.bindingsTracking = new Payouts_obj13_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 153 && columnNumber == 58)
                {
                    isobj13HeaderDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 13: // View\Payments\Payouts.xaml line 153
                        this.obj13 = new global::System.WeakReference((global::MyToolkit.Extended.Controls.CustomTextBox)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj13.Target as global::MyToolkit.Extended.Controls.CustomTextBox).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IPayouts_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Description(obj.Description, phase);
                    }
                }
            }
            private void Update_Description(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 153
                    if (!isobj13HeaderDisabled)
                    {
                        if ((this.obj13.Target as global::MyToolkit.Extended.Controls.CustomTextBox) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Header((this.obj13.Target as global::MyToolkit.Extended.Controls.CustomTextBox), obj, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class Payouts_obj13_BindingsTracking
            {
                private global::System.WeakReference<Payouts_obj13_Bindings> weakRefToBindingObj; 

                public Payouts_obj13_BindingsTracking(Payouts_obj13_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<Payouts_obj13_Bindings>(obj);
                }

                public Payouts_obj13_Bindings TryGetBindingObject()
                {
                    Payouts_obj13_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Payouts_obj13_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Description(obj.Description, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Description":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Description(obj.Description, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel obj)
                {
                    Payouts_obj13_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class Payouts_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPayouts_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Payments.Payouts dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Grid obj4;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj5;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj6;
            private global::Windows.UI.Xaml.Controls.ComboBox obj7;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj8;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj9;
            private global::Windows.UI.Xaml.Controls.GridView obj10;
            private global::MyToolkit.Controls.DataGrid obj11;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj14;

            // Fields for each event bindings event handler.
            private global::Windows.UI.Xaml.RoutedEventHandler obj4Loaded;
            private global::Windows.UI.Xaml.Input.KeyEventHandler obj8KeyUp;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj5IsOnDisabled = false;
            private static bool isobj6CommandDisabled = false;
            private static bool isobj7SelectedIndexDisabled = false;
            private static bool isobj7ItemsSourceDisabled = false;
            private static bool isobj7IsEnabledDisabled = false;
            private static bool isobj9EnterPressedCommandDisabled = false;
            private static bool isobj10ItemsSourceDisabled = false;
            private static bool isobj11ItemsSourceDisabled = false;
            private static bool isobj11SelectedItemDisabled = false;
            private static bool isobj14CommandDisabled = false;

            private Payouts_obj1_BindingsTracking bindingsTracking;

            public Payouts_obj1_Bindings()
            {
                this.bindingsTracking = new Payouts_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 96 && columnNumber == 11)
                {
                    this.obj4.Loaded -= obj4Loaded;
                }
                else if (lineNumber == 217 && columnNumber == 27)
                {
                    isobj5IsOnDisabled = true;
                }
                else if (lineNumber == 227 && columnNumber == 39)
                {
                    isobj6CommandDisabled = true;
                }
                else if (lineNumber == 118 && columnNumber == 27)
                {
                    isobj7SelectedIndexDisabled = true;
                }
                else if (lineNumber == 119 && columnNumber == 27)
                {
                    isobj7ItemsSourceDisabled = true;
                }
                else if (lineNumber == 120 && columnNumber == 27)
                {
                    isobj7IsEnabledDisabled = true;
                }
                else if (lineNumber == 127 && columnNumber == 46)
                {
                    this.obj8.KeyUp -= obj8KeyUp;
                }
                else if (lineNumber == 133 && columnNumber == 46)
                {
                    isobj9EnterPressedCommandDisabled = true;
                }
                else if (lineNumber == 145 && columnNumber == 27)
                {
                    isobj10ItemsSourceDisabled = true;
                }
                else if (lineNumber == 171 && columnNumber == 43)
                {
                    isobj11ItemsSourceDisabled = true;
                }
                else if (lineNumber == 172 && columnNumber == 43)
                {
                    isobj11SelectedItemDisabled = true;
                }
                else if (lineNumber == 140 && columnNumber == 53)
                {
                    isobj14CommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // View\Payments\Payouts.xaml line 96
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        this.obj4Loaded = (global::System.Object p0, global::Windows.UI.Xaml.RoutedEventArgs p1) =>
                        {
                            this.dataRoot.GridLoaded(p0, p1);
                        };
                        ((global::Windows.UI.Xaml.Controls.Grid)target).Loaded += obj4Loaded;
                        break;
                    case 5: // View\Payments\Payouts.xaml line 216
                        this.obj5 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // View\Payments\Payouts.xaml line 223
                        this.obj6 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 7: // View\Payments\Payouts.xaml line 115
                        this.obj7 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_7(this.obj7);
                        break;
                    case 8: // View\Payments\Payouts.xaml line 122
                        this.obj8 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        this.obj8KeyUp = (global::System.Object p0, global::Windows.UI.Xaml.Input.KeyRoutedEventArgs p1) =>
                        {
                            this.dataRoot.PasswordBoxKeyUp(p0, p1);
                        };
                        ((global::MyToolkit.Extended.Controls.CustomTextBox)target).KeyUp += obj8KeyUp;
                        break;
                    case 9: // View\Payments\Payouts.xaml line 131
                        this.obj9 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        break;
                    case 10: // View\Payments\Payouts.xaml line 145
                        this.obj10 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 11: // View\Payments\Payouts.xaml line 171
                        this.obj11 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_11(this.obj11);
                        break;
                    case 14: // View\Payments\Payouts.xaml line 140
                        this.obj14 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IPayouts_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Payments.Payouts)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Payments.Payouts obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PayoutVM(obj.PayoutVM, phase);
                    }
                }
            }
            private void Update_PayoutVM(global::Infonet.CStoreCommander.UI.ViewModel.Payment.PayoutVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PayoutVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PayoutVM_IsPrintOn(obj.IsPrintOn, phase);
                        this.Update_PayoutVM_CompletePaymentCommand(obj.CompletePaymentCommand, phase);
                        this.Update_PayoutVM_SelectedReasonIndex(obj.SelectedReasonIndex, phase);
                        this.Update_PayoutVM_Reasons(obj.Reasons, phase);
                        this.Update_PayoutVM_IsReasonEnable(obj.IsReasonEnable, phase);
                        this.Update_PayoutVM_SearchVendorCommand(obj.SearchVendorCommand, phase);
                        this.Update_PayoutVM_Taxes(obj.Taxes, phase);
                        this.Update_PayoutVM_VendorList(obj.VendorList, phase);
                        this.Update_PayoutVM_SelectedVendor(obj.SelectedVendor, phase);
                        this.Update_PayoutVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, phase);
                    }
                }
            }
            private void Update_PayoutVM_IsPrintOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 216
                    if (!isobj5IsOnDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj5, obj);
                    }
                }
            }
            private void Update_PayoutVM_CompletePaymentCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 223
                    if (!isobj6CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj6, obj, null);
                    }
                }
            }
            private void Update_PayoutVM_SelectedReasonIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 115
                    if (!isobj7SelectedIndexDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj7, (global::System.Int32)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Int32), null, null));
                    }
                }
            }
            private void Update_PayoutVM_Reasons(global::System.Collections.Generic.Dictionary<global::System.String, global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 115
                    if (!isobj7ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj7, obj, null);
                    }
                }
            }
            private void Update_PayoutVM_IsReasonEnable(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 115
                    if (!isobj7IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj7, obj);
                    }
                }
            }
            private void Update_PayoutVM_SearchVendorCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 131
                    if (!isobj9EnterPressedCommandDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(this.obj9, obj, null);
                    }
                }
            }
            private void Update_PayoutVM_Taxes(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PayoutVM_Taxes(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 145
                    if (!isobj10ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj10, obj, null);
                    }
                }
            }
            private void Update_PayoutVM_VendorList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PayoutVM_VendorList(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 171
                    if (!isobj11ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj11, obj, null);
                    }
                }
            }
            private void Update_PayoutVM_SelectedVendor(global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PayoutVM_SelectedVendor(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 171
                    if (!isobj11SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj11, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_PayoutVM_InvokeKeyboardCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Payments\Payouts.xaml line 140
                    if (!isobj14CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj14, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_5_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PayoutVM != null)
                        {
                            this.dataRoot.PayoutVM.IsPrintOn = this.obj5.IsOn;
                        }
                    }
                }
            }
            private void UpdateTwoWay_7_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PayoutVM != null)
                        {
                            this.dataRoot.PayoutVM.SelectedReasonIndex = (global::System.Int32)this.LookupConverter("NothingConverter").ConvertBack(this.obj7.SelectedIndex, typeof(global::System.Int32), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_11_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PayoutVM != null)
                        {
                            this.dataRoot.PayoutVM.SelectedVendor = (global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj11.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class Payouts_obj1_BindingsTracking
            {
                private global::System.WeakReference<Payouts_obj1_Bindings> weakRefToBindingObj; 

                public Payouts_obj1_BindingsTracking(Payouts_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<Payouts_obj1_Bindings>(obj);
                }

                public Payouts_obj1_Bindings TryGetBindingObject()
                {
                    Payouts_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_PayoutVM(null);
                    UpdateChildListeners_PayoutVM_Taxes(null);
                    UpdateChildListeners_PayoutVM_VendorList(null);
                    UpdateChildListeners_PayoutVM_SelectedVendor(null);
                }

                public void PropertyChanged_PayoutVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Payouts_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Payment.PayoutVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Payment.PayoutVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_PayoutVM_IsPrintOn(obj.IsPrintOn, DATA_CHANGED);
                                bindings.Update_PayoutVM_CompletePaymentCommand(obj.CompletePaymentCommand, DATA_CHANGED);
                                bindings.Update_PayoutVM_SelectedReasonIndex(obj.SelectedReasonIndex, DATA_CHANGED);
                                bindings.Update_PayoutVM_Reasons(obj.Reasons, DATA_CHANGED);
                                bindings.Update_PayoutVM_IsReasonEnable(obj.IsReasonEnable, DATA_CHANGED);
                                bindings.Update_PayoutVM_SearchVendorCommand(obj.SearchVendorCommand, DATA_CHANGED);
                                bindings.Update_PayoutVM_Taxes(obj.Taxes, DATA_CHANGED);
                                bindings.Update_PayoutVM_VendorList(obj.VendorList, DATA_CHANGED);
                                bindings.Update_PayoutVM_SelectedVendor(obj.SelectedVendor, DATA_CHANGED);
                                bindings.Update_PayoutVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsPrintOn":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_IsPrintOn(obj.IsPrintOn, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CompletePaymentCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_CompletePaymentCommand(obj.CompletePaymentCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedReasonIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_SelectedReasonIndex(obj.SelectedReasonIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Reasons":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_Reasons(obj.Reasons, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsReasonEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_IsReasonEnable(obj.IsReasonEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchVendorCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_SearchVendorCommand(obj.SearchVendorCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Taxes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_Taxes(obj.Taxes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "VendorList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_VendorList(obj.VendorList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedVendor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_SelectedVendor(obj.SelectedVendor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "InvokeKeyboardCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PayoutVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Payment.PayoutVM cache_PayoutVM = null;
                public void UpdateChildListeners_PayoutVM(global::Infonet.CStoreCommander.UI.ViewModel.Payment.PayoutVM obj)
                {
                    if (obj != cache_PayoutVM)
                    {
                        if (cache_PayoutVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PayoutVM).PropertyChanged -= PropertyChanged_PayoutVM;
                            cache_PayoutVM = null;
                        }
                        if (obj != null)
                        {
                            cache_PayoutVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PayoutVM;
                        }
                    }
                }
                public void PropertyChanged_PayoutVM_Taxes(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Payouts_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PayoutVM_Taxes(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Payouts_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel> cache_PayoutVM_Taxes = null;
                public void UpdateChildListeners_PayoutVM_Taxes(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.TaxModel> obj)
                {
                    if (obj != cache_PayoutVM_Taxes)
                    {
                        if (cache_PayoutVM_Taxes != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PayoutVM_Taxes).PropertyChanged -= PropertyChanged_PayoutVM_Taxes;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_PayoutVM_Taxes).CollectionChanged -= CollectionChanged_PayoutVM_Taxes;
                            cache_PayoutVM_Taxes = null;
                        }
                        if (obj != null)
                        {
                            cache_PayoutVM_Taxes = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PayoutVM_Taxes;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_PayoutVM_Taxes;
                        }
                    }
                }
                public void PropertyChanged_PayoutVM_VendorList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Payouts_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PayoutVM_VendorList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Payouts_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel> cache_PayoutVM_VendorList = null;
                public void UpdateChildListeners_PayoutVM_VendorList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel> obj)
                {
                    if (obj != cache_PayoutVM_VendorList)
                    {
                        if (cache_PayoutVM_VendorList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PayoutVM_VendorList).PropertyChanged -= PropertyChanged_PayoutVM_VendorList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_PayoutVM_VendorList).CollectionChanged -= CollectionChanged_PayoutVM_VendorList;
                            cache_PayoutVM_VendorList = null;
                        }
                        if (obj != null)
                        {
                            cache_PayoutVM_VendorList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PayoutVM_VendorList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_PayoutVM_VendorList;
                        }
                    }
                }
                public void PropertyChanged_PayoutVM_SelectedVendor(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Payouts_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel cache_PayoutVM_SelectedVendor = null;
                public void UpdateChildListeners_PayoutVM_SelectedVendor(global::Infonet.CStoreCommander.UI.Model.Payout.VendorModel obj)
                {
                    if (obj != cache_PayoutVM_SelectedVendor)
                    {
                        if (cache_PayoutVM_SelectedVendor != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PayoutVM_SelectedVendor).PropertyChanged -= PropertyChanged_PayoutVM_SelectedVendor;
                            cache_PayoutVM_SelectedVendor = null;
                        }
                        if (obj != null)
                        {
                            cache_PayoutVM_SelectedVendor = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PayoutVM_SelectedVendor;
                        }
                    }
                }
                public void RegisterTwoWayListener_5(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_IsOn();
                        }
                    });
                }
                public void RegisterTwoWayListener_7(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_11(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_11_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 8: // View\Payments\Payouts.xaml line 122
                {
                    this.txtAmountGiveX = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            case 9: // View\Payments\Payouts.xaml line 131
                {
                    this.VendorSearch = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            case 13: // View\Payments\Payouts.xaml line 153
                {
                    global::MyToolkit.Extended.Controls.CustomTextBox element13 = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                    ((global::MyToolkit.Extended.Controls.CustomTextBox)element13).GotFocus += this.PasswordBox_GotFocus;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Payments\Payouts.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    Payouts_obj1_Bindings bindings = new Payouts_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 13: // View\Payments\Payouts.xaml line 153
                {                    
                    global::MyToolkit.Extended.Controls.CustomTextBox element13 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                    Payouts_obj13_Bindings bindings = new Payouts_obj13_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element13.DataContext);
                    element13.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element13, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element13, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

