#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\PumpOptions\Fuel Pricing\AddManual.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "7624136612F88F36AE891206BAD0CAF8"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.PumpOptions.Fuel_Pricing
{
    partial class AddManual : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.BackCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ComboBox_Header(global::Windows.UI.Xaml.Controls.ComboBox obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Header = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class AddManual_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IAddManual_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.PumpOptions.Fuel_Pricing.AddManual dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::WinRT.Triggers.InvokeCommandAction obj2;
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj3;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj4;
            private global::Windows.UI.Xaml.Controls.TextBlock obj5;
            private global::Windows.UI.Xaml.Controls.ComboBox obj6;
            private global::Windows.UI.Xaml.Controls.ComboBox obj7;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2CommandDisabled = false;
            private static bool isobj3BackCommandDisabled = false;
            private static bool isobj4CommandDisabled = false;
            private static bool isobj4IsEnabledDisabled = false;
            private static bool isobj5TextDisabled = false;
            private static bool isobj6IsEnabledDisabled = false;
            private static bool isobj6ItemsSourceDisabled = false;
            private static bool isobj6HeaderDisabled = false;
            private static bool isobj6SelectedItemDisabled = false;
            private static bool isobj7IsEnabledDisabled = false;
            private static bool isobj7ItemsSourceDisabled = false;
            private static bool isobj7SelectedItemDisabled = false;

            private AddManual_obj1_BindingsTracking bindingsTracking;

            public AddManual_obj1_Bindings()
            {
                this.bindingsTracking = new AddManual_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 17 && columnNumber == 43)
                {
                    isobj2CommandDisabled = true;
                }
                else if (lineNumber == 66 && columnNumber == 30)
                {
                    isobj3BackCommandDisabled = true;
                }
                else if (lineNumber == 96 && columnNumber == 36)
                {
                    isobj4CommandDisabled = true;
                }
                else if (lineNumber == 97 && columnNumber == 36)
                {
                    isobj4IsEnabledDisabled = true;
                }
                else if (lineNumber == 79 && columnNumber == 24)
                {
                    isobj5TextDisabled = true;
                }
                else if (lineNumber == 83 && columnNumber == 23)
                {
                    isobj6IsEnabledDisabled = true;
                }
                else if (lineNumber == 84 && columnNumber == 23)
                {
                    isobj6ItemsSourceDisabled = true;
                }
                else if (lineNumber == 85 && columnNumber == 23)
                {
                    isobj6HeaderDisabled = true;
                }
                else if (lineNumber == 86 && columnNumber == 23)
                {
                    isobj6SelectedItemDisabled = true;
                }
                else if (lineNumber == 89 && columnNumber == 23)
                {
                    isobj7IsEnabledDisabled = true;
                }
                else if (lineNumber == 90 && columnNumber == 23)
                {
                    isobj7ItemsSourceDisabled = true;
                }
                else if (lineNumber == 91 && columnNumber == 23)
                {
                    isobj7SelectedItemDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\PumpOptions\Fuel Pricing\AddManual.xaml line 17
                        this.obj2 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 3: // View\PumpOptions\Fuel Pricing\AddManual.xaml line 65
                        this.obj3 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 4: // View\PumpOptions\Fuel Pricing\AddManual.xaml line 95
                        this.obj4 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 5: // View\PumpOptions\Fuel Pricing\AddManual.xaml line 79
                        this.obj5 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 6: // View\PumpOptions\Fuel Pricing\AddManual.xaml line 83
                        this.obj6 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    case 7: // View\PumpOptions\Fuel Pricing\AddManual.xaml line 88
                        this.obj7 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_7(this.obj7);
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IAddManual_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.PumpOptions.Fuel_Pricing.AddManual)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.PumpOptions.Fuel_Pricing.AddManual obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AddManualVM(obj.AddManualVM, phase);
                    }
                }
            }
            private void Update_AddManualVM(global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.AddManualVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_AddManualVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AddManualVM_CheckUserCanPerformManualSalesCommand(obj.CheckUserCanPerformManualSalesCommand, phase);
                        this.Update_AddManualVM_BackCommand(obj.BackCommand, phase);
                        this.Update_AddManualVM_AddFuelCommand(obj.AddFuelCommand, phase);
                        this.Update_AddManualVM_IsAddFuelEnabled(obj.IsAddFuelEnabled, phase);
                        this.Update_AddManualVM_Title(obj.Title, phase);
                        this.Update_AddManualVM_IsPaymentModeEnabled(obj.IsPaymentModeEnabled, phase);
                        this.Update_AddManualVM_PaymentModes(obj.PaymentModes, phase);
                        this.Update_AddManualVM_PaymentModeHeading(obj.PaymentModeHeading, phase);
                        this.Update_AddManualVM_SelectedPaymentMode(obj.SelectedPaymentMode, phase);
                        this.Update_AddManualVM_IsGradeEnabled(obj.IsGradeEnabled, phase);
                        this.Update_AddManualVM_Grades(obj.Grades, phase);
                        this.Update_AddManualVM_SelectedGrade(obj.SelectedGrade, phase);
                    }
                }
            }
            private void Update_AddManualVM_CheckUserCanPerformManualSalesCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 17
                    if (!isobj2CommandDisabled)
                    {
                        XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj2, obj, null);
                    }
                }
            }
            private void Update_AddManualVM_BackCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 65
                    if (!isobj3BackCommandDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(this.obj3, obj, null);
                    }
                }
            }
            private void Update_AddManualVM_AddFuelCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 95
                    if (!isobj4CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                    }
                }
            }
            private void Update_AddManualVM_IsAddFuelEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 95
                    if (!isobj4IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj4, obj);
                    }
                }
            }
            private void Update_AddManualVM_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 79
                    if (!isobj5TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj5, obj, null);
                    }
                }
            }
            private void Update_AddManualVM_IsPaymentModeEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 83
                    if (!isobj6IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj6, obj);
                    }
                }
            }
            private void Update_AddManualVM_PaymentModes(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 83
                    if (!isobj6ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj6, obj, null);
                    }
                }
            }
            private void Update_AddManualVM_PaymentModeHeading(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 83
                    if (!isobj6HeaderDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ComboBox_Header(this.obj6, obj, null);
                    }
                }
            }
            private void Update_AddManualVM_SelectedPaymentMode(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 83
                    if (!isobj6SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj6, obj, null);
                    }
                }
            }
            private void Update_AddManualVM_IsGradeEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 88
                    if (!isobj7IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj7, obj);
                    }
                }
            }
            private void Update_AddManualVM_Grades(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 88
                    if (!isobj7ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj7, obj, null);
                    }
                }
            }
            private void Update_AddManualVM_SelectedGrade(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\AddManual.xaml line 88
                    if (!isobj7SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj7, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_6_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.AddManualVM != null)
                        {
                            this.dataRoot.AddManualVM.SelectedPaymentMode = (global::System.String)this.obj6.SelectedItem;
                        }
                    }
                }
            }
            private void UpdateTwoWay_7_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.AddManualVM != null)
                        {
                            this.dataRoot.AddManualVM.SelectedGrade = (global::System.String)this.obj7.SelectedItem;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class AddManual_obj1_BindingsTracking
            {
                private global::System.WeakReference<AddManual_obj1_Bindings> weakRefToBindingObj; 

                public AddManual_obj1_BindingsTracking(AddManual_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<AddManual_obj1_Bindings>(obj);
                }

                public AddManual_obj1_Bindings TryGetBindingObject()
                {
                    AddManual_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_AddManualVM(null);
                }

                public void PropertyChanged_AddManualVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AddManual_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.AddManualVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.AddManualVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_AddManualVM_CheckUserCanPerformManualSalesCommand(obj.CheckUserCanPerformManualSalesCommand, DATA_CHANGED);
                                bindings.Update_AddManualVM_BackCommand(obj.BackCommand, DATA_CHANGED);
                                bindings.Update_AddManualVM_AddFuelCommand(obj.AddFuelCommand, DATA_CHANGED);
                                bindings.Update_AddManualVM_IsAddFuelEnabled(obj.IsAddFuelEnabled, DATA_CHANGED);
                                bindings.Update_AddManualVM_Title(obj.Title, DATA_CHANGED);
                                bindings.Update_AddManualVM_IsPaymentModeEnabled(obj.IsPaymentModeEnabled, DATA_CHANGED);
                                bindings.Update_AddManualVM_PaymentModes(obj.PaymentModes, DATA_CHANGED);
                                bindings.Update_AddManualVM_PaymentModeHeading(obj.PaymentModeHeading, DATA_CHANGED);
                                bindings.Update_AddManualVM_SelectedPaymentMode(obj.SelectedPaymentMode, DATA_CHANGED);
                                bindings.Update_AddManualVM_IsGradeEnabled(obj.IsGradeEnabled, DATA_CHANGED);
                                bindings.Update_AddManualVM_Grades(obj.Grades, DATA_CHANGED);
                                bindings.Update_AddManualVM_SelectedGrade(obj.SelectedGrade, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CheckUserCanPerformManualSalesCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_CheckUserCanPerformManualSalesCommand(obj.CheckUserCanPerformManualSalesCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BackCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_BackCommand(obj.BackCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AddFuelCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_AddFuelCommand(obj.AddFuelCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAddFuelEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_IsAddFuelEnabled(obj.IsAddFuelEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPaymentModeEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_IsPaymentModeEnabled(obj.IsPaymentModeEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PaymentModes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_PaymentModes(obj.PaymentModes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PaymentModeHeading":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_PaymentModeHeading(obj.PaymentModeHeading, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPaymentMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_SelectedPaymentMode(obj.SelectedPaymentMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsGradeEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_IsGradeEnabled(obj.IsGradeEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Grades":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_Grades(obj.Grades, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedGrade":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AddManualVM_SelectedGrade(obj.SelectedGrade, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.AddManualVM cache_AddManualVM = null;
                public void UpdateChildListeners_AddManualVM(global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.AddManualVM obj)
                {
                    if (obj != cache_AddManualVM)
                    {
                        if (cache_AddManualVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_AddManualVM).PropertyChanged -= PropertyChanged_AddManualVM;
                            cache_AddManualVM = null;
                        }
                        if (obj != null)
                        {
                            cache_AddManualVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_AddManualVM;
                        }
                    }
                }
                public void RegisterTwoWayListener_6(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_7(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\PumpOptions\Fuel Pricing\AddManual.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    AddManual_obj1_Bindings bindings = new AddManual_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

