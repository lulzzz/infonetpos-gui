#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\PumpOptions\Fuel Pricing\Increments.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "A0D161A34E4729BCE809AF0F120704A9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.PumpOptions.Fuel_Pricing
{
    partial class Increments : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(global::MyToolkit.Controls.DataGridTextColumn obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.KeyUpCommand = value;
            }
            public static void Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(global::MyToolkit.Controls.DataGridTextColumn obj, global::System.Boolean value)
            {
                obj.IsEdit = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class Increments_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IIncrements_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.PumpOptions.Fuel_Pricing.Increments dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::WinRT.Triggers.InvokeCommandAction obj2;
            private global::MyToolkit.Controls.DataGrid obj3;
            private global::MyToolkit.Controls.DataGridTextColumn obj4;
            private global::MyToolkit.Controls.DataGridTextColumn obj5;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2CommandDisabled = false;
            private static bool isobj3ItemsSourceDisabled = false;
            private static bool isobj3SelectedItemDisabled = false;
            private static bool isobj4KeyUpCommandDisabled = false;
            private static bool isobj5IsEditDisabled = false;
            private static bool isobj5KeyUpCommandDisabled = false;

            private Increments_obj1_BindingsTracking bindingsTracking;

            public Increments_obj1_Bindings()
            {
                this.bindingsTracking = new Increments_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 16 && columnNumber == 43)
                {
                    isobj2CommandDisabled = true;
                }
                else if (lineNumber == 46 && columnNumber == 28)
                {
                    isobj3ItemsSourceDisabled = true;
                }
                else if (lineNumber == 47 && columnNumber == 28)
                {
                    isobj3SelectedItemDisabled = true;
                }
                else if (lineNumber == 75 && columnNumber == 46)
                {
                    isobj4KeyUpCommandDisabled = true;
                }
                else if (lineNumber == 84 && columnNumber == 46)
                {
                    isobj5IsEditDisabled = true;
                }
                else if (lineNumber == 92 && columnNumber == 46)
                {
                    isobj5KeyUpCommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\PumpOptions\Fuel Pricing\Increments.xaml line 16
                        this.obj2 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 3: // View\PumpOptions\Fuel Pricing\Increments.xaml line 40
                        this.obj3 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // View\PumpOptions\Fuel Pricing\Increments.xaml line 65
                        this.obj4 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 5: // View\PumpOptions\Fuel Pricing\Increments.xaml line 82
                        this.obj5 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IIncrements_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.PumpOptions.Fuel_Pricing.Increments)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.PumpOptions.Fuel_Pricing.Increments obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PriceIncrementsVM(obj.PriceIncrementsVM, phase);
                    }
                }
            }
            private void Update_PriceIncrementsVM(global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.PriceIncrementsVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceIncrementsVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PriceIncrementsVM_LoadPricesCommand(obj.LoadPricesCommand, phase);
                        this.Update_PriceIncrementsVM_Increments(obj.Increments, phase);
                        this.Update_PriceIncrementsVM_SelectedIncrement(obj.SelectedIncrement, phase);
                        this.Update_PriceIncrementsVM_SetIncrementCommand(obj.SetIncrementCommand, phase);
                        this.Update_PriceIncrementsVM_IsCreditEnabled(obj.IsCreditEnabled, phase);
                    }
                }
            }
            private void Update_PriceIncrementsVM_LoadPricesCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\Increments.xaml line 16
                    if (!isobj2CommandDisabled)
                    {
                        XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj2, obj, null);
                    }
                }
            }
            private void Update_PriceIncrementsVM_Increments(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceIncrementsVM_Increments(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\Increments.xaml line 40
                    if (!isobj3ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj3, obj, null);
                    }
                }
            }
            private void Update_PriceIncrementsVM_SelectedIncrement(global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceIncrementsVM_SelectedIncrement(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\Increments.xaml line 40
                    if (!isobj3SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj3, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_PriceIncrementsVM_SetIncrementCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\Increments.xaml line 65
                    if (!isobj4KeyUpCommandDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj4, obj, null);
                    }
                    // View\PumpOptions\Fuel Pricing\Increments.xaml line 82
                    if (!isobj5KeyUpCommandDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj5, obj, null);
                    }
                }
            }
            private void Update_PriceIncrementsVM_IsCreditEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\Increments.xaml line 82
                    if (!isobj5IsEditDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj5, obj);
                    }
                }
            }
            private void UpdateTwoWay_3_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceIncrementsVM != null)
                        {
                            this.dataRoot.PriceIncrementsVM.SelectedIncrement = (global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj3.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class Increments_obj1_BindingsTracking
            {
                private global::System.WeakReference<Increments_obj1_Bindings> weakRefToBindingObj; 

                public Increments_obj1_BindingsTracking(Increments_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<Increments_obj1_Bindings>(obj);
                }

                public Increments_obj1_Bindings TryGetBindingObject()
                {
                    Increments_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_PriceIncrementsVM(null);
                    UpdateChildListeners_PriceIncrementsVM_Increments(null);
                    UpdateChildListeners_PriceIncrementsVM_SelectedIncrement(null);
                }

                public void PropertyChanged_PriceIncrementsVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Increments_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.PriceIncrementsVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.PriceIncrementsVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_PriceIncrementsVM_LoadPricesCommand(obj.LoadPricesCommand, DATA_CHANGED);
                                bindings.Update_PriceIncrementsVM_Increments(obj.Increments, DATA_CHANGED);
                                bindings.Update_PriceIncrementsVM_SelectedIncrement(obj.SelectedIncrement, DATA_CHANGED);
                                bindings.Update_PriceIncrementsVM_SetIncrementCommand(obj.SetIncrementCommand, DATA_CHANGED);
                                bindings.Update_PriceIncrementsVM_IsCreditEnabled(obj.IsCreditEnabled, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "LoadPricesCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceIncrementsVM_LoadPricesCommand(obj.LoadPricesCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Increments":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceIncrementsVM_Increments(obj.Increments, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedIncrement":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceIncrementsVM_SelectedIncrement(obj.SelectedIncrement, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SetIncrementCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceIncrementsVM_SetIncrementCommand(obj.SetIncrementCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCreditEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceIncrementsVM_IsCreditEnabled(obj.IsCreditEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.PriceIncrementsVM cache_PriceIncrementsVM = null;
                public void UpdateChildListeners_PriceIncrementsVM(global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.PriceIncrementsVM obj)
                {
                    if (obj != cache_PriceIncrementsVM)
                    {
                        if (cache_PriceIncrementsVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceIncrementsVM).PropertyChanged -= PropertyChanged_PriceIncrementsVM;
                            cache_PriceIncrementsVM = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceIncrementsVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceIncrementsVM;
                        }
                    }
                }
                public void PropertyChanged_PriceIncrementsVM_Increments(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Increments_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PriceIncrementsVM_Increments(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Increments_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel> cache_PriceIncrementsVM_Increments = null;
                public void UpdateChildListeners_PriceIncrementsVM_Increments(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel> obj)
                {
                    if (obj != cache_PriceIncrementsVM_Increments)
                    {
                        if (cache_PriceIncrementsVM_Increments != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceIncrementsVM_Increments).PropertyChanged -= PropertyChanged_PriceIncrementsVM_Increments;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_PriceIncrementsVM_Increments).CollectionChanged -= CollectionChanged_PriceIncrementsVM_Increments;
                            cache_PriceIncrementsVM_Increments = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceIncrementsVM_Increments = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceIncrementsVM_Increments;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_PriceIncrementsVM_Increments;
                        }
                    }
                }
                public void PropertyChanged_PriceIncrementsVM_SelectedIncrement(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Increments_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel obj = sender as global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel cache_PriceIncrementsVM_SelectedIncrement = null;
                public void UpdateChildListeners_PriceIncrementsVM_SelectedIncrement(global::Infonet.CStoreCommander.UI.Model.FuelPrice.IncrementModel obj)
                {
                    if (obj != cache_PriceIncrementsVM_SelectedIncrement)
                    {
                        if (cache_PriceIncrementsVM_SelectedIncrement != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceIncrementsVM_SelectedIncrement).PropertyChanged -= PropertyChanged_PriceIncrementsVM_SelectedIncrement;
                            cache_PriceIncrementsVM_SelectedIncrement = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceIncrementsVM_SelectedIncrement = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceIncrementsVM_SelectedIncrement;
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\PumpOptions\Fuel Pricing\Increments.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    Increments_obj1_Bindings bindings = new Increments_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

