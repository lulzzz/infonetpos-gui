#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\PumpOptions\TierLevel\TierLevel.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "83142087647EDC440D2D2CC1408B90F9"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.TierLevel
{
    partial class TierLevel : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.BackCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemToAdd(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemToAdd = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedValues(global::MyToolkit.Controls.DataGrid obj, global::System.Collections.Generic.List<global::System.Object> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Collections.Generic.List<global::System.Object>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Collections.Generic.List<global::System.Object>), targetNullValue);
                }
                obj.SelectedValues = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ContentControl_Content(global::Windows.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class TierLevel_obj12_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ITierLevel_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj12;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj12ContentDisabled = false;
            private static bool isobj12CommandParameterDisabled = false;
            private static bool isobj12IsCheckedDisabled = false;

            private TierLevel_obj12_BindingsTracking bindingsTracking;

            public TierLevel_obj12_Bindings()
            {
                this.bindingsTracking = new TierLevel_obj12_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 191 && columnNumber == 35)
                {
                    isobj12ContentDisabled = true;
                }
                else if (lineNumber == 193 && columnNumber == 35)
                {
                    isobj12CommandParameterDisabled = true;
                }
                else if (lineNumber == 194 && columnNumber == 35)
                {
                    isobj12IsCheckedDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 12: // View\PumpOptions\TierLevel\TierLevel.xaml line 191
                        this.obj12 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.CheckBox)target);
                        this.bindingsTracking.RegisterTwoWayListener_12((this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox));
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // ITierLevel_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LevelName(obj.LevelName, phase);
                        this.Update_LevelId(obj.LevelId, phase);
                        this.Update_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_LevelName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 191
                    if (!isobj12ContentDisabled)
                    {
                        if ((this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content((this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox), obj, null);
                        }
                    }
                }
            }
            private void Update_LevelId(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 191
                    if (!isobj12CommandParameterDisabled)
                    {
                        if ((this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter((this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox), obj, null);
                        }
                    }
                }
            }
            private void Update_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 191
                    if (!isobj12IsCheckedDisabled)
                    {
                        if ((this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked((this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox), obj, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_12_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.IsChecked = (this.obj12.Target as global::Windows.UI.Xaml.Controls.CheckBox).IsChecked;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class TierLevel_obj12_BindingsTracking
            {
                private global::System.WeakReference<TierLevel_obj12_Bindings> weakRefToBindingObj; 

                public TierLevel_obj12_BindingsTracking(TierLevel_obj12_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<TierLevel_obj12_Bindings>(obj);
                }

                public TierLevel_obj12_Bindings TryGetBindingObject()
                {
                    TierLevel_obj12_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TierLevel_obj12_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel obj = sender as global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_LevelName(obj.LevelName, DATA_CHANGED);
                                bindings.Update_LevelId(obj.LevelId, DATA_CHANGED);
                                bindings.Update_IsChecked(obj.IsChecked, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "LevelName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LevelName(obj.LevelName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LevelId":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LevelId(obj.LevelId, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsChecked(obj.IsChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel obj)
                {
                    TierLevel_obj12_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_12(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_12_IsChecked();
                        }
                    });
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class TierLevel_obj15_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ITierLevel_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj15;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj15ContentDisabled = false;
            private static bool isobj15CommandParameterDisabled = false;
            private static bool isobj15IsCheckedDisabled = false;

            private TierLevel_obj15_BindingsTracking bindingsTracking;

            public TierLevel_obj15_Bindings()
            {
                this.bindingsTracking = new TierLevel_obj15_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 162 && columnNumber == 35)
                {
                    isobj15ContentDisabled = true;
                }
                else if (lineNumber == 164 && columnNumber == 35)
                {
                    isobj15CommandParameterDisabled = true;
                }
                else if (lineNumber == 165 && columnNumber == 35)
                {
                    isobj15IsCheckedDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 15: // View\PumpOptions\TierLevel\TierLevel.xaml line 162
                        this.obj15 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.CheckBox)target);
                        this.bindingsTracking.RegisterTwoWayListener_15((this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox));
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // ITierLevel_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_TierName(obj.TierName, phase);
                        this.Update_TierId(obj.TierId, phase);
                        this.Update_IsChecked(obj.IsChecked, phase);
                    }
                }
            }
            private void Update_TierName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 162
                    if (!isobj15ContentDisabled)
                    {
                        if ((this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ContentControl_Content((this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox), obj, null);
                        }
                    }
                }
            }
            private void Update_TierId(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 162
                    if (!isobj15CommandParameterDisabled)
                    {
                        if ((this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter((this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox), obj, null);
                        }
                    }
                }
            }
            private void Update_IsChecked(global::System.Nullable<global::System.Boolean> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 162
                    if (!isobj15IsCheckedDisabled)
                    {
                        if ((this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox) != null)
                        {
                            XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked((this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox), obj, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_15_IsChecked()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        this.dataRoot.IsChecked = (this.obj15.Target as global::Windows.UI.Xaml.Controls.CheckBox).IsChecked;
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class TierLevel_obj15_BindingsTracking
            {
                private global::System.WeakReference<TierLevel_obj15_Bindings> weakRefToBindingObj; 

                public TierLevel_obj15_BindingsTracking(TierLevel_obj15_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<TierLevel_obj15_Bindings>(obj);
                }

                public TierLevel_obj15_Bindings TryGetBindingObject()
                {
                    TierLevel_obj15_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TierLevel_obj15_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel obj = sender as global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_TierName(obj.TierName, DATA_CHANGED);
                                bindings.Update_TierId(obj.TierId, DATA_CHANGED);
                                bindings.Update_IsChecked(obj.IsChecked, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "TierName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierName(obj.TierName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TierId":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierId(obj.TierId, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_IsChecked(obj.IsChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel obj)
                {
                    TierLevel_obj15_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
                public void RegisterTwoWayListener_15(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_IsChecked();
                        }
                    });
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class TierLevel_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ITierLevel_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.TierLevel.TierLevel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj5;
            private global::Windows.UI.Xaml.Controls.TextBlock obj6;
            private global::MyToolkit.Controls.DataGrid obj7;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj8;
            private global::Windows.UI.Xaml.Controls.ListView obj9;
            private global::Windows.UI.Xaml.Controls.ListView obj10;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj5BackCommandDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj7ItemToAddDisabled = false;
            private static bool isobj7SelectedValuesDisabled = false;
            private static bool isobj8IsEnabledDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj9ItemsSourceDisabled = false;
            private static bool isobj10ItemsSourceDisabled = false;

            private TierLevel_obj1_BindingsTracking bindingsTracking;

            public TierLevel_obj1_Bindings()
            {
                this.bindingsTracking = new TierLevel_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 71 && columnNumber == 30)
                {
                    isobj5BackCommandDisabled = true;
                }
                else if (lineNumber == 73 && columnNumber == 20)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 89 && columnNumber == 28)
                {
                    isobj7ItemToAddDisabled = true;
                }
                else if (lineNumber == 90 && columnNumber == 28)
                {
                    isobj7SelectedValuesDisabled = true;
                }
                else if (lineNumber == 214 && columnNumber == 35)
                {
                    isobj8IsEnabledDisabled = true;
                }
                else if (lineNumber == 216 && columnNumber == 35)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 153 && columnNumber == 23)
                {
                    isobj9ItemsSourceDisabled = true;
                }
                else if (lineNumber == 182 && columnNumber == 23)
                {
                    isobj10ItemsSourceDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 5: // View\PumpOptions\TierLevel\TierLevel.xaml line 70
                        this.obj5 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 6: // View\PumpOptions\TierLevel\TierLevel.xaml line 73
                        this.obj6 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 7: // View\PumpOptions\TierLevel\TierLevel.xaml line 82
                        this.obj7 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_7(this.obj7);
                        break;
                    case 8: // View\PumpOptions\TierLevel\TierLevel.xaml line 211
                        this.obj8 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 9: // View\PumpOptions\TierLevel\TierLevel.xaml line 153
                        this.obj9 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 10: // View\PumpOptions\TierLevel\TierLevel.xaml line 182
                        this.obj10 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // ITierLevel_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.TierLevel.TierLevel)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.TierLevel.TierLevel obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_TierLevelVM(obj.TierLevelVM, phase);
                    }
                }
            }
            private void Update_TierLevelVM(global::Infonet.CStoreCommander.UI.ViewModel.TierLevelVM.TierLevelVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_TierLevelVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_TierLevelVM_BackPageCommand(obj.BackPageCommand, phase);
                        this.Update_TierLevelVM_TierlevelModel(obj.TierlevelModel, phase);
                        this.Update_TierLevelVM_PumpTierModelToAdd(obj.PumpTierModelToAdd, phase);
                        this.Update_TierLevelVM_SelectedTierList(obj.SelectedTierList, phase);
                        this.Update_TierLevelVM_IsSetButtonEnable(obj.IsSetButtonEnable, phase);
                        this.Update_TierLevelVM_UpdateTierLevelCommand(obj.UpdateTierLevelCommand, phase);
                    }
                }
            }
            private void Update_TierLevelVM_BackPageCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 70
                    if (!isobj5BackCommandDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(this.obj5, obj, null);
                    }
                }
            }
            private void Update_TierLevelVM_TierlevelModel(global::Infonet.CStoreCommander.UI.Model.FuelPump.TierLevelModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_TierLevelVM_TierlevelModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_TierLevelVM_TierlevelModel_PageCaption(obj.PageCaption, phase);
                        this.Update_TierLevelVM_TierlevelModel_Tiers(obj.Tiers, phase);
                        this.Update_TierLevelVM_TierlevelModel_Levels(obj.Levels, phase);
                    }
                }
            }
            private void Update_TierLevelVM_TierlevelModel_PageCaption(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 73
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                }
            }
            private void Update_TierLevelVM_PumpTierModelToAdd(global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_TierLevelVM_PumpTierModelToAdd(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 82
                    if (!isobj7ItemToAddDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemToAdd(this.obj7, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_TierLevelVM_SelectedTierList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_TierLevelVM_SelectedTierList(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 82
                    if (!isobj7SelectedValuesDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedValues(this.obj7, (global::System.Collections.Generic.List<global::System.Object>)this.LookupConverter("TierLevelListConverter").Convert(obj, typeof(global::System.Collections.Generic.List<global::System.Object>), null, null), null);
                    }
                }
            }
            private void Update_TierLevelVM_IsSetButtonEnable(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 211
                    if (!isobj8IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj8, obj);
                    }
                }
            }
            private void Update_TierLevelVM_UpdateTierLevelCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 211
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_TierLevelVM_TierlevelModel_Tiers(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_TierLevelVM_TierlevelModel_Tiers(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 153
                    if (!isobj9ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj9, obj, null);
                    }
                }
            }
            private void Update_TierLevelVM_TierlevelModel_Levels(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_TierLevelVM_TierlevelModel_Levels(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\TierLevel\TierLevel.xaml line 182
                    if (!isobj10ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj10, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_7_SelectedValues()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.TierLevelVM != null)
                        {
                            this.dataRoot.TierLevelVM.SelectedTierList = (global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel>)this.LookupConverter("TierLevelListConverter").ConvertBack(this.obj7.SelectedValues, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel>), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class TierLevel_obj1_BindingsTracking
            {
                private global::System.WeakReference<TierLevel_obj1_Bindings> weakRefToBindingObj; 

                public TierLevel_obj1_BindingsTracking(TierLevel_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<TierLevel_obj1_Bindings>(obj);
                }

                public TierLevel_obj1_Bindings TryGetBindingObject()
                {
                    TierLevel_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_TierLevelVM(null);
                    UpdateChildListeners_TierLevelVM_TierlevelModel(null);
                    UpdateChildListeners_TierLevelVM_PumpTierModelToAdd(null);
                    UpdateChildListeners_TierLevelVM_SelectedTierList(null);
                    UpdateChildListeners_TierLevelVM_TierlevelModel_Tiers(null);
                    UpdateChildListeners_TierLevelVM_TierlevelModel_Levels(null);
                }

                public void PropertyChanged_TierLevelVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.TierLevelVM.TierLevelVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.TierLevelVM.TierLevelVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_TierLevelVM_BackPageCommand(obj.BackPageCommand, DATA_CHANGED);
                                bindings.Update_TierLevelVM_TierlevelModel(obj.TierlevelModel, DATA_CHANGED);
                                bindings.Update_TierLevelVM_PumpTierModelToAdd(obj.PumpTierModelToAdd, DATA_CHANGED);
                                bindings.Update_TierLevelVM_SelectedTierList(obj.SelectedTierList, DATA_CHANGED);
                                bindings.Update_TierLevelVM_IsSetButtonEnable(obj.IsSetButtonEnable, DATA_CHANGED);
                                bindings.Update_TierLevelVM_UpdateTierLevelCommand(obj.UpdateTierLevelCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "BackPageCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_BackPageCommand(obj.BackPageCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TierlevelModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_TierlevelModel(obj.TierlevelModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PumpTierModelToAdd":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_PumpTierModelToAdd(obj.PumpTierModelToAdd, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedTierList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_SelectedTierList(obj.SelectedTierList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSetButtonEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_IsSetButtonEnable(obj.IsSetButtonEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UpdateTierLevelCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_UpdateTierLevelCommand(obj.UpdateTierLevelCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.TierLevelVM.TierLevelVM cache_TierLevelVM = null;
                public void UpdateChildListeners_TierLevelVM(global::Infonet.CStoreCommander.UI.ViewModel.TierLevelVM.TierLevelVM obj)
                {
                    if (obj != cache_TierLevelVM)
                    {
                        if (cache_TierLevelVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_TierLevelVM).PropertyChanged -= PropertyChanged_TierLevelVM;
                            cache_TierLevelVM = null;
                        }
                        if (obj != null)
                        {
                            cache_TierLevelVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_TierLevelVM;
                        }
                    }
                }
                public void PropertyChanged_TierLevelVM_TierlevelModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.FuelPump.TierLevelModel obj = sender as global::Infonet.CStoreCommander.UI.Model.FuelPump.TierLevelModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_TierLevelVM_TierlevelModel_PageCaption(obj.PageCaption, DATA_CHANGED);
                                bindings.Update_TierLevelVM_TierlevelModel_Tiers(obj.Tiers, DATA_CHANGED);
                                bindings.Update_TierLevelVM_TierlevelModel_Levels(obj.Levels, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "PageCaption":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_TierlevelModel_PageCaption(obj.PageCaption, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Tiers":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_TierlevelModel_Tiers(obj.Tiers, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Levels":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_TierLevelVM_TierlevelModel_Levels(obj.Levels, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.FuelPump.TierLevelModel cache_TierLevelVM_TierlevelModel = null;
                public void UpdateChildListeners_TierLevelVM_TierlevelModel(global::Infonet.CStoreCommander.UI.Model.FuelPump.TierLevelModel obj)
                {
                    if (obj != cache_TierLevelVM_TierlevelModel)
                    {
                        if (cache_TierLevelVM_TierlevelModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_TierLevelVM_TierlevelModel).PropertyChanged -= PropertyChanged_TierLevelVM_TierlevelModel;
                            cache_TierLevelVM_TierlevelModel = null;
                        }
                        if (obj != null)
                        {
                            cache_TierLevelVM_TierlevelModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_TierLevelVM_TierlevelModel;
                        }
                    }
                }
                public void PropertyChanged_TierLevelVM_PumpTierModelToAdd(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel obj = sender as global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel cache_TierLevelVM_PumpTierModelToAdd = null;
                public void UpdateChildListeners_TierLevelVM_PumpTierModelToAdd(global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel obj)
                {
                    if (obj != cache_TierLevelVM_PumpTierModelToAdd)
                    {
                        if (cache_TierLevelVM_PumpTierModelToAdd != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_TierLevelVM_PumpTierModelToAdd).PropertyChanged -= PropertyChanged_TierLevelVM_PumpTierModelToAdd;
                            cache_TierLevelVM_PumpTierModelToAdd = null;
                        }
                        if (obj != null)
                        {
                            cache_TierLevelVM_PumpTierModelToAdd = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_TierLevelVM_PumpTierModelToAdd;
                        }
                    }
                }
                public void PropertyChanged_TierLevelVM_SelectedTierList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_TierLevelVM_SelectedTierList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel> cache_TierLevelVM_SelectedTierList = null;
                public void UpdateChildListeners_TierLevelVM_SelectedTierList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.PumpTierLevelModel> obj)
                {
                    if (obj != cache_TierLevelVM_SelectedTierList)
                    {
                        if (cache_TierLevelVM_SelectedTierList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_TierLevelVM_SelectedTierList).PropertyChanged -= PropertyChanged_TierLevelVM_SelectedTierList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_TierLevelVM_SelectedTierList).CollectionChanged -= CollectionChanged_TierLevelVM_SelectedTierList;
                            cache_TierLevelVM_SelectedTierList = null;
                        }
                        if (obj != null)
                        {
                            cache_TierLevelVM_SelectedTierList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_TierLevelVM_SelectedTierList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_TierLevelVM_SelectedTierList;
                        }
                    }
                }
                public void PropertyChanged_TierLevelVM_TierlevelModel_Tiers(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_TierLevelVM_TierlevelModel_Tiers(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel> cache_TierLevelVM_TierlevelModel_Tiers = null;
                public void UpdateChildListeners_TierLevelVM_TierlevelModel_Tiers(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.TierModel> obj)
                {
                    if (obj != cache_TierLevelVM_TierlevelModel_Tiers)
                    {
                        if (cache_TierLevelVM_TierlevelModel_Tiers != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_TierLevelVM_TierlevelModel_Tiers).PropertyChanged -= PropertyChanged_TierLevelVM_TierlevelModel_Tiers;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_TierLevelVM_TierlevelModel_Tiers).CollectionChanged -= CollectionChanged_TierLevelVM_TierlevelModel_Tiers;
                            cache_TierLevelVM_TierlevelModel_Tiers = null;
                        }
                        if (obj != null)
                        {
                            cache_TierLevelVM_TierlevelModel_Tiers = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_TierLevelVM_TierlevelModel_Tiers;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_TierLevelVM_TierlevelModel_Tiers;
                        }
                    }
                }
                public void PropertyChanged_TierLevelVM_TierlevelModel_Levels(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_TierLevelVM_TierlevelModel_Levels(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    TierLevel_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel> cache_TierLevelVM_TierlevelModel_Levels = null;
                public void UpdateChildListeners_TierLevelVM_TierlevelModel_Levels(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.LevelModel> obj)
                {
                    if (obj != cache_TierLevelVM_TierlevelModel_Levels)
                    {
                        if (cache_TierLevelVM_TierlevelModel_Levels != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_TierLevelVM_TierlevelModel_Levels).PropertyChanged -= PropertyChanged_TierLevelVM_TierlevelModel_Levels;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_TierLevelVM_TierlevelModel_Levels).CollectionChanged -= CollectionChanged_TierLevelVM_TierlevelModel_Levels;
                            cache_TierLevelVM_TierlevelModel_Levels = null;
                        }
                        if (obj != null)
                        {
                            cache_TierLevelVM_TierlevelModel_Levels = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_TierLevelVM_TierlevelModel_Levels;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_TierLevelVM_TierlevelModel_Levels;
                        }
                    }
                }
                public void RegisterTwoWayListener_7(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedValuesProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_7_SelectedValues();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 4: // View\PumpOptions\TierLevel\TierLevel.xaml line 59
                {
                    this.RootGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 17: // View\PumpOptions\TierLevel\TierLevel.xaml line 131
                {
                    this.txtLevel = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18: // View\PumpOptions\TierLevel\TierLevel.xaml line 117
                {
                    this.txtTier = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 19: // View\PumpOptions\TierLevel\TierLevel.xaml line 103
                {
                    this.txtPump = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\PumpOptions\TierLevel\TierLevel.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    TierLevel_obj1_Bindings bindings = new TierLevel_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            case 12: // View\PumpOptions\TierLevel\TierLevel.xaml line 191
                {                    
                    global::Windows.UI.Xaml.Controls.CheckBox element12 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                    TierLevel_obj12_Bindings bindings = new TierLevel_obj12_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element12.DataContext);
                    element12.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element12, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element12, bindings);
                }
                break;
            case 15: // View\PumpOptions\TierLevel\TierLevel.xaml line 162
                {                    
                    global::Windows.UI.Xaml.Controls.CheckBox element15 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                    TierLevel_obj15_Bindings bindings = new TierLevel_obj15_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element15.DataContext);
                    element15.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element15, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element15, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

