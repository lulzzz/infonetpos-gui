#pragma checksum "F:\infonetpos\infonetpos-gui\Infonet.CStoreCommander.UI\View\Reprint\Reprint.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "F0D6101914978681F2C9A21381F0CA86"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Reprint
{
    partial class Reprint : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj, global::System.DateTimeOffset value)
            {
                obj.SelectedDate = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_PasswordBox_Password(global::Windows.UI.Xaml.Controls.PasswordBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class Reprint_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IReprint_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Reprint.Reprint dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::MyToolkit.Controls.DataGrid obj2;
            private global::MyToolkit.Controls.DataGrid obj3;
            private global::MyToolkit.Controls.DataGrid obj4;
            private global::MyToolkit.Controls.DataGrid obj5;
            private global::Windows.UI.Xaml.Controls.ComboBox obj8;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj9;
            private global::Windows.UI.Xaml.Controls.PasswordBox obj10;
            private global::WinRT.Triggers.InvokeCommandAction obj11;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2SelectedItemDisabled = false;
            private static bool isobj2ItemsSourceDisabled = false;
            private static bool isobj2VisibilityDisabled = false;
            private static bool isobj3SelectedItemDisabled = false;
            private static bool isobj3ItemsSourceDisabled = false;
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj4SelectedItemDisabled = false;
            private static bool isobj4ItemsSourceDisabled = false;
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5SelectedItemDisabled = false;
            private static bool isobj5ItemsSourceDisabled = false;
            private static bool isobj5VisibilityDisabled = false;
            private static bool isobj8ItemsSourceDisabled = false;
            private static bool isobj8SelectedIndexDisabled = false;
            private static bool isobj9VisibilityDisabled = false;
            private static bool isobj9SelectedDateDisabled = false;
            private static bool isobj10VisibilityDisabled = false;
            private static bool isobj10PasswordDisabled = false;
            private static bool isobj11CommandDisabled = false;

            private Reprint_obj1_BindingsTracking bindingsTracking;

            public Reprint_obj1_Bindings()
            {
                this.bindingsTracking = new Reprint_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 128 && columnNumber == 28)
                {
                    isobj2SelectedItemDisabled = true;
                }
                else if (lineNumber == 129 && columnNumber == 28)
                {
                    isobj2ItemsSourceDisabled = true;
                }
                else if (lineNumber == 130 && columnNumber == 28)
                {
                    isobj2VisibilityDisabled = true;
                }
                else if (lineNumber == 209 && columnNumber == 28)
                {
                    isobj3SelectedItemDisabled = true;
                }
                else if (lineNumber == 210 && columnNumber == 28)
                {
                    isobj3ItemsSourceDisabled = true;
                }
                else if (lineNumber == 211 && columnNumber == 28)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 311 && columnNumber == 28)
                {
                    isobj4SelectedItemDisabled = true;
                }
                else if (lineNumber == 312 && columnNumber == 28)
                {
                    isobj4ItemsSourceDisabled = true;
                }
                else if (lineNumber == 313 && columnNumber == 28)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 377 && columnNumber == 28)
                {
                    isobj5SelectedItemDisabled = true;
                }
                else if (lineNumber == 378 && columnNumber == 28)
                {
                    isobj5ItemsSourceDisabled = true;
                }
                else if (lineNumber == 379 && columnNumber == 28)
                {
                    isobj5VisibilityDisabled = true;
                }
                else if (lineNumber == 75 && columnNumber == 23)
                {
                    isobj8ItemsSourceDisabled = true;
                }
                else if (lineNumber == 76 && columnNumber == 23)
                {
                    isobj8SelectedIndexDisabled = true;
                }
                else if (lineNumber == 93 && columnNumber == 50)
                {
                    isobj9VisibilityDisabled = true;
                }
                else if (lineNumber == 96 && columnNumber == 50)
                {
                    isobj9SelectedDateDisabled = true;
                }
                else if (lineNumber == 105 && columnNumber == 26)
                {
                    isobj10VisibilityDisabled = true;
                }
                else if (lineNumber == 106 && columnNumber == 26)
                {
                    isobj10PasswordDisabled = true;
                }
                else if (lineNumber == 110 && columnNumber == 55)
                {
                    isobj11CommandDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\Reprint\Reprint.xaml line 121
                        this.obj2 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // View\Reprint\Reprint.xaml line 202
                        this.obj3 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // View\Reprint\Reprint.xaml line 304
                        this.obj4 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // View\Reprint\Reprint.xaml line 370
                        this.obj5 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 8: // View\Reprint\Reprint.xaml line 71
                        this.obj8 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_8(this.obj8);
                        break;
                    case 9: // View\Reprint\Reprint.xaml line 91
                        this.obj9 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        this.bindingsTracking.RegisterTwoWayListener_9(this.obj9);
                        break;
                    case 10: // View\Reprint\Reprint.xaml line 102
                        this.obj10 = (global::Windows.UI.Xaml.Controls.PasswordBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_10(this.obj10);
                        break;
                    case 11: // View\Reprint\Reprint.xaml line 110
                        this.obj11 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IReprint_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Reprint.Reprint)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Reprint.Reprint obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ReprintVM(obj.ReprintVM, phase);
                    }
                }
            }
            private void Update_ReprintVM(global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ReprintVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ReprintVM_SelectedPaymentInsideSale(obj.SelectedPaymentInsideSale, phase);
                        this.Update_ReprintVM_PayInsideSales(obj.PayInsideSales, phase);
                        this.Update_ReprintVM_IsPayInsideSaleVisible(obj.IsPayInsideSaleVisible, phase);
                        this.Update_ReprintVM_SelectedPayAtPumpSale(obj.SelectedPayAtPumpSale, phase);
                        this.Update_ReprintVM_PayAtPumpSales(obj.PayAtPumpSales, phase);
                        this.Update_ReprintVM_IsPayAtPumpSaleVisible(obj.IsPayAtPumpSaleVisible, phase);
                        this.Update_ReprintVM_SelectedPaymentSale(obj.SelectedPaymentSale, phase);
                        this.Update_ReprintVM_PaymentSales(obj.PaymentSales, phase);
                        this.Update_ReprintVM_IsPaymentSaleVisible(obj.IsPaymentSaleVisible, phase);
                        this.Update_ReprintVM_SelectedCloseBatchSale(obj.SelectedCloseBatchSale, phase);
                        this.Update_ReprintVM_CloseBatchSales(obj.CloseBatchSales, phase);
                        this.Update_ReprintVM_IsCloseBatchSaleVisible(obj.IsCloseBatchSaleVisible, phase);
                        this.Update_ReprintVM_ReportTypes(obj.ReportTypes, phase);
                        this.Update_ReprintVM_SelectedReportIndex(obj.SelectedReportIndex, phase);
                        this.Update_ReprintVM_IsDateEnabled(obj.IsDateEnabled, phase);
                        this.Update_ReprintVM_SelectedDate(obj.SelectedDate, phase);
                        this.Update_ReprintVM_IsSearchBoxVisible(obj.IsSearchBoxVisible, phase);
                        this.Update_ReprintVM_SearchSaleNumber(obj.SearchSaleNumber, phase);
                        this.Update_ReprintVM_SearchBySaleNumberCommand(obj.SearchBySaleNumberCommand, phase);
                    }
                }
            }
            private void Update_ReprintVM_SelectedPaymentInsideSale(global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 121
                    if (!isobj2SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj2, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_ReprintVM_PayInsideSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ReprintVM_PayInsideSales(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 121
                    if (!isobj2ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj2, obj, null);
                    }
                }
            }
            private void Update_ReprintVM_IsPayInsideSaleVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 121
                    if (!isobj2VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj2, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ReprintVM_SelectedPayAtPumpSale(global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 202
                    if (!isobj3SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj3, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_ReprintVM_PayAtPumpSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ReprintVM_PayAtPumpSales(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 202
                    if (!isobj3ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj3, obj, null);
                    }
                }
            }
            private void Update_ReprintVM_IsPayAtPumpSaleVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 202
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ReprintVM_SelectedPaymentSale(global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 304
                    if (!isobj4SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj4, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_ReprintVM_PaymentSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ReprintVM_PaymentSales(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 304
                    if (!isobj4ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj4, obj, null);
                    }
                }
            }
            private void Update_ReprintVM_IsPaymentSaleVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 304
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ReprintVM_SelectedCloseBatchSale(global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 370
                    if (!isobj5SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj5, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                }
            }
            private void Update_ReprintVM_CloseBatchSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ReprintVM_CloseBatchSales(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 370
                    if (!isobj5ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj5, obj, null);
                    }
                }
            }
            private void Update_ReprintVM_IsCloseBatchSaleVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 370
                    if (!isobj5VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ReprintVM_ReportTypes(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ReprintVM_ReportTypes(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 71
                    if (!isobj8ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ReprintVM_SelectedReportIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 71
                    if (!isobj8SelectedIndexDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj8, obj);
                    }
                }
            }
            private void Update_ReprintVM_IsDateEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 91
                    if (!isobj9VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ReprintVM_SelectedDate(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 91
                    if (!isobj9SelectedDateDisabled)
                    {
                        XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj9, obj);
                    }
                }
            }
            private void Update_ReprintVM_IsSearchBoxVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 102
                    if (!isobj10VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ReprintVM_SearchSaleNumber(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 102
                    if (!isobj10PasswordDisabled)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_Password(this.obj10, obj, null);
                    }
                }
            }
            private void Update_ReprintVM_SearchBySaleNumberCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Reprint\Reprint.xaml line 110
                    if (!isobj11CommandDisabled)
                    {
                        XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj11, obj, null);
                    }
                }
            }
            private void UpdateTwoWay_2_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ReprintVM != null)
                        {
                            this.dataRoot.ReprintVM.SelectedPaymentInsideSale = (global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj2.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_3_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ReprintVM != null)
                        {
                            this.dataRoot.ReprintVM.SelectedPayAtPumpSale = (global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj3.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_4_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ReprintVM != null)
                        {
                            this.dataRoot.ReprintVM.SelectedPaymentSale = (global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj4.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_5_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ReprintVM != null)
                        {
                            this.dataRoot.ReprintVM.SelectedCloseBatchSale = (global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj5.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_8_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ReprintVM != null)
                        {
                            this.dataRoot.ReprintVM.SelectedReportIndex = this.obj8.SelectedIndex;
                        }
                    }
                }
            }
            private void UpdateTwoWay_9_SelectedDate()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ReprintVM != null)
                        {
                            this.dataRoot.ReprintVM.SelectedDate = this.obj9.SelectedDate;
                        }
                    }
                }
            }
            private void UpdateTwoWay_10_Password()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ReprintVM != null)
                        {
                            this.dataRoot.ReprintVM.SearchSaleNumber = this.obj10.Password;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class Reprint_obj1_BindingsTracking
            {
                private global::System.WeakReference<Reprint_obj1_Bindings> weakRefToBindingObj; 

                public Reprint_obj1_BindingsTracking(Reprint_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<Reprint_obj1_Bindings>(obj);
                }

                public Reprint_obj1_Bindings TryGetBindingObject()
                {
                    Reprint_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ReprintVM(null);
                    UpdateChildListeners_ReprintVM_PayInsideSales(null);
                    UpdateChildListeners_ReprintVM_PayAtPumpSales(null);
                    UpdateChildListeners_ReprintVM_PaymentSales(null);
                    UpdateChildListeners_ReprintVM_CloseBatchSales(null);
                    UpdateChildListeners_ReprintVM_ReportTypes(null);
                }

                public void PropertyChanged_ReprintVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ReprintVM_SelectedPaymentInsideSale(obj.SelectedPaymentInsideSale, DATA_CHANGED);
                                bindings.Update_ReprintVM_PayInsideSales(obj.PayInsideSales, DATA_CHANGED);
                                bindings.Update_ReprintVM_IsPayInsideSaleVisible(obj.IsPayInsideSaleVisible, DATA_CHANGED);
                                bindings.Update_ReprintVM_SelectedPayAtPumpSale(obj.SelectedPayAtPumpSale, DATA_CHANGED);
                                bindings.Update_ReprintVM_PayAtPumpSales(obj.PayAtPumpSales, DATA_CHANGED);
                                bindings.Update_ReprintVM_IsPayAtPumpSaleVisible(obj.IsPayAtPumpSaleVisible, DATA_CHANGED);
                                bindings.Update_ReprintVM_SelectedPaymentSale(obj.SelectedPaymentSale, DATA_CHANGED);
                                bindings.Update_ReprintVM_PaymentSales(obj.PaymentSales, DATA_CHANGED);
                                bindings.Update_ReprintVM_IsPaymentSaleVisible(obj.IsPaymentSaleVisible, DATA_CHANGED);
                                bindings.Update_ReprintVM_SelectedCloseBatchSale(obj.SelectedCloseBatchSale, DATA_CHANGED);
                                bindings.Update_ReprintVM_CloseBatchSales(obj.CloseBatchSales, DATA_CHANGED);
                                bindings.Update_ReprintVM_IsCloseBatchSaleVisible(obj.IsCloseBatchSaleVisible, DATA_CHANGED);
                                bindings.Update_ReprintVM_ReportTypes(obj.ReportTypes, DATA_CHANGED);
                                bindings.Update_ReprintVM_SelectedReportIndex(obj.SelectedReportIndex, DATA_CHANGED);
                                bindings.Update_ReprintVM_IsDateEnabled(obj.IsDateEnabled, DATA_CHANGED);
                                bindings.Update_ReprintVM_SelectedDate(obj.SelectedDate, DATA_CHANGED);
                                bindings.Update_ReprintVM_IsSearchBoxVisible(obj.IsSearchBoxVisible, DATA_CHANGED);
                                bindings.Update_ReprintVM_SearchSaleNumber(obj.SearchSaleNumber, DATA_CHANGED);
                                bindings.Update_ReprintVM_SearchBySaleNumberCommand(obj.SearchBySaleNumberCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SelectedPaymentInsideSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedPaymentInsideSale(obj.SelectedPaymentInsideSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PayInsideSales":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_PayInsideSales(obj.PayInsideSales, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPayInsideSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsPayInsideSaleVisible(obj.IsPayInsideSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPayAtPumpSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedPayAtPumpSale(obj.SelectedPayAtPumpSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PayAtPumpSales":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_PayAtPumpSales(obj.PayAtPumpSales, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPayAtPumpSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsPayAtPumpSaleVisible(obj.IsPayAtPumpSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPaymentSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedPaymentSale(obj.SelectedPaymentSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PaymentSales":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_PaymentSales(obj.PaymentSales, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPaymentSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsPaymentSaleVisible(obj.IsPaymentSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedCloseBatchSale":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedCloseBatchSale(obj.SelectedCloseBatchSale, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CloseBatchSales":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_CloseBatchSales(obj.CloseBatchSales, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCloseBatchSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsCloseBatchSaleVisible(obj.IsCloseBatchSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReportTypes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_ReportTypes(obj.ReportTypes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedReportIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedReportIndex(obj.SelectedReportIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDateEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsDateEnabled(obj.IsDateEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SelectedDate(obj.SelectedDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSearchBoxVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_IsSearchBoxVisible(obj.IsSearchBoxVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchSaleNumber":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SearchSaleNumber(obj.SearchSaleNumber, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchBySaleNumberCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ReprintVM_SearchBySaleNumberCommand(obj.SearchBySaleNumberCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM cache_ReprintVM = null;
                public void UpdateChildListeners_ReprintVM(global::Infonet.CStoreCommander.UI.ViewModel.Reprint.ReprintVM obj)
                {
                    if (obj != cache_ReprintVM)
                    {
                        if (cache_ReprintVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ReprintVM).PropertyChanged -= PropertyChanged_ReprintVM;
                            cache_ReprintVM = null;
                        }
                        if (obj != null)
                        {
                            cache_ReprintVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ReprintVM;
                        }
                    }
                }
                public void PropertyChanged_ReprintVM_PayInsideSales(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_PayInsideSales(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel> cache_ReprintVM_PayInsideSales = null;
                public void UpdateChildListeners_ReprintVM_PayInsideSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayInsideSalesModel> obj)
                {
                    if (obj != cache_ReprintVM_PayInsideSales)
                    {
                        if (cache_ReprintVM_PayInsideSales != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ReprintVM_PayInsideSales).PropertyChanged -= PropertyChanged_ReprintVM_PayInsideSales;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ReprintVM_PayInsideSales).CollectionChanged -= CollectionChanged_ReprintVM_PayInsideSales;
                            cache_ReprintVM_PayInsideSales = null;
                        }
                        if (obj != null)
                        {
                            cache_ReprintVM_PayInsideSales = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ReprintVM_PayInsideSales;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ReprintVM_PayInsideSales;
                        }
                    }
                }
                public void PropertyChanged_ReprintVM_PayAtPumpSales(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_PayAtPumpSales(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel> cache_ReprintVM_PayAtPumpSales = null;
                public void UpdateChildListeners_ReprintVM_PayAtPumpSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PayAtPumpSaleModel> obj)
                {
                    if (obj != cache_ReprintVM_PayAtPumpSales)
                    {
                        if (cache_ReprintVM_PayAtPumpSales != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ReprintVM_PayAtPumpSales).PropertyChanged -= PropertyChanged_ReprintVM_PayAtPumpSales;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ReprintVM_PayAtPumpSales).CollectionChanged -= CollectionChanged_ReprintVM_PayAtPumpSales;
                            cache_ReprintVM_PayAtPumpSales = null;
                        }
                        if (obj != null)
                        {
                            cache_ReprintVM_PayAtPumpSales = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ReprintVM_PayAtPumpSales;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ReprintVM_PayAtPumpSales;
                        }
                    }
                }
                public void PropertyChanged_ReprintVM_PaymentSales(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_PaymentSales(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel> cache_ReprintVM_PaymentSales = null;
                public void UpdateChildListeners_ReprintVM_PaymentSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.PaymentSalesModel> obj)
                {
                    if (obj != cache_ReprintVM_PaymentSales)
                    {
                        if (cache_ReprintVM_PaymentSales != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ReprintVM_PaymentSales).PropertyChanged -= PropertyChanged_ReprintVM_PaymentSales;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ReprintVM_PaymentSales).CollectionChanged -= CollectionChanged_ReprintVM_PaymentSales;
                            cache_ReprintVM_PaymentSales = null;
                        }
                        if (obj != null)
                        {
                            cache_ReprintVM_PaymentSales = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ReprintVM_PaymentSales;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ReprintVM_PaymentSales;
                        }
                    }
                }
                public void PropertyChanged_ReprintVM_CloseBatchSales(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_CloseBatchSales(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel> cache_ReprintVM_CloseBatchSales = null;
                public void UpdateChildListeners_ReprintVM_CloseBatchSales(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.CloseBatchSalesModel> obj)
                {
                    if (obj != cache_ReprintVM_CloseBatchSales)
                    {
                        if (cache_ReprintVM_CloseBatchSales != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ReprintVM_CloseBatchSales).PropertyChanged -= PropertyChanged_ReprintVM_CloseBatchSales;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ReprintVM_CloseBatchSales).CollectionChanged -= CollectionChanged_ReprintVM_CloseBatchSales;
                            cache_ReprintVM_CloseBatchSales = null;
                        }
                        if (obj != null)
                        {
                            cache_ReprintVM_CloseBatchSales = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ReprintVM_CloseBatchSales;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ReprintVM_CloseBatchSales;
                        }
                    }
                }
                public void PropertyChanged_ReprintVM_ReportTypes(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ReprintVM_ReportTypes(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    Reprint_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel> cache_ReprintVM_ReportTypes = null;
                public void UpdateChildListeners_ReprintVM_ReportTypes(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Reprint.ReportTypesModel> obj)
                {
                    if (obj != cache_ReprintVM_ReportTypes)
                    {
                        if (cache_ReprintVM_ReportTypes != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ReprintVM_ReportTypes).PropertyChanged -= PropertyChanged_ReprintVM_ReportTypes;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ReprintVM_ReportTypes).CollectionChanged -= CollectionChanged_ReprintVM_ReportTypes;
                            cache_ReprintVM_ReportTypes = null;
                        }
                        if (obj != null)
                        {
                            cache_ReprintVM_ReportTypes = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ReprintVM_ReportTypes;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ReprintVM_ReportTypes;
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_3(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_4(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_8(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_8_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_9(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker.SelectedDateProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_9_SelectedDate();
                        }
                    });
                }
                public void RegisterTwoWayListener_10(global::Windows.UI.Xaml.Controls.PasswordBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_Password();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // View\Reprint\Reprint.xaml line 121
                {
                    this.PayInside = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 3: // View\Reprint\Reprint.xaml line 202
                {
                    this.PayAtPump = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 4: // View\Reprint\Reprint.xaml line 304
                {
                    this.PaymentSales = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 5: // View\Reprint\Reprint.xaml line 370
                {
                    this.CloseBatch = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 6: // View\Reprint\Reprint.xaml line 179
                {
                    this.txtAmount = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 7: // View\Reprint\Reprint.xaml line 165
                {
                    this.txtTime = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Reprint\Reprint.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    Reprint_obj1_Bindings bindings = new Reprint_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

