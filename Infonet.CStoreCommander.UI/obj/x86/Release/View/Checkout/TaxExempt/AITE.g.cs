#pragma checksum "F:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Checkout\TaxExempt\AITE.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "F18216272861435BFCC8401CB343CBEB"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Checkout.TaxExempt
{
    partial class AITE : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Infonet_CStoreCommander_UI_Controls_SecondFrameHeading_PreviousFrame(global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.PreviousFrame = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(global::MyToolkit.Extended.Controls.CustomTextBox obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.EnterPressedCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class AITE_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IAITE_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.AITE dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading obj2;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj3;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj4;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj5;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj6;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj7;
            private global::Windows.UI.Xaml.Controls.Button obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj9;

            private AITE_obj1_BindingsTracking bindingsTracking;

            public AITE_obj1_Bindings()
            {
                this.bindingsTracking = new AITE_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\Checkout\TaxExempt\AITE.xaml line 33
                        this.obj2 = (global::Infonet.CStoreCommander.UI.Controls.SecondFrameHeading)target;
                        break;
                    case 3: // View\Checkout\TaxExempt\AITE.xaml line 123
                        this.obj3 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 4: // View\Checkout\TaxExempt\AITE.xaml line 130
                        this.obj4 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 5: // View\Checkout\TaxExempt\AITE.xaml line 138
                        this.obj5 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 6: // View\Checkout\TaxExempt\AITE.xaml line 58
                        this.obj6 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        break;
                    case 7: // View\Checkout\TaxExempt\AITE.xaml line 90
                        this.obj7 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        break;
                    case 8: // View\Checkout\TaxExempt\AITE.xaml line 101
                        this.obj8 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 9: // View\Checkout\TaxExempt\AITE.xaml line 82
                        this.obj9 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IAITE_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.AITE)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.AITE obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AiteVM(obj.AiteVM, phase);
                    }
                }
            }
            private void Update_AiteVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.AiteVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_AiteVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_AiteVM_GetSaleSummaryCommand(obj.GetSaleSummaryCommand, phase);
                        this.Update_AiteVM_AiteValidateEnabled(obj.AiteValidateEnabled, phase);
                        this.Update_AiteVM_ValidateAiteCommand(obj.ValidateAiteCommand, phase);
                        this.Update_AiteVM_AffixBarCodeEnabled(obj.AffixBarCodeEnabled, phase);
                        this.Update_AiteVM_AffixBarCodeCommand(obj.AffixBarCodeCommand, phase);
                        this.Update_AiteVM_IsGstPstTaxExemptEnabled(obj.IsGstPstTaxExemptEnabled, phase);
                        this.Update_AiteVM_OpenGstPstPopupCommand(obj.OpenGstPstPopupCommand, phase);
                        this.Update_AiteVM_CardNumberEnabled(obj.CardNumberEnabled, phase);
                        this.Update_AiteVM_IsAiteDoneEnabled(obj.IsAiteDoneEnabled, phase);
                        this.Update_AiteVM_AiteDoneCommand(obj.AiteDoneCommand, phase);
                        this.Update_AiteVM_CardholderName(obj.CardholderName, phase);
                    }
                }
            }
            private void Update_AiteVM_GetSaleSummaryCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 33
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_SecondFrameHeading_PreviousFrame(this.obj2, obj, null);
                }
            }
            private void Update_AiteVM_AiteValidateEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 123
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj3, obj);
                }
            }
            private void Update_AiteVM_ValidateAiteCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 123
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                    // View\Checkout\TaxExempt\AITE.xaml line 58
                    XamlBindingSetters.Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(this.obj6, obj, null);
                    // View\Checkout\TaxExempt\AITE.xaml line 90
                    XamlBindingSetters.Set_MyToolkit_Extended_Controls_CustomTextBox_EnterPressedCommand(this.obj7, obj, null);
                }
            }
            private void Update_AiteVM_AffixBarCodeEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 130
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj4, obj);
                }
            }
            private void Update_AiteVM_AffixBarCodeCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 130
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                }
            }
            private void Update_AiteVM_IsGstPstTaxExemptEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 138
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj5, obj);
                }
            }
            private void Update_AiteVM_OpenGstPstPopupCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 138
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj5, obj, null);
                }
            }
            private void Update_AiteVM_CardNumberEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 58
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj6, obj);
                }
            }
            private void Update_AiteVM_IsAiteDoneEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 101
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj8, obj);
                }
            }
            private void Update_AiteVM_AiteDoneCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 101
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                }
            }
            private void Update_AiteVM_CardholderName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\AITE.xaml line 82
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj9, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class AITE_obj1_BindingsTracking
            {
                private global::System.WeakReference<AITE_obj1_Bindings> weakRefToBindingObj; 

                public AITE_obj1_BindingsTracking(AITE_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<AITE_obj1_Bindings>(obj);
                }

                public AITE_obj1_Bindings TryGetBindingObject()
                {
                    AITE_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_AiteVM(null);
                }

                public void PropertyChanged_AiteVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AITE_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Checkout.AiteVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Checkout.AiteVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_AiteVM_GetSaleSummaryCommand(obj.GetSaleSummaryCommand, DATA_CHANGED);
                                bindings.Update_AiteVM_AiteValidateEnabled(obj.AiteValidateEnabled, DATA_CHANGED);
                                bindings.Update_AiteVM_ValidateAiteCommand(obj.ValidateAiteCommand, DATA_CHANGED);
                                bindings.Update_AiteVM_AffixBarCodeEnabled(obj.AffixBarCodeEnabled, DATA_CHANGED);
                                bindings.Update_AiteVM_AffixBarCodeCommand(obj.AffixBarCodeCommand, DATA_CHANGED);
                                bindings.Update_AiteVM_IsGstPstTaxExemptEnabled(obj.IsGstPstTaxExemptEnabled, DATA_CHANGED);
                                bindings.Update_AiteVM_OpenGstPstPopupCommand(obj.OpenGstPstPopupCommand, DATA_CHANGED);
                                bindings.Update_AiteVM_CardNumberEnabled(obj.CardNumberEnabled, DATA_CHANGED);
                                bindings.Update_AiteVM_IsAiteDoneEnabled(obj.IsAiteDoneEnabled, DATA_CHANGED);
                                bindings.Update_AiteVM_AiteDoneCommand(obj.AiteDoneCommand, DATA_CHANGED);
                                bindings.Update_AiteVM_CardholderName(obj.CardholderName, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "GetSaleSummaryCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_GetSaleSummaryCommand(obj.GetSaleSummaryCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AiteValidateEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_AiteValidateEnabled(obj.AiteValidateEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ValidateAiteCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_ValidateAiteCommand(obj.ValidateAiteCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AffixBarCodeEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_AffixBarCodeEnabled(obj.AffixBarCodeEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AffixBarCodeCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_AffixBarCodeCommand(obj.AffixBarCodeCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsGstPstTaxExemptEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_IsGstPstTaxExemptEnabled(obj.IsGstPstTaxExemptEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenGstPstPopupCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_OpenGstPstPopupCommand(obj.OpenGstPstPopupCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CardNumberEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_CardNumberEnabled(obj.CardNumberEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAiteDoneEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_IsAiteDoneEnabled(obj.IsAiteDoneEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AiteDoneCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_AiteDoneCommand(obj.AiteDoneCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CardholderName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_AiteVM_CardholderName(obj.CardholderName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Checkout.AiteVM cache_AiteVM = null;
                public void UpdateChildListeners_AiteVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.AiteVM obj)
                {
                    if (obj != cache_AiteVM)
                    {
                        if (cache_AiteVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_AiteVM).PropertyChanged -= PropertyChanged_AiteVM;
                            cache_AiteVM = null;
                        }
                        if (obj != null)
                        {
                            cache_AiteVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_AiteVM;
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 7: // View\Checkout\TaxExempt\AITE.xaml line 90
                {
                    this.BarCode = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Checkout\TaxExempt\AITE.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    AITE_obj1_Bindings bindings = new AITE_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

