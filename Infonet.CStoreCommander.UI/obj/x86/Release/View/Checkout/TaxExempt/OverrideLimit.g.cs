#pragma checksum "F:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Checkout\TaxExempt\OverrideLimit.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "00FA6883E2F6EEB32E59808F085E3EDD"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Checkout.TaxExempt
{
    partial class OverrideLimit : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_Text(global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.BackCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class OverrideLimit_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IOverrideLimit_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.OverrideLimit dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::WinRT.Triggers.InvokeCommandAction obj2;
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj7;
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.Grid obj9;
            private global::Windows.UI.Xaml.Controls.Grid obj10;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj11;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj12;
            private global::Windows.UI.Xaml.Controls.TextBox obj14;
            private global::Windows.UI.Xaml.Controls.ComboBox obj15;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj16;
            private global::Windows.UI.Xaml.Controls.TextBox obj17;
            private global::MyToolkit.Controls.DataGrid obj18;

            private OverrideLimit_obj1_BindingsTracking bindingsTracking;

            public OverrideLimit_obj1_Bindings()
            {
                this.bindingsTracking = new OverrideLimit_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\Checkout\TaxExempt\OverrideLimit.xaml line 18
                        this.obj2 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 7: // View\Checkout\TaxExempt\OverrideLimit.xaml line 83
                        this.obj7 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 8: // View\Checkout\TaxExempt\OverrideLimit.xaml line 207
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 9: // View\Checkout\TaxExempt\OverrideLimit.xaml line 211
                        this.obj9 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 10: // View\Checkout\TaxExempt\OverrideLimit.xaml line 277
                        this.obj10 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 11: // View\Checkout\TaxExempt\OverrideLimit.xaml line 279
                        this.obj11 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 12: // View\Checkout\TaxExempt\OverrideLimit.xaml line 291
                        this.obj12 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 14: // View\Checkout\TaxExempt\OverrideLimit.xaml line 266
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    case 15: // View\Checkout\TaxExempt\OverrideLimit.xaml line 241
                        this.obj15 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 16: // View\Checkout\TaxExempt\OverrideLimit.xaml line 253
                        this.obj16 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 17: // View\Checkout\TaxExempt\OverrideLimit.xaml line 224
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        break;
                    case 18: // View\Checkout\TaxExempt\OverrideLimit.xaml line 90
                        this.obj18 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_18(this.obj18);
                        break;
                    default:
                        break;
                }
            }

            // IOverrideLimit_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.OverrideLimit)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Checkout.TaxExempt.OverrideLimit obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_OverrideLimitVM(obj.OverrideLimitVM, phase);
                        this.Update_overrideCode(obj.overrideCode, phase);
                    }
                }
            }
            private void Update_OverrideLimitVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverrideLimitVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_OverrideLimitVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_OverrideLimitVM_LoadOverrideLimitDetailsCommand(obj.LoadOverrideLimitDetailsCommand, phase);
                        this.Update_OverrideLimitVM_Caption(obj.Caption, phase);
                        this.Update_OverrideLimitVM_BackPageCommand(obj.BackPageCommand, phase);
                        this.Update_OverrideLimitVM_MaxLimitMessage(obj.MaxLimitMessage, phase);
                        this.Update_OverrideLimitVM_IsTaxFreeLimitReached(obj.IsTaxFreeLimitReached, phase);
                        this.Update_OverrideLimitVM_IsTaxFreeLimitNotReached(obj.IsTaxFreeLimitNotReached, phase);
                        this.Update_OverrideLimitVM_IsOverrideNotDone(obj.IsOverrideNotDone, phase);
                        this.Update_OverrideLimitVM_IsOverrideCodeSelected(obj.IsOverrideCodeSelected, phase);
                        this.Update_OverrideLimitVM_OverrideLimitOverrideCommand(obj.OverrideLimitOverrideCommand, phase);
                        this.Update_OverrideLimitVM_IsOverrideDone(obj.IsOverrideDone, phase);
                        this.Update_OverrideLimitVM_CompleteOverrideLimitCommand(obj.CompleteOverrideLimitCommand, phase);
                        this.Update_OverrideLimitVM_OverrideCodes(obj.OverrideCodes, phase);
                        this.Update_OverrideLimitVM_OverrideCodeChangedCommand(obj.OverrideCodeChangedCommand, phase);
                        this.Update_OverrideLimitVM_SelectedOverrideLimit(obj.SelectedOverrideLimit, phase);
                    }
                }
            }
            private void Update_OverrideLimitVM_LoadOverrideLimitDetailsCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 18
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj2, obj, null);
                }
            }
            private void Update_OverrideLimitVM_Caption(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 83
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_Text(this.obj7, obj, null);
                }
            }
            private void Update_OverrideLimitVM_BackPageCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 83
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_ViewHeading_BackCommand(this.obj7, obj, null);
                }
            }
            private void Update_OverrideLimitVM_MaxLimitMessage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 207
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, obj, null);
                }
            }
            private void Update_OverrideLimitVM_IsTaxFreeLimitReached(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 207
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj8, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_OverrideLimitVM_IsTaxFreeLimitNotReached(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 211
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 277
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_OverrideLimitVM_IsOverrideNotDone(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 279
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj11, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_OverrideLimitVM_IsOverrideCodeSelected(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 279
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj11, obj);
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 266
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj14, obj);
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 241
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj15, obj);
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 224
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj17, obj);
                }
            }
            private void Update_OverrideLimitVM_OverrideLimitOverrideCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 279
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj11, obj, null);
                }
            }
            private void Update_OverrideLimitVM_IsOverrideDone(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 291
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("VisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_OverrideLimitVM_CompleteOverrideLimitCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 291
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj12, obj, null);
                }
            }
            private void Update_OverrideLimitVM_OverrideCodes(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 241
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj15, obj, null);
                }
            }
            private void Update_OverrideLimitVM_OverrideCodeChangedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 253
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj16, obj, null);
                }
            }
            private void Update_overrideCode(global::Windows.UI.Xaml.Controls.ComboBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_overrideCode(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_overrideCode_SelectedItem(obj.SelectedItem, phase);
                    }
                }
            }
            private void Update_overrideCode_SelectedItem(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 253
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(this.obj16, obj, null);
                }
            }
            private void Update_OverrideLimitVM_SelectedOverrideLimit(global::Infonet.CStoreCommander.UI.Model.Checkout.PurchaseItemModel obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Checkout\TaxExempt\OverrideLimit.xaml line 90
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj18, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void UpdateTwoWay_18_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.OverrideLimitVM != null)
                        {
                            this.dataRoot.OverrideLimitVM.SelectedOverrideLimit = (global::Infonet.CStoreCommander.UI.Model.Checkout.PurchaseItemModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj18.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Checkout.PurchaseItemModel), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class OverrideLimit_obj1_BindingsTracking
            {
                private global::System.WeakReference<OverrideLimit_obj1_Bindings> weakRefToBindingObj; 

                public OverrideLimit_obj1_BindingsTracking(OverrideLimit_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<OverrideLimit_obj1_Bindings>(obj);
                }

                public OverrideLimit_obj1_Bindings TryGetBindingObject()
                {
                    OverrideLimit_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_OverrideLimitVM(null);
                    UpdateChildListeners_overrideCode(null);
                }

                public void PropertyChanged_OverrideLimitVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    OverrideLimit_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverrideLimitVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverrideLimitVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_OverrideLimitVM_LoadOverrideLimitDetailsCommand(obj.LoadOverrideLimitDetailsCommand, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_Caption(obj.Caption, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_BackPageCommand(obj.BackPageCommand, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_MaxLimitMessage(obj.MaxLimitMessage, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_IsTaxFreeLimitReached(obj.IsTaxFreeLimitReached, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_IsTaxFreeLimitNotReached(obj.IsTaxFreeLimitNotReached, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_IsOverrideNotDone(obj.IsOverrideNotDone, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_IsOverrideCodeSelected(obj.IsOverrideCodeSelected, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_OverrideLimitOverrideCommand(obj.OverrideLimitOverrideCommand, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_IsOverrideDone(obj.IsOverrideDone, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_CompleteOverrideLimitCommand(obj.CompleteOverrideLimitCommand, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_OverrideCodes(obj.OverrideCodes, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_OverrideCodeChangedCommand(obj.OverrideCodeChangedCommand, DATA_CHANGED);
                                bindings.Update_OverrideLimitVM_SelectedOverrideLimit(obj.SelectedOverrideLimit, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "LoadOverrideLimitDetailsCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_LoadOverrideLimitDetailsCommand(obj.LoadOverrideLimitDetailsCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Caption":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_Caption(obj.Caption, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "BackPageCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_BackPageCommand(obj.BackPageCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "MaxLimitMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_MaxLimitMessage(obj.MaxLimitMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxFreeLimitReached":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_IsTaxFreeLimitReached(obj.IsTaxFreeLimitReached, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxFreeLimitNotReached":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_IsTaxFreeLimitNotReached(obj.IsTaxFreeLimitNotReached, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsOverrideNotDone":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_IsOverrideNotDone(obj.IsOverrideNotDone, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsOverrideCodeSelected":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_IsOverrideCodeSelected(obj.IsOverrideCodeSelected, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OverrideLimitOverrideCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_OverrideLimitOverrideCommand(obj.OverrideLimitOverrideCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsOverrideDone":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_IsOverrideDone(obj.IsOverrideDone, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CompleteOverrideLimitCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_CompleteOverrideLimitCommand(obj.CompleteOverrideLimitCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OverrideCodes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_OverrideCodes(obj.OverrideCodes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OverrideCodeChangedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_OverrideCodeChangedCommand(obj.OverrideCodeChangedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedOverrideLimit":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_OverrideLimitVM_SelectedOverrideLimit(obj.SelectedOverrideLimit, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverrideLimitVM cache_OverrideLimitVM = null;
                public void UpdateChildListeners_OverrideLimitVM(global::Infonet.CStoreCommander.UI.ViewModel.Checkout.OverrideLimitVM obj)
                {
                    if (obj != cache_OverrideLimitVM)
                    {
                        if (cache_OverrideLimitVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_OverrideLimitVM).PropertyChanged -= PropertyChanged_OverrideLimitVM;
                            cache_OverrideLimitVM = null;
                        }
                        if (obj != null)
                        {
                            cache_OverrideLimitVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_OverrideLimitVM;
                        }
                    }
                }
                public void DependencyPropertyChanged_overrideCode_SelectedItem(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    OverrideLimit_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Windows.UI.Xaml.Controls.ComboBox obj = sender as global::Windows.UI.Xaml.Controls.ComboBox;
                        if (obj != null)
                        {
                            bindings.Update_overrideCode_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.ComboBox cache_overrideCode = null;
                private long tokenDPC_overrideCode_SelectedItem = 0;
                public void UpdateChildListeners_overrideCode(global::Windows.UI.Xaml.Controls.ComboBox obj)
                {
                    if (obj != cache_overrideCode)
                    {
                        if (cache_overrideCode != null)
                        {
                            cache_overrideCode.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, tokenDPC_overrideCode_SelectedItem);
                            cache_overrideCode = null;
                        }
                        if (obj != null)
                        {
                            cache_overrideCode = obj;
                            tokenDPC_overrideCode_SelectedItem = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, DependencyPropertyChanged_overrideCode_SelectedItem);
                        }
                    }
                }
                public void RegisterTwoWayListener_18(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_18_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 3: // View\Checkout\TaxExempt\OverrideLimit.xaml line 24
                {
                    this.GenericButtonStyle = (global::Windows.UI.Xaml.Style)(target);
                }
                break;
            case 11: // View\Checkout\TaxExempt\OverrideLimit.xaml line 279
                {
                    this.btnOverride = (global::Infonet.CStoreCommander.ControlLib.GenericButton)(target);
                }
                break;
            case 13: // View\Checkout\TaxExempt\OverrideLimit.xaml line 261
                {
                    this.txtDetails = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 14: // View\Checkout\TaxExempt\OverrideLimit.xaml line 266
                {
                    this.details = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 15: // View\Checkout\TaxExempt\OverrideLimit.xaml line 241
                {
                    this.overrideCode = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 17: // View\Checkout\TaxExempt\OverrideLimit.xaml line 224
                {
                    this.document = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 18: // View\Checkout\TaxExempt\OverrideLimit.xaml line 90
                {
                    this.DataGrid = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Checkout\TaxExempt\OverrideLimit.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    OverrideLimit_obj1_Bindings bindings = new OverrideLimit_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

