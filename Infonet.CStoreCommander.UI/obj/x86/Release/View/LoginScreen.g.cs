#pragma checksum "F:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\LoginScreen.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "EAC34A90C6E4ECF763A0F7CEA4C23197"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View
{
    partial class LoginScreen : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(global::Windows.UI.Xaml.Controls.Primitives.Popup obj, global::System.Boolean value)
            {
                obj.IsOpen = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.HeadingText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Title = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.FirstButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.SecondButtonBottomBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.FirstButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.SecondButtonText = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Description = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Message = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Continue = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj, global::Windows.UI.Xaml.Media.SolidColorBrush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.SolidColorBrush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.SolidColorBrush), targetNullValue);
                }
                obj.ButtonBackgroundColor = value;
            }
            public static void Set_Infonet_CStoreCommander_UI_Controls_LargePopupHeader_CancelCommand(global::Infonet.CStoreCommander.UI.Controls.LargePopupHeader obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.CancelCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_PasswordBox_Password(global::Windows.UI.Xaml.Controls.PasswordBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class LoginScreen_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ILoginScreen_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.LoginScreen dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj4;
            private global::Windows.UI.Xaml.Controls.Primitives.Popup obj5;
            private global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons obj6;
            private global::Infonet.CStoreCommander.UI.Controls.NotificationPopup obj7;
            private global::Infonet.CStoreCommander.UI.Controls.LargePopupHeader obj8;
            private global::Windows.UI.Xaml.Controls.TextBox obj10;
            private global::Windows.UI.Xaml.Controls.PasswordBox obj11;
            private global::Windows.UI.Xaml.Controls.StackPanel obj12;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj13;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj15;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj16;
            private global::WinRT.Triggers.InvokeCommandAction obj17;
            private global::Windows.UI.Xaml.Controls.ComboBox obj18;
            private global::Windows.UI.Xaml.Controls.ComboBox obj19;
            private global::Windows.UI.Xaml.Controls.TextBox obj20;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj21;
            private global::WinRT.Triggers.InvokeCommandAction obj22;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj23;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj24;

            private LoginScreen_obj1_BindingsTracking bindingsTracking;

            public LoginScreen_obj1_Bindings()
            {
                this.bindingsTracking = new LoginScreen_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // View\LoginScreen.xaml line 238
                        this.obj4 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 5: // View\LoginScreen.xaml line 257
                        this.obj5 = (global::Windows.UI.Xaml.Controls.Primitives.Popup)target;
                        break;
                    case 6: // View\LoginScreen.xaml line 262
                        this.obj6 = (global::Infonet.CStoreCommander.UI.Controls.PopupWithTwoButtons)target;
                        break;
                    case 7: // View\LoginScreen.xaml line 242
                        this.obj7 = (global::Infonet.CStoreCommander.UI.Controls.NotificationPopup)target;
                        break;
                    case 8: // View\LoginScreen.xaml line 51
                        this.obj8 = (global::Infonet.CStoreCommander.UI.Controls.LargePopupHeader)target;
                        break;
                    case 10: // View\LoginScreen.xaml line 62
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_10(this.obj10);
                        break;
                    case 11: // View\LoginScreen.xaml line 80
                        this.obj11 = (global::Windows.UI.Xaml.Controls.PasswordBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_11(this.obj11);
                        break;
                    case 12: // View\LoginScreen.xaml line 178
                        this.obj12 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                        break;
                    case 13: // View\LoginScreen.xaml line 221
                        this.obj13 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 15: // View\LoginScreen.xaml line 191
                        this.obj15 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_15(this.obj15);
                        break;
                    case 16: // View\LoginScreen.xaml line 205
                        this.obj16 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 17: // View\LoginScreen.xaml line 210
                        this.obj17 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 18: // View\LoginScreen.xaml line 119
                        this.obj18 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_18(this.obj18);
                        break;
                    case 19: // View\LoginScreen.xaml line 142
                        this.obj19 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        break;
                    case 20: // View\LoginScreen.xaml line 161
                        this.obj20 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_20(this.obj20);
                        break;
                    case 21: // View\LoginScreen.xaml line 155
                        this.obj21 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 22: // View\LoginScreen.xaml line 94
                        this.obj22 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 23: // View\LoginScreen.xaml line 100
                        this.obj23 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 24: // View\LoginScreen.xaml line 73
                        this.obj24 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // ILoginScreen_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.LoginScreen)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.LoginScreen obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LoginScreenVM(obj.LoginScreenVM, phase);
                        this.Update_cbShift(obj.cbShift, phase);
                    }
                }
            }
            private void Update_LoginScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.Login.LoginScreenVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_LoginScreenVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LoginScreenVM_PopupService(obj.PopupService, phase);
                        this.Update_LoginScreenVM_ShutDownApplicationCommand(obj.ShutDownApplicationCommand, phase);
                        this.Update_LoginScreenVM_IsUserNameEnabled(obj.IsUserNameEnabled, phase);
                        this.Update_LoginScreenVM_LoginModel(obj.LoginModel, phase);
                        this.Update_LoginScreenVM_IsPasswordEnabled(obj.IsPasswordEnabled, phase);
                        this.Update_LoginScreenVM_IsTillFloatVisible(obj.IsTillFloatVisible, phase);
                        this.Update_LoginScreenVM_LoginUserCommand(obj.LoginUserCommand, phase);
                        this.Update_LoginScreenVM_IsLoginEnabled(obj.IsLoginEnabled, phase);
                        this.Update_LoginScreenVM_IsTillFloatEnabled(obj.IsTillFloatEnabled, phase);
                        this.Update_LoginScreenVM_TillFloatCompletedCommand(obj.TillFloatCompletedCommand, phase);
                        this.Update_LoginScreenVM_TillFloatGotFocusCommand(obj.TillFloatGotFocusCommand, phase);
                        this.Update_LoginScreenVM_IsTillVisible(obj.IsTillVisible, phase);
                        this.Update_LoginScreenVM_IsTillEnabled(obj.IsTillEnabled, phase);
                        this.Update_LoginScreenVM_SelectedTillIndex(obj.SelectedTillIndex, phase);
                        this.Update_LoginScreenVM_IsShiftEnabled(obj.IsShiftEnabled, phase);
                        this.Update_LoginScreenVM_IsShiftVisible(obj.IsShiftVisible, phase);
                        this.Update_LoginScreenVM_ShowSingleShift(obj.ShowSingleShift, phase);
                        this.Update_LoginScreenVM_ShiftText(obj.ShiftText, phase);
                        this.Update_LoginScreenVM_ShiftsSelectedCommand(obj.ShiftsSelectedCommand, phase);
                        this.Update_LoginScreenVM_PasswordCompletedCommand(obj.PasswordCompletedCommand, phase);
                        this.Update_LoginScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, phase);
                    }
                }
            }
            private void Update_LoginScreenVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_LoginScreenVM_PopupService(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LoginScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, phase);
                        this.Update_LoginScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, phase);
                        this.Update_LoginScreenVM_PopupService_Title(obj.Title, phase);
                        this.Update_LoginScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, phase);
                        this.Update_LoginScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, phase);
                        this.Update_LoginScreenVM_PopupService_YesButtonText(obj.YesButtonText, phase);
                        this.Update_LoginScreenVM_PopupService_NoButtonText(obj.NoButtonText, phase);
                        this.Update_LoginScreenVM_PopupService_Message(obj.Message, phase);
                        this.Update_LoginScreenVM_PopupService_Continue(obj.Continue, phase);
                        this.Update_LoginScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, phase);
                    }
                }
            }
            private void Update_LoginScreenVM_PopupService_IsAlertPopupOpen(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 238
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj4, obj);
                }
            }
            private void Update_LoginScreenVM_PopupService_IsConfirmationPopupOpen(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 257
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Popup_IsOpen(this.obj5, obj);
                }
            }
            private void Update_LoginScreenVM_PopupService_Title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 262
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_HeadingText(this.obj6, obj, null);
                    // View\LoginScreen.xaml line 242
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Title(this.obj7, obj, null);
                }
            }
            private void Update_LoginScreenVM_PopupService_YesButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 262
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonBottomBackgroundColor(this.obj6, obj, null);
                }
            }
            private void Update_LoginScreenVM_PopupService_NoButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 262
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonBottomBackgroundColor(this.obj6, obj, null);
                }
            }
            private void Update_LoginScreenVM_PopupService_YesButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 262
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_FirstButtonText(this.obj6, obj, null);
                }
            }
            private void Update_LoginScreenVM_PopupService_NoButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 262
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_SecondButtonText(this.obj6, obj, null);
                }
            }
            private void Update_LoginScreenVM_PopupService_Message(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 262
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_PopupWithTwoButtons_Description(this.obj6, obj, null);
                    // View\LoginScreen.xaml line 242
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Message(this.obj7, obj, null);
                }
            }
            private void Update_LoginScreenVM_PopupService_Continue(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 242
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_Continue(this.obj7, obj, null);
                }
            }
            private void Update_LoginScreenVM_PopupService_OkButtonColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 242
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_NotificationPopup_ButtonBackgroundColor(this.obj7, obj, null);
                }
            }
            private void Update_LoginScreenVM_ShutDownApplicationCommand(global::System.Windows.Input.ICommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 51
                    XamlBindingSetters.Set_Infonet_CStoreCommander_UI_Controls_LargePopupHeader_CancelCommand(this.obj8, obj, null);
                }
            }
            private void Update_LoginScreenVM_IsUserNameEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 62
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj10, obj);
                }
            }
            private void Update_LoginScreenVM_LoginModel(global::Infonet.CStoreCommander.UI.Model.Login.LoginModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_LoginScreenVM_LoginModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_LoginScreenVM_LoginModel_UserName(obj.UserName, phase);
                        this.Update_LoginScreenVM_LoginModel_Password(obj.Password, phase);
                        this.Update_LoginScreenVM_LoginModel_TillFloat(obj.TillFloat, phase);
                        this.Update_LoginScreenVM_LoginModel_TillNumbers(obj.TillNumbers, phase);
                        this.Update_LoginScreenVM_LoginModel_Shifts(obj.Shifts, phase);
                    }
                }
            }
            private void Update_LoginScreenVM_LoginModel_UserName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 62
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj10, obj, null);
                }
            }
            private void Update_LoginScreenVM_IsPasswordEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 80
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj11, obj);
                }
            }
            private void Update_LoginScreenVM_LoginModel_Password(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 80
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_Password(this.obj11, obj, null);
                }
            }
            private void Update_LoginScreenVM_IsTillFloatVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 178
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_LoginScreenVM_LoginUserCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 221
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj13, obj, null);
                }
            }
            private void Update_LoginScreenVM_IsLoginEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 221
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj13, obj);
                }
            }
            private void Update_LoginScreenVM_IsTillFloatEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 191
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj15, obj);
                }
            }
            private void Update_LoginScreenVM_LoginModel_TillFloat(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 191
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj15, obj, null);
                }
            }
            private void Update_LoginScreenVM_TillFloatCompletedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 205
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj16, obj, null);
                }
            }
            private void Update_LoginScreenVM_TillFloatGotFocusCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 210
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj17, obj, null);
                }
            }
            private void Update_LoginScreenVM_IsTillVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 119
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj18, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_LoginScreenVM_IsTillEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 119
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj18, obj);
                }
            }
            private void Update_LoginScreenVM_LoginModel_TillNumbers(global::System.Collections.Generic.List<global::System.Int32> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 119
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj18, obj, null);
                }
            }
            private void Update_LoginScreenVM_SelectedTillIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 119
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj18, (global::System.Int32)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Int32), null, null));
                }
            }
            private void Update_LoginScreenVM_IsShiftEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 142
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj19, obj);
                }
            }
            private void Update_LoginScreenVM_IsShiftVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 142
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj19, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_LoginScreenVM_LoginModel_Shifts(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 142
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj19, obj, null);
                }
            }
            private void Update_LoginScreenVM_ShowSingleShift(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 161
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj20, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_LoginScreenVM_ShiftText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 161
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj20, obj, null);
                }
            }
            private void Update_LoginScreenVM_ShiftsSelectedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 155
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj21, obj, null);
                }
            }
            private void Update_cbShift(global::Windows.UI.Xaml.Controls.ComboBox obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_cbShift(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_cbShift_SelectedItem(obj.SelectedItem, phase);
                    }
                }
            }
            private void Update_cbShift_SelectedItem(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 155
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(this.obj21, obj, null);
                }
            }
            private void Update_LoginScreenVM_PasswordCompletedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 94
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj22, obj, null);
                }
            }
            private void Update_LoginScreenVM_InvokeKeyboardCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\LoginScreen.xaml line 100
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj23, obj, null);
                    // View\LoginScreen.xaml line 73
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj24, obj, null);
                }
            }
            private void UpdateTwoWay_10_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LoginScreenVM != null)
                        {
                            if (this.dataRoot.LoginScreenVM.LoginModel != null)
                            {
                                this.dataRoot.LoginScreenVM.LoginModel.UserName = this.obj10.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_11_Password()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LoginScreenVM != null)
                        {
                            if (this.dataRoot.LoginScreenVM.LoginModel != null)
                            {
                                this.dataRoot.LoginScreenVM.LoginModel.Password = this.obj11.Password;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_15_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LoginScreenVM != null)
                        {
                            if (this.dataRoot.LoginScreenVM.LoginModel != null)
                            {
                                this.dataRoot.LoginScreenVM.LoginModel.TillFloat = this.obj15.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_18_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LoginScreenVM != null)
                        {
                            this.dataRoot.LoginScreenVM.SelectedTillIndex = (global::System.Int32)this.LookupConverter("NothingConverter").ConvertBack(this.obj18.SelectedIndex, typeof(global::System.Int32), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_20_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.LoginScreenVM != null)
                        {
                            this.dataRoot.LoginScreenVM.ShiftText = this.obj20.Text;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class LoginScreen_obj1_BindingsTracking
            {
                private global::System.WeakReference<LoginScreen_obj1_Bindings> weakRefToBindingObj; 

                public LoginScreen_obj1_BindingsTracking(LoginScreen_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<LoginScreen_obj1_Bindings>(obj);
                }

                public LoginScreen_obj1_Bindings TryGetBindingObject()
                {
                    LoginScreen_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_LoginScreenVM(null);
                    UpdateChildListeners_LoginScreenVM_PopupService(null);
                    UpdateChildListeners_LoginScreenVM_LoginModel(null);
                    UpdateChildListeners_cbShift(null);
                }

                public void PropertyChanged_LoginScreenVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    LoginScreen_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Login.LoginScreenVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Login.LoginScreenVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_LoginScreenVM_PopupService(obj.PopupService, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_ShutDownApplicationCommand(obj.ShutDownApplicationCommand, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsUserNameEnabled(obj.IsUserNameEnabled, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_LoginModel(obj.LoginModel, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsPasswordEnabled(obj.IsPasswordEnabled, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsTillFloatVisible(obj.IsTillFloatVisible, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_LoginUserCommand(obj.LoginUserCommand, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsLoginEnabled(obj.IsLoginEnabled, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsTillFloatEnabled(obj.IsTillFloatEnabled, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_TillFloatCompletedCommand(obj.TillFloatCompletedCommand, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_TillFloatGotFocusCommand(obj.TillFloatGotFocusCommand, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsTillVisible(obj.IsTillVisible, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsTillEnabled(obj.IsTillEnabled, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_SelectedTillIndex(obj.SelectedTillIndex, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsShiftEnabled(obj.IsShiftEnabled, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_IsShiftVisible(obj.IsShiftVisible, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_ShowSingleShift(obj.ShowSingleShift, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_ShiftText(obj.ShiftText, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_ShiftsSelectedCommand(obj.ShiftsSelectedCommand, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PasswordCompletedCommand(obj.PasswordCompletedCommand, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "PopupService":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService(obj.PopupService, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShutDownApplicationCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_ShutDownApplicationCommand(obj.ShutDownApplicationCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsUserNameEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsUserNameEnabled(obj.IsUserNameEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LoginModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_LoginModel(obj.LoginModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPasswordEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsPasswordEnabled(obj.IsPasswordEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTillFloatVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsTillFloatVisible(obj.IsTillFloatVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "LoginUserCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_LoginUserCommand(obj.LoginUserCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsLoginEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsLoginEnabled(obj.IsLoginEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTillFloatEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsTillFloatEnabled(obj.IsTillFloatEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TillFloatCompletedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_TillFloatCompletedCommand(obj.TillFloatCompletedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TillFloatGotFocusCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_TillFloatGotFocusCommand(obj.TillFloatGotFocusCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTillVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsTillVisible(obj.IsTillVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTillEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsTillEnabled(obj.IsTillEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedTillIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_SelectedTillIndex(obj.SelectedTillIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsShiftEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsShiftEnabled(obj.IsShiftEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsShiftVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_IsShiftVisible(obj.IsShiftVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowSingleShift":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_ShowSingleShift(obj.ShowSingleShift, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShiftText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_ShiftText(obj.ShiftText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShiftsSelectedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_ShiftsSelectedCommand(obj.ShiftsSelectedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PasswordCompletedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PasswordCompletedCommand(obj.PasswordCompletedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "InvokeKeyboardCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Login.LoginScreenVM cache_LoginScreenVM = null;
                public void UpdateChildListeners_LoginScreenVM(global::Infonet.CStoreCommander.UI.ViewModel.Login.LoginScreenVM obj)
                {
                    if (obj != cache_LoginScreenVM)
                    {
                        if (cache_LoginScreenVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_LoginScreenVM).PropertyChanged -= PropertyChanged_LoginScreenVM;
                            cache_LoginScreenVM = null;
                        }
                        if (obj != null)
                        {
                            cache_LoginScreenVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_LoginScreenVM;
                        }
                    }
                }
                public void PropertyChanged_LoginScreenVM_PopupService(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    LoginScreen_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Utility.PopupService obj = sender as global::Infonet.CStoreCommander.UI.Utility.PopupService;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_LoginScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsAlertPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_IsAlertPopupOpen(obj.IsAlertPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsConfirmationPopupOpen":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_IsConfirmationPopupOpen(obj.IsConfirmationPopupOpen, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Title":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_Title(obj.Title, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_YesButtonColor(obj.YesButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_NoButtonColor(obj.NoButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YesButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_YesButtonText(obj.YesButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NoButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_NoButtonText(obj.NoButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Message":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_Message(obj.Message, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Continue":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_Continue(obj.Continue, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OkButtonColor":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_PopupService_OkButtonColor(obj.OkButtonColor, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Utility.PopupService cache_LoginScreenVM_PopupService = null;
                public void UpdateChildListeners_LoginScreenVM_PopupService(global::Infonet.CStoreCommander.UI.Utility.PopupService obj)
                {
                    if (obj != cache_LoginScreenVM_PopupService)
                    {
                        if (cache_LoginScreenVM_PopupService != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_LoginScreenVM_PopupService).PropertyChanged -= PropertyChanged_LoginScreenVM_PopupService;
                            cache_LoginScreenVM_PopupService = null;
                        }
                        if (obj != null)
                        {
                            cache_LoginScreenVM_PopupService = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_LoginScreenVM_PopupService;
                        }
                    }
                }
                public void PropertyChanged_LoginScreenVM_LoginModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    LoginScreen_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Login.LoginModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Login.LoginModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_LoginScreenVM_LoginModel_UserName(obj.UserName, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_LoginModel_Password(obj.Password, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_LoginModel_TillFloat(obj.TillFloat, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_LoginModel_TillNumbers(obj.TillNumbers, DATA_CHANGED);
                                bindings.Update_LoginScreenVM_LoginModel_Shifts(obj.Shifts, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "UserName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_LoginModel_UserName(obj.UserName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Password":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_LoginModel_Password(obj.Password, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TillFloat":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_LoginModel_TillFloat(obj.TillFloat, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TillNumbers":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_LoginModel_TillNumbers(obj.TillNumbers, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Shifts":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_LoginScreenVM_LoginModel_Shifts(obj.Shifts, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.Login.LoginModel cache_LoginScreenVM_LoginModel = null;
                public void UpdateChildListeners_LoginScreenVM_LoginModel(global::Infonet.CStoreCommander.UI.Model.Login.LoginModel obj)
                {
                    if (obj != cache_LoginScreenVM_LoginModel)
                    {
                        if (cache_LoginScreenVM_LoginModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_LoginScreenVM_LoginModel).PropertyChanged -= PropertyChanged_LoginScreenVM_LoginModel;
                            cache_LoginScreenVM_LoginModel = null;
                        }
                        if (obj != null)
                        {
                            cache_LoginScreenVM_LoginModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_LoginScreenVM_LoginModel;
                        }
                    }
                }
                public void DependencyPropertyChanged_cbShift_SelectedItem(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    LoginScreen_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Windows.UI.Xaml.Controls.ComboBox obj = sender as global::Windows.UI.Xaml.Controls.ComboBox;
                        if (obj != null)
                        {
                            bindings.Update_cbShift_SelectedItem(obj.SelectedItem, DATA_CHANGED);
                        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.ComboBox cache_cbShift = null;
                private long tokenDPC_cbShift_SelectedItem = 0;
                public void UpdateChildListeners_cbShift(global::Windows.UI.Xaml.Controls.ComboBox obj)
                {
                    if (obj != cache_cbShift)
                    {
                        if (cache_cbShift != null)
                        {
                            cache_cbShift.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, tokenDPC_cbShift_SelectedItem);
                            cache_cbShift = null;
                        }
                        if (obj != null)
                        {
                            cache_cbShift = obj;
                            tokenDPC_cbShift_SelectedItem = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, DependencyPropertyChanged_cbShift_SelectedItem);
                        }
                    }
                }
                public void RegisterTwoWayListener_10(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_11(global::Windows.UI.Xaml.Controls.PasswordBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_11_Password();
                        }
                    });
                }
                public void RegisterTwoWayListener_15(global::MyToolkit.Extended.Controls.CustomTextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_18(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_18_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_20(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_20_Text();
                        }
                    };
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // View\LoginScreen.xaml line 23
                {
                    this.gdLoginScreen = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 3: // View\LoginScreen.xaml line 36
                {
                    this.loginSection = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 4: // View\LoginScreen.xaml line 238
                {
                    this.errorPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 5: // View\LoginScreen.xaml line 257
                {
                    this.shiftPopup = (global::Windows.UI.Xaml.Controls.Primitives.Popup)(target);
                }
                break;
            case 9: // View\LoginScreen.xaml line 56
                {
                    this.spLoginDetails = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 10: // View\LoginScreen.xaml line 62
                {
                    this.User = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 11: // View\LoginScreen.xaml line 80
                {
                    this.Password = (global::Windows.UI.Xaml.Controls.PasswordBox)(target);
                }
                break;
            case 13: // View\LoginScreen.xaml line 221
                {
                    this.btnLogin = (global::Infonet.CStoreCommander.ControlLib.GenericButton)(target);
                }
                break;
            case 14: // View\LoginScreen.xaml line 181
                {
                    this.txtTillFloat = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 15: // View\LoginScreen.xaml line 191
                {
                    this.TillFloat = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            case 18: // View\LoginScreen.xaml line 119
                {
                    this.cbTill = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            case 19: // View\LoginScreen.xaml line 142
                {
                    this.cbShift = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\LoginScreen.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    LoginScreen_obj1_Bindings bindings = new LoginScreen_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

