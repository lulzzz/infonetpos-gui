#pragma checksum "F:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\PumpOptions\Fuel Pricing\BasePrice.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "519EA9010ED83D2242A2C87030D23132"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Fuel_Pricing
{
    partial class BasePrice : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_FocusOnEditableRow(global::MyToolkit.Controls.DataGrid obj, global::System.Boolean value)
            {
                obj.FocusOnEditableRow = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Boolean) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Boolean), targetNullValue);
                }
                obj.IsChecked = value;
            }
            public static void Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(global::MyToolkit.Controls.DataGridTextColumn obj, global::System.Boolean value)
            {
                obj.IsEdit = value;
            }
            public static void Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(global::MyToolkit.Controls.DataGridTextColumn obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.KeyUpCommand = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class BasePrice_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IBasePrice_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Fuel_Pricing.BasePrice dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::WinRT.Triggers.InvokeCommandAction obj2;
            private global::MyToolkit.Controls.DataGrid obj3;
            private global::MyToolkit.Controls.DataGrid obj4;
            private global::MyToolkit.Controls.DataGrid obj5;
            private global::MyToolkit.Controls.DataGrid obj6;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj7;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj8;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj9;
            private global::Windows.UI.Xaml.Controls.CheckBox obj10;
            private global::Windows.UI.Xaml.Controls.CheckBox obj11;
            private global::Windows.UI.Xaml.Controls.CheckBox obj12;
            private global::MyToolkit.Controls.DataGridTextColumn obj13;
            private global::MyToolkit.Controls.DataGridTextColumn obj14;
            private global::MyToolkit.Controls.DataGridTextColumn obj15;
            private global::MyToolkit.Controls.DataGridTextColumn obj16;
            private global::MyToolkit.Controls.DataGridTextColumn obj17;
            private global::MyToolkit.Controls.DataGridTextColumn obj18;
            private global::MyToolkit.Controls.DataGridTextColumn obj19;
            private global::MyToolkit.Controls.DataGridTextColumn obj20;
            private global::MyToolkit.Controls.DataGridTextColumn obj22;
            private global::MyToolkit.Controls.DataGridTextColumn obj23;
            private global::MyToolkit.Controls.DataGridTextColumn obj24;
            private global::MyToolkit.Controls.DataGridTextColumn obj25;
            private global::Windows.UI.Xaml.Controls.TextBlock obj27;
            private global::Windows.UI.Xaml.Controls.TextBlock obj28;

            private BasePrice_obj1_BindingsTracking bindingsTracking;

            public BasePrice_obj1_Bindings()
            {
                this.bindingsTracking = new BasePrice_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 16
                        this.obj2 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 3: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 76
                        this.obj3 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 178
                        this.obj4 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 245
                        this.obj5 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_5(this.obj5);
                        break;
                    case 6: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 371
                        this.obj6 = (global::MyToolkit.Controls.DataGrid)target;
                        this.bindingsTracking.RegisterTwoWayListener_6(this.obj6);
                        break;
                    case 7: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 496
                        this.obj7 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 8: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 507
                        this.obj8 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 9: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 515
                        this.obj9 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 10: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 475
                        this.obj10 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        break;
                    case 11: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 478
                        this.obj11 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        break;
                    case 12: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 482
                        this.obj12 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        break;
                    case 13: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 426
                        this.obj13 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 14: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 443
                        this.obj14 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 15: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 300
                        this.obj15 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 16: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 317
                        this.obj16 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 17: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 334
                        this.obj17 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 18: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 351
                        this.obj18 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 19: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 206
                        this.obj19 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 20: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 223
                        this.obj20 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 22: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 103
                        this.obj22 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 23: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 120
                        this.obj23 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 24: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 138
                        this.obj24 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 25: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 155
                        this.obj25 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        break;
                    case 27: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 60
                        this.obj27 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 28: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 66
                        this.obj28 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            // IBasePrice_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Fuel_Pricing.BasePrice)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Fuel_Pricing.BasePrice obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_BasePricesVM(obj.BasePricesVM, phase);
                    }
                }
            }
            private void Update_BasePricesVM(global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.BasePricesVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_BasePricesVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_BasePricesVM_LoadPricesCommand(obj.LoadPricesCommand, phase);
                        this.Update_BasePricesVM_SelectedPrice(obj.SelectedPrice, phase);
                        this.Update_BasePricesVM_FuelPrices(obj.FuelPrices, phase);
                        this.Update_BasePricesVM_FocusOnNewRow(obj.FocusOnNewRow, phase);
                        this.Update_BasePricesVM_ReadTotalizerCommand(obj.ReadTotalizerCommand, phase);
                        this.Update_BasePricesVM_PrintCommand(obj.PrintCommand, phase);
                        this.Update_BasePricesVM_SavePricesCommand(obj.SavePricesCommand, phase);
                        this.Update_BasePricesVM_SetPriceCommand(obj.SetPriceCommand, phase);
                        this.Update_BasePricesVM_Caption(obj.Caption, phase);
                        this.Update_BasePricesVM_Caption2(obj.Caption2, phase);
                    }
                }
            }
            private void Update_BasePricesVM_LoadPricesCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 16
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj2, obj, null);
                }
            }
            private void Update_BasePricesVM_SelectedPrice(global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_BasePricesVM_SelectedPrice(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 76
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj3, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 178
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj4, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 245
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj5, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 371
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj6, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                }
            }
            private void Update_BasePricesVM_FuelPrices(global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPricesModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_BasePricesVM_FuelPrices(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_BasePricesVM_FuelPrices_IsGroupedTaxExemptionVisible(obj.IsGroupedTaxExemptionVisible, phase);
                        this.Update_BasePricesVM_FuelPrices_Prices(obj.Prices, phase);
                        this.Update_BasePricesVM_FuelPrices_IsGroupedTaxExemptionInVisible(obj.IsGroupedTaxExemptionInVisible, phase);
                        this.Update_BasePricesVM_FuelPrices_IsTaxExemptionVisible(obj.IsTaxExemptionVisible, phase);
                        this.Update_BasePricesVM_FuelPrices_IsTaxExemptionInVisible(obj.IsTaxExemptionInVisible, phase);
                        this.Update_BasePricesVM_FuelPrices_CanReadTotalizer(obj.CanReadTotalizer, phase);
                        this.Update_BasePricesVM_FuelPrices_IsReadTotalizerChecked(obj.IsReadTotalizerChecked, phase);
                        this.Update_BasePricesVM_FuelPrices_IsReadTankDipChecked(obj.IsReadTankDipChecked, phase);
                        this.Update_BasePricesVM_FuelPrices_IsPricesToDisplayChecked(obj.IsPricesToDisplayChecked, phase);
                        this.Update_BasePricesVM_FuelPrices_IsCashPriceEnabled(obj.IsCashPriceEnabled, phase);
                        this.Update_BasePricesVM_FuelPrices_IsCreditPriceEnabled(obj.IsCreditPriceEnabled, phase);
                        this.Update_BasePricesVM_FuelPrices_IsTaxExemptedCashPriceEnabled(obj.IsTaxExemptedCashPriceEnabled, phase);
                        this.Update_BasePricesVM_FuelPrices_IsTaxExemptedCreditPriceEnabled(obj.IsTaxExemptedCreditPriceEnabled, phase);
                    }
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsGroupedTaxExemptionVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 76
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj3, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_BasePricesVM_FocusOnNewRow(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 76
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_FocusOnEditableRow(this.obj3, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 178
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_FocusOnEditableRow(this.obj4, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 245
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_FocusOnEditableRow(this.obj5, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 371
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_FocusOnEditableRow(this.obj6, obj);
                }
            }
            private void Update_BasePricesVM_FuelPrices_Prices(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_BasePricesVM_FuelPrices_Prices(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 76
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj3, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 178
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj4, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 245
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj5, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 371
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj6, obj, null);
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsGroupedTaxExemptionInVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 178
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj4, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsTaxExemptionVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 245
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj5, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsTaxExemptionInVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 371
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj6, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_BasePricesVM_ReadTotalizerCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 496
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj7, obj, null);
                }
            }
            private void Update_BasePricesVM_FuelPrices_CanReadTotalizer(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 496
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj7, obj);
                }
            }
            private void Update_BasePricesVM_PrintCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 507
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                }
            }
            private void Update_BasePricesVM_SavePricesCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 515
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj9, obj, null);
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsReadTotalizerChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 475
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj10, (global::System.Nullable<global::System.Boolean>)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Nullable<global::System.Boolean>), null, null), null);
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsReadTankDipChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 478
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj11, (global::System.Nullable<global::System.Boolean>)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Nullable<global::System.Boolean>), null, null), null);
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsPricesToDisplayChecked(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 482
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj12, (global::System.Nullable<global::System.Boolean>)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Nullable<global::System.Boolean>), null, null), null);
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsCashPriceEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 426
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj13, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 300
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj15, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 206
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj19, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 103
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj22, obj);
                }
            }
            private void Update_BasePricesVM_SetPriceCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 426
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj13, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 443
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj14, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 300
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj15, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 317
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj16, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 334
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj17, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 351
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj18, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 206
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj19, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 223
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj20, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 103
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj22, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 120
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj23, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 138
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj24, obj, null);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 155
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj25, obj, null);
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsCreditPriceEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 443
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj14, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 334
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj17, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 223
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj20, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 138
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj24, obj);
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsTaxExemptedCashPriceEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 317
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj16, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 120
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj23, obj);
                }
            }
            private void Update_BasePricesVM_FuelPrices_IsTaxExemptedCreditPriceEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 351
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj18, obj);
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 155
                    XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_IsEdit(this.obj25, obj);
                }
            }
            private void Update_BasePricesVM_Caption(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 60
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj27, obj, null);
                }
            }
            private void Update_BasePricesVM_Caption2(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 66
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj28, obj, null);
                }
            }
            private void UpdateTwoWay_3_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.BasePricesVM != null)
                        {
                            this.dataRoot.BasePricesVM.SelectedPrice = (global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj3.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_4_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.BasePricesVM != null)
                        {
                            this.dataRoot.BasePricesVM.SelectedPrice = (global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj4.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_5_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.BasePricesVM != null)
                        {
                            this.dataRoot.BasePricesVM.SelectedPrice = (global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj5.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_6_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.BasePricesVM != null)
                        {
                            this.dataRoot.BasePricesVM.SelectedPrice = (global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj6.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class BasePrice_obj1_BindingsTracking
            {
                private global::System.WeakReference<BasePrice_obj1_Bindings> weakRefToBindingObj; 

                public BasePrice_obj1_BindingsTracking(BasePrice_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<BasePrice_obj1_Bindings>(obj);
                }

                public BasePrice_obj1_Bindings TryGetBindingObject()
                {
                    BasePrice_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_BasePricesVM(null);
                    UpdateChildListeners_BasePricesVM_SelectedPrice(null);
                    UpdateChildListeners_BasePricesVM_FuelPrices(null);
                    UpdateChildListeners_BasePricesVM_FuelPrices_Prices(null);
                }

                public void PropertyChanged_BasePricesVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    BasePrice_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.BasePricesVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.BasePricesVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_BasePricesVM_LoadPricesCommand(obj.LoadPricesCommand, DATA_CHANGED);
                                bindings.Update_BasePricesVM_SelectedPrice(obj.SelectedPrice, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices(obj.FuelPrices, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FocusOnNewRow(obj.FocusOnNewRow, DATA_CHANGED);
                                bindings.Update_BasePricesVM_ReadTotalizerCommand(obj.ReadTotalizerCommand, DATA_CHANGED);
                                bindings.Update_BasePricesVM_PrintCommand(obj.PrintCommand, DATA_CHANGED);
                                bindings.Update_BasePricesVM_SavePricesCommand(obj.SavePricesCommand, DATA_CHANGED);
                                bindings.Update_BasePricesVM_SetPriceCommand(obj.SetPriceCommand, DATA_CHANGED);
                                bindings.Update_BasePricesVM_Caption(obj.Caption, DATA_CHANGED);
                                bindings.Update_BasePricesVM_Caption2(obj.Caption2, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "LoadPricesCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_LoadPricesCommand(obj.LoadPricesCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPrice":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_SelectedPrice(obj.SelectedPrice, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FuelPrices":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices(obj.FuelPrices, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FocusOnNewRow":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FocusOnNewRow(obj.FocusOnNewRow, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ReadTotalizerCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_ReadTotalizerCommand(obj.ReadTotalizerCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PrintCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_PrintCommand(obj.PrintCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SavePricesCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_SavePricesCommand(obj.SavePricesCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SetPriceCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_SetPriceCommand(obj.SetPriceCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Caption":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_Caption(obj.Caption, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Caption2":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_Caption2(obj.Caption2, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.BasePricesVM cache_BasePricesVM = null;
                public void UpdateChildListeners_BasePricesVM(global::Infonet.CStoreCommander.UI.ViewModel.PumpOptions.FuelPricing.BasePricesVM obj)
                {
                    if (obj != cache_BasePricesVM)
                    {
                        if (cache_BasePricesVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_BasePricesVM).PropertyChanged -= PropertyChanged_BasePricesVM;
                            cache_BasePricesVM = null;
                        }
                        if (obj != null)
                        {
                            cache_BasePricesVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_BasePricesVM;
                        }
                    }
                }
                public void PropertyChanged_BasePricesVM_SelectedPrice(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    BasePrice_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel obj = sender as global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel cache_BasePricesVM_SelectedPrice = null;
                public void UpdateChildListeners_BasePricesVM_SelectedPrice(global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel obj)
                {
                    if (obj != cache_BasePricesVM_SelectedPrice)
                    {
                        if (cache_BasePricesVM_SelectedPrice != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_BasePricesVM_SelectedPrice).PropertyChanged -= PropertyChanged_BasePricesVM_SelectedPrice;
                            cache_BasePricesVM_SelectedPrice = null;
                        }
                        if (obj != null)
                        {
                            cache_BasePricesVM_SelectedPrice = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_BasePricesVM_SelectedPrice;
                        }
                    }
                }
                public void PropertyChanged_BasePricesVM_FuelPrices(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    BasePrice_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPricesModel obj = sender as global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPricesModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_BasePricesVM_FuelPrices_IsGroupedTaxExemptionVisible(obj.IsGroupedTaxExemptionVisible, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_Prices(obj.Prices, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsGroupedTaxExemptionInVisible(obj.IsGroupedTaxExemptionInVisible, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsTaxExemptionVisible(obj.IsTaxExemptionVisible, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsTaxExemptionInVisible(obj.IsTaxExemptionInVisible, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_CanReadTotalizer(obj.CanReadTotalizer, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsReadTotalizerChecked(obj.IsReadTotalizerChecked, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsReadTankDipChecked(obj.IsReadTankDipChecked, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsPricesToDisplayChecked(obj.IsPricesToDisplayChecked, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsCashPriceEnabled(obj.IsCashPriceEnabled, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsCreditPriceEnabled(obj.IsCreditPriceEnabled, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsTaxExemptedCashPriceEnabled(obj.IsTaxExemptedCashPriceEnabled, DATA_CHANGED);
                                bindings.Update_BasePricesVM_FuelPrices_IsTaxExemptedCreditPriceEnabled(obj.IsTaxExemptedCreditPriceEnabled, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsGroupedTaxExemptionVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsGroupedTaxExemptionVisible(obj.IsGroupedTaxExemptionVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Prices":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_Prices(obj.Prices, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsGroupedTaxExemptionInVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsGroupedTaxExemptionInVisible(obj.IsGroupedTaxExemptionInVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxExemptionVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsTaxExemptionVisible(obj.IsTaxExemptionVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxExemptionInVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsTaxExemptionInVisible(obj.IsTaxExemptionInVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CanReadTotalizer":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_CanReadTotalizer(obj.CanReadTotalizer, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsReadTotalizerChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsReadTotalizerChecked(obj.IsReadTotalizerChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsReadTankDipChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsReadTankDipChecked(obj.IsReadTankDipChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPricesToDisplayChecked":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsPricesToDisplayChecked(obj.IsPricesToDisplayChecked, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCashPriceEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsCashPriceEnabled(obj.IsCashPriceEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCreditPriceEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsCreditPriceEnabled(obj.IsCreditPriceEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxExemptedCashPriceEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsTaxExemptedCashPriceEnabled(obj.IsTaxExemptedCashPriceEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxExemptedCreditPriceEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_BasePricesVM_FuelPrices_IsTaxExemptedCreditPriceEnabled(obj.IsTaxExemptedCreditPriceEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPricesModel cache_BasePricesVM_FuelPrices = null;
                public void UpdateChildListeners_BasePricesVM_FuelPrices(global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPricesModel obj)
                {
                    if (obj != cache_BasePricesVM_FuelPrices)
                    {
                        if (cache_BasePricesVM_FuelPrices != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_BasePricesVM_FuelPrices).PropertyChanged -= PropertyChanged_BasePricesVM_FuelPrices;
                            cache_BasePricesVM_FuelPrices = null;
                        }
                        if (obj != null)
                        {
                            cache_BasePricesVM_FuelPrices = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_BasePricesVM_FuelPrices;
                        }
                    }
                }
                public void PropertyChanged_BasePricesVM_FuelPrices_Prices(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    BasePrice_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_BasePricesVM_FuelPrices_Prices(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    BasePrice_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel> cache_BasePricesVM_FuelPrices_Prices = null;
                public void UpdateChildListeners_BasePricesVM_FuelPrices_Prices(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.FuelPump.FuelPriceModel> obj)
                {
                    if (obj != cache_BasePricesVM_FuelPrices_Prices)
                    {
                        if (cache_BasePricesVM_FuelPrices_Prices != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_BasePricesVM_FuelPrices_Prices).PropertyChanged -= PropertyChanged_BasePricesVM_FuelPrices_Prices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_BasePricesVM_FuelPrices_Prices).CollectionChanged -= CollectionChanged_BasePricesVM_FuelPrices_Prices;
                            cache_BasePricesVM_FuelPrices_Prices = null;
                        }
                        if (obj != null)
                        {
                            cache_BasePricesVM_FuelPrices_Prices = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_BasePricesVM_FuelPrices_Prices;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_BasePricesVM_FuelPrices_Prices;
                        }
                    }
                }
                public void RegisterTwoWayListener_3(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_4(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_5(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_5_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_6(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_6_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 7: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 496
                {
                    this.btnReadTotalizer = (global::Infonet.CStoreCommander.ControlLib.GenericButton)(target);
                }
                break;
            case 21: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 201
                {
                    this.Grade = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 26: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 133
                {
                    this.txtUnitTaxFree = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\PumpOptions\Fuel Pricing\BasePrice.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    BasePrice_obj1_Bindings bindings = new BasePrice_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

