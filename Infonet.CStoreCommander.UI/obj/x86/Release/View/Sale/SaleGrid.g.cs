#pragma checksum "F:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Sale\SaleGrid.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "FEC8D3FDB1C91BDEDA1129170ABB970B"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Sale
{
    partial class SaleGrid : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_MyToolkit_Controls_DataGrid_ItemsSource(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_DeleteCommand(global::MyToolkit.Controls.DataGrid obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.DeleteCommand = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_FocusOnEditableRow(global::MyToolkit.Controls.DataGrid obj, global::System.Boolean value)
            {
                obj.FocusOnEditableRow = value;
            }
            public static void Set_MyToolkit_Controls_DataGridTextColumn_FocusOnEditableRow(global::MyToolkit.Controls.DataGridTextColumn obj, global::System.Boolean value)
            {
                obj.FocusOnEditableRow = value;
            }
            public static void Set_MyToolkit_Controls_DataGrid_SelectedItem(global::MyToolkit.Controls.DataGrid obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(global::MyToolkit.Controls.DataGridTextColumn obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.KeyUpCommand = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class SaleGrid_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            ISaleGrid_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Sale.SaleGrid dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::MyToolkit.Controls.DataGrid obj2;
            private global::System.Object obj2ItemsSourceDeferredValue;
            private global::System.Windows.Input.ICommand obj2DeleteCommandDeferredValue;
            private global::System.Boolean obj2FocusOnEditableRowDeferredValue;
            private global::System.Object obj2SelectedItemDeferredValue;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj3;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj4;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj5;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj6;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj7;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj8;
            private global::Windows.UI.Xaml.Controls.Button obj9;
            private global::Windows.UI.Xaml.Controls.TextBlock obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;
            private global::Windows.UI.Xaml.Controls.TextBlock obj13;
            private global::MyToolkit.Controls.DataGridTextColumn obj14;
            private global::System.Boolean obj14FocusOnEditableRowDeferredValue;
            private global::MyToolkit.Controls.DataGridTextColumn obj15;
            private global::System.Windows.Input.ICommand obj15KeyUpCommandDeferredValue;
            private global::MyToolkit.Controls.DataGridTextColumn obj16;
            private global::System.Windows.Input.ICommand obj16KeyUpCommandDeferredValue;
            private global::MyToolkit.Controls.DataGridTextColumn obj17;
            private global::System.Windows.Input.ICommand obj17KeyUpCommandDeferredValue;

            private SaleGrid_obj1_BindingsTracking bindingsTracking;

            public SaleGrid_obj1_Bindings()
            {
                this.bindingsTracking = new SaleGrid_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\Sale\SaleGrid.xaml line 60
                        this.obj2 = (global::MyToolkit.Controls.DataGrid)target;
                        // View\Sale\SaleGrid.xaml line 60
                        if (this.obj2 != null)
                        {
                            XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj2, this.obj2ItemsSourceDeferredValue, null);
                        }
                        // View\Sale\SaleGrid.xaml line 60
                        if (this.obj2 != null)
                        {
                            XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_DeleteCommand(this.obj2, this.obj2DeleteCommandDeferredValue, null);
                        }
                        // View\Sale\SaleGrid.xaml line 60
                        if (this.obj2 != null)
                        {
                            XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_FocusOnEditableRow(this.obj2, this.obj2FocusOnEditableRowDeferredValue);
                        }
                        // View\Sale\SaleGrid.xaml line 60
                        if (this.obj2 != null)
                        {
                            XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj2, this.obj2SelectedItemDeferredValue, null);
                        }
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // View\Sale\SaleGrid.xaml line 320
                        this.obj3 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 4: // View\Sale\SaleGrid.xaml line 306
                        this.obj4 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 5: // View\Sale\SaleGrid.xaml line 310
                        this.obj5 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 6: // View\Sale\SaleGrid.xaml line 314
                        this.obj6 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 7: // View\Sale\SaleGrid.xaml line 246
                        this.obj7 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 8: // View\Sale\SaleGrid.xaml line 251
                        this.obj8 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 9: // View\Sale\SaleGrid.xaml line 269
                        this.obj9 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 10: // View\Sale\SaleGrid.xaml line 285
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 11: // View\Sale\SaleGrid.xaml line 227
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12: // View\Sale\SaleGrid.xaml line 219
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 13: // View\Sale\SaleGrid.xaml line 208
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 14: // View\Sale\SaleGrid.xaml line 75
                        this.obj14 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        // View\Sale\SaleGrid.xaml line 75
                        if (this.obj14 != null)
                        {
                            XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_FocusOnEditableRow(this.obj14, this.obj14FocusOnEditableRowDeferredValue);
                        }
                        break;
                    case 15: // View\Sale\SaleGrid.xaml line 108
                        this.obj15 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        // View\Sale\SaleGrid.xaml line 108
                        if (this.obj15 != null)
                        {
                            XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj15, this.obj15KeyUpCommandDeferredValue, null);
                        }
                        break;
                    case 16: // View\Sale\SaleGrid.xaml line 127
                        this.obj16 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        // View\Sale\SaleGrid.xaml line 127
                        if (this.obj16 != null)
                        {
                            XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj16, this.obj16KeyUpCommandDeferredValue, null);
                        }
                        break;
                    case 17: // View\Sale\SaleGrid.xaml line 146
                        this.obj17 = (global::MyToolkit.Controls.DataGridTextColumn)target;
                        // View\Sale\SaleGrid.xaml line 146
                        if (this.obj17 != null)
                        {
                            XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj17, this.obj17KeyUpCommandDeferredValue, null);
                        }
                        break;
                    default:
                        break;
                }
            }

            // ISaleGrid_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                switch (connectionId)
                {
                    case 2: // View\Sale\SaleGrid.xaml line 60
                    {
                        if (this.obj2 != null)
                        {
                            this.obj2ItemsSourceDeferredValue = this.obj2.ItemsSource;
                            this.obj2DeleteCommandDeferredValue = this.obj2.DeleteCommand;
                            this.obj2FocusOnEditableRowDeferredValue = this.obj2.FocusOnEditableRow;
                            this.obj2SelectedItemDeferredValue = this.obj2.SelectedItem;
                            this.obj2 = null;
                        }
                        this.DisconnectUnloadedObject(14);
                        this.DisconnectUnloadedObject(15);
                        this.DisconnectUnloadedObject(16);
                        this.DisconnectUnloadedObject(17);
                        break;
                    }
                    case 14: // View\Sale\SaleGrid.xaml line 75
                    {
                        if (this.obj14 != null)
                        {
                            this.obj14FocusOnEditableRowDeferredValue = this.obj14.FocusOnEditableRow;
                            this.obj14 = null;
                        }
                        break;
                    }
                    case 15: // View\Sale\SaleGrid.xaml line 108
                    {
                        if (this.obj15 != null)
                        {
                            this.obj15KeyUpCommandDeferredValue = this.obj15.KeyUpCommand;
                            this.obj15 = null;
                        }
                        break;
                    }
                    case 16: // View\Sale\SaleGrid.xaml line 127
                    {
                        if (this.obj16 != null)
                        {
                            this.obj16KeyUpCommandDeferredValue = this.obj16.KeyUpCommand;
                            this.obj16 = null;
                        }
                        break;
                    }
                    case 17: // View\Sale\SaleGrid.xaml line 146
                    {
                        if (this.obj17 != null)
                        {
                            this.obj17KeyUpCommandDeferredValue = this.obj17.KeyUpCommand;
                            this.obj17 = null;
                        }
                        break;
                    }
                    default:
                    {
                        throw new global::System.ArgumentException("Invalid connectionId.");
                    }
                }
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Sale.SaleGrid)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Sale.SaleGrid obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SaleGridVM(obj.SaleGridVM, phase);
                    }
                }
            }
            private void Update_SaleGridVM(global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleGridVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SaleGridVM_SaleModel(obj.SaleModel, phase);
                        this.Update_SaleGridVM_SaleLineDeletedCommand(obj.SaleLineDeletedCommand, phase);
                        this.Update_SaleGridVM_FocusOnNewRow(obj.FocusOnNewRow, phase);
                        this.Update_SaleGridVM_SelectedSaleLine(obj.SelectedSaleLine, phase);
                        this.Update_SaleGridVM_IsAcceptTenderEnabled(obj.IsAcceptTenderEnabled, phase);
                        this.Update_SaleGridVM_AcceptTenderCommand(obj.AcceptTenderCommand, phase);
                        this.Update_SaleGridVM_OpenCheckoutOptionsPopupCommmand(obj.OpenCheckoutOptionsPopupCommmand, phase);
                        this.Update_SaleGridVM_IsCashDrawerEnabled(obj.IsCashDrawerEnabled, phase);
                        this.Update_SaleGridVM_OpenCashDrawerCommand(obj.OpenCashDrawerCommand, phase);
                        this.Update_SaleGridVM_ExactChangeCommand(obj.ExactChangeCommand, phase);
                        this.Update_SaleGridVM_IsExactCashEnabled(obj.IsExactCashEnabled, phase);
                        this.Update_SaleGridVM_RaiseCustomerPopupCommand(obj.RaiseCustomerPopupCommand, phase);
                        this.Update_SaleGridVM_RaiseLoyaltyGiftPopupCommand(obj.RaiseLoyaltyGiftPopupCommand, phase);
                        this.Update_SaleGridVM_IsVoidSaleVisible(obj.IsVoidSaleVisible, phase);
                        this.Update_SaleGridVM_RaiseVoidSalePopupCommand(obj.RaiseVoidSalePopupCommand, phase);
                        this.Update_SaleGridVM_CustomerName(obj.CustomerName, phase);
                        this.Update_SaleGridVM_SaleNumber(obj.SaleNumber, phase);
                        this.Update_SaleGridVM_QuantityChangedCommand(obj.QuantityChangedCommand, phase);
                        this.Update_SaleGridVM_PriceChangedCommand(obj.PriceChangedCommand, phase);
                        this.Update_SaleGridVM_DiscountChangedCommand(obj.DiscountChangedCommand, phase);
                    }
                }
            }
            private void Update_SaleGridVM_SaleModel(global::Infonet.CStoreCommander.UI.Model.Sale.SaleModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleGridVM_SaleModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SaleGridVM_SaleModel_SaleLines(obj.SaleLines, phase);
                        this.Update_SaleGridVM_SaleModel_TotalAmount(obj.TotalAmount, phase);
                        this.Update_SaleGridVM_SaleModel_Summary(obj.Summary, phase);
                    }
                }
            }
            private void Update_SaleGridVM_SaleModel_SaleLines(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleGridVM_SaleModel_SaleLines(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 60
                    if (this.obj2 != null)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_ItemsSource(this.obj2, obj, null);
                    }
                    else
                    {
                        this.obj2ItemsSourceDeferredValue = obj;
                    }
                }
            }
            private void Update_SaleGridVM_SaleLineDeletedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 60
                    if (this.obj2 != null)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_DeleteCommand(this.obj2, obj, null);
                    }
                    else
                    {
                        this.obj2DeleteCommandDeferredValue = obj;
                    }
                }
            }
            private void Update_SaleGridVM_FocusOnNewRow(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 60
                    if (this.obj2 != null)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_FocusOnEditableRow(this.obj2, obj);
                    }
                    else
                    {
                        this.obj2FocusOnEditableRowDeferredValue = obj;
                    }
                    // View\Sale\SaleGrid.xaml line 75
                    if (this.obj14 != null)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_FocusOnEditableRow(this.obj14, obj);
                    }
                    else
                    {
                        this.obj14FocusOnEditableRowDeferredValue = obj;
                    }
                }
            }
            private void Update_SaleGridVM_SelectedSaleLine(global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_SaleGridVM_SelectedSaleLine(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 60
                    if (this.obj2 != null)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGrid_SelectedItem(this.obj2, (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null), null);
                    }
                    else
                    {
                        this.obj2SelectedItemDeferredValue = (global::System.Object)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Object), null, null);
                    }
                }
            }
            private void Update_SaleGridVM_IsAcceptTenderEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 320
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj3, obj);
                }
            }
            private void Update_SaleGridVM_AcceptTenderCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 320
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj3, obj, null);
                }
            }
            private void Update_SaleGridVM_OpenCheckoutOptionsPopupCommmand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 306
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj4, obj, null);
                }
            }
            private void Update_SaleGridVM_IsCashDrawerEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 310
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj5, obj);
                }
            }
            private void Update_SaleGridVM_OpenCashDrawerCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 310
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj5, obj, null);
                }
            }
            private void Update_SaleGridVM_ExactChangeCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 314
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj6, obj, null);
                }
            }
            private void Update_SaleGridVM_IsExactCashEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 314
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj6, obj);
                }
            }
            private void Update_SaleGridVM_RaiseCustomerPopupCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 246
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj7, obj, null);
                }
            }
            private void Update_SaleGridVM_RaiseLoyaltyGiftPopupCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 251
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                }
            }
            private void Update_SaleGridVM_IsVoidSaleVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 269
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("DeleteAllLineItems").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_SaleGridVM_RaiseVoidSalePopupCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 269
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj9, obj, null);
                }
            }
            private void Update_SaleGridVM_SaleModel_TotalAmount(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 285
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj10, (global::System.String)this.LookupConverter("CurrencyConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_SaleGridVM_SaleModel_Summary(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 227
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                }
            }
            private void Update_SaleGridVM_CustomerName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 219
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                }
            }
            private void Update_SaleGridVM_SaleNumber(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 208
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj13, obj.ToString(), null);
                }
            }
            private void Update_SaleGridVM_QuantityChangedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 108
                    if (this.obj15 != null)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj15, obj, null);
                    }
                    else
                    {
                        this.obj15KeyUpCommandDeferredValue = obj;
                    }
                }
            }
            private void Update_SaleGridVM_PriceChangedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 127
                    if (this.obj16 != null)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj16, obj, null);
                    }
                    else
                    {
                        this.obj16KeyUpCommandDeferredValue = obj;
                    }
                }
            }
            private void Update_SaleGridVM_DiscountChangedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Sale\SaleGrid.xaml line 146
                    if (this.obj17 != null)
                    {
                        XamlBindingSetters.Set_MyToolkit_Controls_DataGridTextColumn_KeyUpCommand(this.obj17, obj, null);
                    }
                    else
                    {
                        this.obj17KeyUpCommandDeferredValue = obj;
                    }
                }
            }
            private void UpdateTwoWay_2_SelectedItem()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.SaleGridVM != null)
                        {
                            this.dataRoot.SaleGridVM.SelectedSaleLine = (global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel)this.LookupConverter("NothingConverter").ConvertBack(this.obj2.SelectedItem, typeof(global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel), null, null);
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class SaleGrid_obj1_BindingsTracking
            {
                private global::System.WeakReference<SaleGrid_obj1_Bindings> weakRefToBindingObj; 

                public SaleGrid_obj1_BindingsTracking(SaleGrid_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<SaleGrid_obj1_Bindings>(obj);
                }

                public SaleGrid_obj1_Bindings TryGetBindingObject()
                {
                    SaleGrid_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_SaleGridVM(null);
                    UpdateChildListeners_SaleGridVM_SaleModel(null);
                    UpdateChildListeners_SaleGridVM_SaleModel_SaleLines(null);
                    UpdateChildListeners_SaleGridVM_SelectedSaleLine(null);
                }

                public void PropertyChanged_SaleGridVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SaleGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_SaleGridVM_SaleModel(obj.SaleModel, DATA_CHANGED);
                                bindings.Update_SaleGridVM_SaleLineDeletedCommand(obj.SaleLineDeletedCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_FocusOnNewRow(obj.FocusOnNewRow, DATA_CHANGED);
                                bindings.Update_SaleGridVM_SelectedSaleLine(obj.SelectedSaleLine, DATA_CHANGED);
                                bindings.Update_SaleGridVM_IsAcceptTenderEnabled(obj.IsAcceptTenderEnabled, DATA_CHANGED);
                                bindings.Update_SaleGridVM_AcceptTenderCommand(obj.AcceptTenderCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_OpenCheckoutOptionsPopupCommmand(obj.OpenCheckoutOptionsPopupCommmand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_IsCashDrawerEnabled(obj.IsCashDrawerEnabled, DATA_CHANGED);
                                bindings.Update_SaleGridVM_OpenCashDrawerCommand(obj.OpenCashDrawerCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_ExactChangeCommand(obj.ExactChangeCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_IsExactCashEnabled(obj.IsExactCashEnabled, DATA_CHANGED);
                                bindings.Update_SaleGridVM_RaiseCustomerPopupCommand(obj.RaiseCustomerPopupCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_RaiseLoyaltyGiftPopupCommand(obj.RaiseLoyaltyGiftPopupCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_IsVoidSaleVisible(obj.IsVoidSaleVisible, DATA_CHANGED);
                                bindings.Update_SaleGridVM_RaiseVoidSalePopupCommand(obj.RaiseVoidSalePopupCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_CustomerName(obj.CustomerName, DATA_CHANGED);
                                bindings.Update_SaleGridVM_SaleNumber(obj.SaleNumber, DATA_CHANGED);
                                bindings.Update_SaleGridVM_QuantityChangedCommand(obj.QuantityChangedCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_PriceChangedCommand(obj.PriceChangedCommand, DATA_CHANGED);
                                bindings.Update_SaleGridVM_DiscountChangedCommand(obj.DiscountChangedCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SaleModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_SaleModel(obj.SaleModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SaleLineDeletedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_SaleLineDeletedCommand(obj.SaleLineDeletedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FocusOnNewRow":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_FocusOnNewRow(obj.FocusOnNewRow, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedSaleLine":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_SelectedSaleLine(obj.SelectedSaleLine, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAcceptTenderEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_IsAcceptTenderEnabled(obj.IsAcceptTenderEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AcceptTenderCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_AcceptTenderCommand(obj.AcceptTenderCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenCheckoutOptionsPopupCommmand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_OpenCheckoutOptionsPopupCommmand(obj.OpenCheckoutOptionsPopupCommmand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCashDrawerEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_IsCashDrawerEnabled(obj.IsCashDrawerEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OpenCashDrawerCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_OpenCashDrawerCommand(obj.OpenCashDrawerCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ExactChangeCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_ExactChangeCommand(obj.ExactChangeCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsExactCashEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_IsExactCashEnabled(obj.IsExactCashEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RaiseCustomerPopupCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_RaiseCustomerPopupCommand(obj.RaiseCustomerPopupCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RaiseLoyaltyGiftPopupCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_RaiseLoyaltyGiftPopupCommand(obj.RaiseLoyaltyGiftPopupCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsVoidSaleVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_IsVoidSaleVisible(obj.IsVoidSaleVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RaiseVoidSalePopupCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_RaiseVoidSalePopupCommand(obj.RaiseVoidSalePopupCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "CustomerName":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_CustomerName(obj.CustomerName, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SaleNumber":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_SaleNumber(obj.SaleNumber, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "QuantityChangedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_QuantityChangedCommand(obj.QuantityChangedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PriceChangedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_PriceChangedCommand(obj.PriceChangedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DiscountChangedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_DiscountChangedCommand(obj.DiscountChangedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM cache_SaleGridVM = null;
                public void UpdateChildListeners_SaleGridVM(global::Infonet.CStoreCommander.UI.ViewModel.Sale.SaleGridVM obj)
                {
                    if (obj != cache_SaleGridVM)
                    {
                        if (cache_SaleGridVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleGridVM).PropertyChanged -= PropertyChanged_SaleGridVM;
                            cache_SaleGridVM = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleGridVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleGridVM;
                        }
                    }
                }
                public void PropertyChanged_SaleGridVM_SaleModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SaleGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Sale.SaleModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Sale.SaleModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_SaleGridVM_SaleModel_SaleLines(obj.SaleLines, DATA_CHANGED);
                                bindings.Update_SaleGridVM_SaleModel_TotalAmount(obj.TotalAmount, DATA_CHANGED);
                                bindings.Update_SaleGridVM_SaleModel_Summary(obj.Summary, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SaleLines":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_SaleModel_SaleLines(obj.SaleLines, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TotalAmount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_SaleModel_TotalAmount(obj.TotalAmount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Summary":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_SaleGridVM_SaleModel_Summary(obj.Summary, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.Sale.SaleModel cache_SaleGridVM_SaleModel = null;
                public void UpdateChildListeners_SaleGridVM_SaleModel(global::Infonet.CStoreCommander.UI.Model.Sale.SaleModel obj)
                {
                    if (obj != cache_SaleGridVM_SaleModel)
                    {
                        if (cache_SaleGridVM_SaleModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleGridVM_SaleModel).PropertyChanged -= PropertyChanged_SaleGridVM_SaleModel;
                            cache_SaleGridVM_SaleModel = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleGridVM_SaleModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleGridVM_SaleModel;
                        }
                    }
                }
                public void PropertyChanged_SaleGridVM_SaleModel_SaleLines(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SaleGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_SaleGridVM_SaleModel_SaleLines(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    SaleGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel> cache_SaleGridVM_SaleModel_SaleLines = null;
                public void UpdateChildListeners_SaleGridVM_SaleModel_SaleLines(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel> obj)
                {
                    if (obj != cache_SaleGridVM_SaleModel_SaleLines)
                    {
                        if (cache_SaleGridVM_SaleModel_SaleLines != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleGridVM_SaleModel_SaleLines).PropertyChanged -= PropertyChanged_SaleGridVM_SaleModel_SaleLines;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_SaleGridVM_SaleModel_SaleLines).CollectionChanged -= CollectionChanged_SaleGridVM_SaleModel_SaleLines;
                            cache_SaleGridVM_SaleModel_SaleLines = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleGridVM_SaleModel_SaleLines = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleGridVM_SaleModel_SaleLines;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_SaleGridVM_SaleModel_SaleLines;
                        }
                    }
                }
                public void PropertyChanged_SaleGridVM_SelectedSaleLine(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    SaleGrid_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel cache_SaleGridVM_SelectedSaleLine = null;
                public void UpdateChildListeners_SaleGridVM_SelectedSaleLine(global::Infonet.CStoreCommander.UI.Model.Sale.SaleLineModel obj)
                {
                    if (obj != cache_SaleGridVM_SelectedSaleLine)
                    {
                        if (cache_SaleGridVM_SelectedSaleLine != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_SaleGridVM_SelectedSaleLine).PropertyChanged -= PropertyChanged_SaleGridVM_SelectedSaleLine;
                            cache_SaleGridVM_SelectedSaleLine = null;
                        }
                        if (obj != null)
                        {
                            cache_SaleGridVM_SelectedSaleLine = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_SaleGridVM_SelectedSaleLine;
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::MyToolkit.Controls.DataGrid sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::MyToolkit.Controls.DataGrid.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_SelectedItem();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // View\Sale\SaleGrid.xaml line 60
                {
                    this.GridSale = (global::MyToolkit.Controls.DataGrid)(target);
                }
                break;
            case 4: // View\Sale\SaleGrid.xaml line 306
                {
                    this.btnOptions = (global::Infonet.CStoreCommander.ControlLib.GenericButton)(target);
                }
                break;
            case 14: // View\Sale\SaleGrid.xaml line 75
                {
                    this.txtStockCode = (global::MyToolkit.Controls.DataGridTextColumn)(target);
                }
                break;
            case 18: // View\Sale\SaleGrid.xaml line 165
                {
                    this.Column = (global::MyToolkit.Controls.DataGridTextColumn)(target);
                }
                break;
            case 19: // View\Sale\SaleGrid.xaml line 175
                {
                    this.txtAmount = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 20: // View\Sale\SaleGrid.xaml line 160
                {
                    this.txtDiscount = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 21: // View\Sale\SaleGrid.xaml line 141
                {
                    this.txtPrice = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 22: // View\Sale\SaleGrid.xaml line 122
                {
                    this.txtQuantity = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 23: // View\Sale\SaleGrid.xaml line 103
                {
                    this.txtbDescription = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 24: // View\Sale\SaleGrid.xaml line 88
                {
                    this.txtbCode = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// UnloadObject(DependencyObject)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        partial void UnloadObject(global::Windows.UI.Xaml.DependencyObject unloadableObject)
        {
            if (unloadableObject != null)
            {
                // View\Sale\SaleGrid.xaml line 60
                if (unloadableObject == this.GridSale)
                { 
                    this.DisconnectUnloadedObject(2);
                }
                global::Windows.UI.Xaml.Markup.XamlMarkupHelper.UnloadObject(unloadableObject);
            }
        }

        /// <summary>
        /// DisconnectUnloadedObject(int connectionId)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void DisconnectUnloadedObject(int connectionId)
        {
            switch(connectionId)
            {
                case 2: // View\Sale\SaleGrid.xaml line 60
                {
                    this.DisconnectUnloadedObject(14);
                    this.Bindings.DisconnectUnloadedObject(14);
                    this.Bindings.DisconnectUnloadedObject(15);
                    this.Bindings.DisconnectUnloadedObject(16);
                    this.Bindings.DisconnectUnloadedObject(17);
                    this.DisconnectUnloadedObject(18);
                    this.DisconnectUnloadedObject(23);
                    this.Bindings.DisconnectUnloadedObject(2);
                    this.GridSale = null;
                    break;
                }
                case 14: // View\Sale\SaleGrid.xaml line 75
                {
                    this.DisconnectUnloadedObject(24);
                    this.Bindings.DisconnectUnloadedObject(14);
                    this.txtStockCode = null;
                    break;
                }
                case 18: // View\Sale\SaleGrid.xaml line 165
                {
                    this.DisconnectUnloadedObject(19);
                    this.Column = null;
                    break;
                }
                case 19: // View\Sale\SaleGrid.xaml line 175
                {
                    this.txtAmount = null;
                    break;
                }
                case 20: // View\Sale\SaleGrid.xaml line 160
                {
                    this.txtDiscount = null;
                    break;
                }
                case 21: // View\Sale\SaleGrid.xaml line 141
                {
                    this.txtPrice = null;
                    break;
                }
                case 22: // View\Sale\SaleGrid.xaml line 122
                {
                    this.txtQuantity = null;
                    break;
                }
                case 23: // View\Sale\SaleGrid.xaml line 103
                {
                    this.txtbDescription = null;
                    break;
                }
                case 24: // View\Sale\SaleGrid.xaml line 88
                {
                    this.txtbCode = null;
                    break;
                }
                default:
                {
                    throw new global::System.ArgumentException("Invalid connectionId.");
                }
            }
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Sale\SaleGrid.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    SaleGrid_obj1_Bindings bindings = new SaleGrid_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

