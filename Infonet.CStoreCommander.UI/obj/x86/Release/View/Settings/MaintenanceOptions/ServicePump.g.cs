#pragma checksum "F:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Settings\MaintenanceOptions\ServicePump.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "DB3DAA62DB63BD4C036FD8D0F904C7E4"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Settings.MaintenanceOptions
{
    partial class ServicePump : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, global::System.Boolean value)
            {
                obj.IsOn = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ServicePump_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IServicePump_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Settings.MaintenanceOptions.ServicePump dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj2;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj3;
            private global::Windows.UI.Xaml.Controls.ToggleSwitch obj4;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj5;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj6;

            private ServicePump_obj1_BindingsTracking bindingsTracking;

            public ServicePump_obj1_Bindings()
            {
                this.bindingsTracking = new ServicePump_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // View\Settings\MaintenanceOptions\ServicePump.xaml line 32
                        this.obj2 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_2(this.obj2);
                        break;
                    case 3: // View\Settings\MaintenanceOptions\ServicePump.xaml line 46
                        this.obj3 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_3(this.obj3);
                        break;
                    case 4: // View\Settings\MaintenanceOptions\ServicePump.xaml line 60
                        this.obj4 = (global::Windows.UI.Xaml.Controls.ToggleSwitch)target;
                        this.bindingsTracking.RegisterTwoWayListener_4(this.obj4);
                        break;
                    case 5: // View\Settings\MaintenanceOptions\ServicePump.xaml line 53
                        this.obj5 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    case 6: // View\Settings\MaintenanceOptions\ServicePump.xaml line 39
                        this.obj6 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IServicePump_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Settings.MaintenanceOptions.ServicePump)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Settings.MaintenanceOptions.ServicePump obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_MaintenanceVM(obj.MaintenanceVM, phase);
                        this.Update_tgPrePay(obj.tgPrePay, phase);
                        this.Update_tgPostPay(obj.tgPostPay, phase);
                    }
                }
            }
            private void Update_MaintenanceVM(global::Infonet.CStoreCommander.UI.ViewModel.SettingsMenu.MaintenanceVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_MaintenanceVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_MaintenanceVM_IsPostPayOn(obj.IsPostPayOn, phase);
                        this.Update_MaintenanceVM_IsPrepayOn(obj.IsPrepayOn, phase);
                        this.Update_MaintenanceVM_IsPayAtPumpOn(obj.IsPayAtPumpOn, phase);
                        this.Update_MaintenanceVM_PrepaySwitchedCommand(obj.PrepaySwitchedCommand, phase);
                        this.Update_MaintenanceVM_PostpaySwitchedCommand(obj.PostpaySwitchedCommand, phase);
                    }
                }
            }
            private void Update_MaintenanceVM_IsPostPayOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Settings\MaintenanceOptions\ServicePump.xaml line 32
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj2, obj);
                }
            }
            private void Update_MaintenanceVM_IsPrepayOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Settings\MaintenanceOptions\ServicePump.xaml line 46
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj3, obj);
                }
            }
            private void Update_MaintenanceVM_IsPayAtPumpOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Settings\MaintenanceOptions\ServicePump.xaml line 60
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ToggleSwitch_IsOn(this.obj4, obj);
                }
            }
            private void Update_MaintenanceVM_PrepaySwitchedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Settings\MaintenanceOptions\ServicePump.xaml line 53
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj5, obj, null);
                }
            }
            private void Update_tgPrePay(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_tgPrePay(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_tgPrePay_IsOn(obj.IsOn, phase);
                    }
                }
            }
            private void Update_tgPrePay_IsOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Settings\MaintenanceOptions\ServicePump.xaml line 53
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(this.obj5, obj, null);
                }
            }
            private void Update_MaintenanceVM_PostpaySwitchedCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Settings\MaintenanceOptions\ServicePump.xaml line 39
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj6, obj, null);
                }
            }
            private void Update_tgPostPay(global::Windows.UI.Xaml.Controls.ToggleSwitch obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_tgPostPay(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_tgPostPay_IsOn(obj.IsOn, phase);
                    }
                }
            }
            private void Update_tgPostPay_IsOn(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Settings\MaintenanceOptions\ServicePump.xaml line 39
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_CommandParameter(this.obj6, obj, null);
                }
            }
            private void UpdateTwoWay_2_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.MaintenanceVM != null)
                        {
                            this.dataRoot.MaintenanceVM.IsPostPayOn = this.obj2.IsOn;
                        }
                    }
                }
            }
            private void UpdateTwoWay_3_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.MaintenanceVM != null)
                        {
                            this.dataRoot.MaintenanceVM.IsPrepayOn = this.obj3.IsOn;
                        }
                    }
                }
            }
            private void UpdateTwoWay_4_IsOn()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.MaintenanceVM != null)
                        {
                            this.dataRoot.MaintenanceVM.IsPayAtPumpOn = this.obj4.IsOn;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ServicePump_obj1_BindingsTracking
            {
                private global::System.WeakReference<ServicePump_obj1_Bindings> weakRefToBindingObj; 

                public ServicePump_obj1_BindingsTracking(ServicePump_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ServicePump_obj1_Bindings>(obj);
                }

                public ServicePump_obj1_Bindings TryGetBindingObject()
                {
                    ServicePump_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_MaintenanceVM(null);
                    UpdateChildListeners_tgPrePay(null);
                    UpdateChildListeners_tgPostPay(null);
                }

                public void PropertyChanged_MaintenanceVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ServicePump_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.SettingsMenu.MaintenanceVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.SettingsMenu.MaintenanceVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_MaintenanceVM_IsPostPayOn(obj.IsPostPayOn, DATA_CHANGED);
                                bindings.Update_MaintenanceVM_IsPrepayOn(obj.IsPrepayOn, DATA_CHANGED);
                                bindings.Update_MaintenanceVM_IsPayAtPumpOn(obj.IsPayAtPumpOn, DATA_CHANGED);
                                bindings.Update_MaintenanceVM_PrepaySwitchedCommand(obj.PrepaySwitchedCommand, DATA_CHANGED);
                                bindings.Update_MaintenanceVM_PostpaySwitchedCommand(obj.PostpaySwitchedCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsPostPayOn":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MaintenanceVM_IsPostPayOn(obj.IsPostPayOn, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPrepayOn":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MaintenanceVM_IsPrepayOn(obj.IsPrepayOn, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPayAtPumpOn":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MaintenanceVM_IsPayAtPumpOn(obj.IsPayAtPumpOn, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PrepaySwitchedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MaintenanceVM_PrepaySwitchedCommand(obj.PrepaySwitchedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PostpaySwitchedCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_MaintenanceVM_PostpaySwitchedCommand(obj.PostpaySwitchedCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.SettingsMenu.MaintenanceVM cache_MaintenanceVM = null;
                public void UpdateChildListeners_MaintenanceVM(global::Infonet.CStoreCommander.UI.ViewModel.SettingsMenu.MaintenanceVM obj)
                {
                    if (obj != cache_MaintenanceVM)
                    {
                        if (cache_MaintenanceVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_MaintenanceVM).PropertyChanged -= PropertyChanged_MaintenanceVM;
                            cache_MaintenanceVM = null;
                        }
                        if (obj != null)
                        {
                            cache_MaintenanceVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_MaintenanceVM;
                        }
                    }
                }
                public void DependencyPropertyChanged_tgPrePay_IsOn(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    ServicePump_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Windows.UI.Xaml.Controls.ToggleSwitch obj = sender as global::Windows.UI.Xaml.Controls.ToggleSwitch;
                        if (obj != null)
                        {
                            bindings.Update_tgPrePay_IsOn(obj.IsOn, DATA_CHANGED);
                        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.ToggleSwitch cache_tgPrePay = null;
                private long tokenDPC_tgPrePay_IsOn = 0;
                public void UpdateChildListeners_tgPrePay(global::Windows.UI.Xaml.Controls.ToggleSwitch obj)
                {
                    if (obj != cache_tgPrePay)
                    {
                        if (cache_tgPrePay != null)
                        {
                            cache_tgPrePay.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, tokenDPC_tgPrePay_IsOn);
                            cache_tgPrePay = null;
                        }
                        if (obj != null)
                        {
                            cache_tgPrePay = obj;
                            tokenDPC_tgPrePay_IsOn = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, DependencyPropertyChanged_tgPrePay_IsOn);
                        }
                    }
                }
                public void DependencyPropertyChanged_tgPostPay_IsOn(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    ServicePump_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Windows.UI.Xaml.Controls.ToggleSwitch obj = sender as global::Windows.UI.Xaml.Controls.ToggleSwitch;
                        if (obj != null)
                        {
                            bindings.Update_tgPostPay_IsOn(obj.IsOn, DATA_CHANGED);
                        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.ToggleSwitch cache_tgPostPay = null;
                private long tokenDPC_tgPostPay_IsOn = 0;
                public void UpdateChildListeners_tgPostPay(global::Windows.UI.Xaml.Controls.ToggleSwitch obj)
                {
                    if (obj != cache_tgPostPay)
                    {
                        if (cache_tgPostPay != null)
                        {
                            cache_tgPostPay.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, tokenDPC_tgPostPay_IsOn);
                            cache_tgPostPay = null;
                        }
                        if (obj != null)
                        {
                            cache_tgPostPay = obj;
                            tokenDPC_tgPostPay_IsOn = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, DependencyPropertyChanged_tgPostPay_IsOn);
                        }
                    }
                }
                public void RegisterTwoWayListener_2(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_2_IsOn();
                        }
                    });
                }
                public void RegisterTwoWayListener_3(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_3_IsOn();
                        }
                    });
                }
                public void RegisterTwoWayListener_4(global::Windows.UI.Xaml.Controls.ToggleSwitch sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.ToggleSwitch.IsOnProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_4_IsOn();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // View\Settings\MaintenanceOptions\ServicePump.xaml line 32
                {
                    this.tgPostPay = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            case 3: // View\Settings\MaintenanceOptions\ServicePump.xaml line 46
                {
                    this.tgPrePay = (global::Windows.UI.Xaml.Controls.ToggleSwitch)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Settings\MaintenanceOptions\ServicePump.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    ServicePump_obj1_Bindings bindings = new ServicePump_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

