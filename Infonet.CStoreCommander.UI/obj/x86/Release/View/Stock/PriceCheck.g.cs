#pragma checksum "F:\Infonet_final\InfonetUI-UWP_Dev\Infonet.CStoreCommander.UI\View\Stock\PriceCheck.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "E73777A7FAC352594B12CB84C17E2C38"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Infonet.CStoreCommander.UI.View.Stock
{
    partial class PriceCheck : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_UIElement_Visibility(global::Windows.UI.Xaml.UIElement obj, global::Windows.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Control_IsEnabled(global::Windows.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj, global::System.DateTimeOffset value)
            {
                obj.SelectedDate = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_PasswordBox_Password(global::Windows.UI.Xaml.Controls.PasswordBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_WinRT_Triggers_InvokeCommandAction_Command(global::WinRT.Triggers.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.CommandParameter = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class PriceCheck_obj27_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPriceCheck_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj27;
            private global::Windows.UI.Xaml.Controls.Button obj28;

            private PriceCheck_obj27_BindingsTracking bindingsTracking;

            public PriceCheck_obj27_Bindings()
            {
                this.bindingsTracking = new PriceCheck_obj27_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 27: // View\Stock\PriceCheck.xaml line 552
                        this.obj27 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 28: // View\Stock\PriceCheck.xaml line 592
                        this.obj28 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj27.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IPriceCheck_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Id(obj.Id, phase);
                    }
                }
            }
            private void Update_Id(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 592
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(this.obj28, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class PriceCheck_obj27_BindingsTracking
            {
                private global::System.WeakReference<PriceCheck_obj27_Bindings> weakRefToBindingObj; 

                public PriceCheck_obj27_BindingsTracking(PriceCheck_obj27_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<PriceCheck_obj27_Bindings>(obj);
                }

                public PriceCheck_obj27_Bindings TryGetBindingObject()
                {
                    PriceCheck_obj27_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj27_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Id(obj.Id, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Id":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Id(obj.Id, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj)
                {
                    PriceCheck_obj27_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class PriceCheck_obj33_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPriceCheck_Bindings
        {
            private global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj33;
            private global::Windows.UI.Xaml.Controls.Button obj34;

            private PriceCheck_obj33_BindingsTracking bindingsTracking;

            public PriceCheck_obj33_Bindings()
            {
                this.bindingsTracking = new PriceCheck_obj33_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 33: // View\Stock\PriceCheck.xaml line 448
                        this.obj33 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 34: // View\Stock\PriceCheck.xaml line 480
                        this.obj34 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj33.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IPriceCheck_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_Id(obj.Id, phase);
                    }
                }
            }
            private void Update_Id(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 480
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_CommandParameter(this.obj34, obj, null);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class PriceCheck_obj33_BindingsTracking
            {
                private global::System.WeakReference<PriceCheck_obj33_Bindings> weakRefToBindingObj; 

                public PriceCheck_obj33_BindingsTracking(PriceCheck_obj33_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<PriceCheck_obj33_Bindings>(obj);
                }

                public PriceCheck_obj33_Bindings TryGetBindingObject()
                {
                    PriceCheck_obj33_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj33_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_Id(obj.Id, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Id":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_Id(obj.Id, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel obj)
                {
                    PriceCheck_obj33_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class PriceCheck_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IPriceCheck_Bindings
        {
            private global::Infonet.CStoreCommander.UI.View.Stock.PriceCheck dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj9;
            private global::Infonet.CStoreCommander.UI.Controls.ViewHeading obj10;
            private global::Windows.UI.Xaml.Controls.Border obj11;
            private global::Windows.UI.Xaml.Controls.ScrollViewer obj12;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj13;
            private global::Infonet.CStoreCommander.ControlLib.GenericButton obj14;
            private global::Windows.UI.Xaml.Controls.ComboBox obj15;
            private global::Windows.UI.Xaml.Controls.Grid obj16;
            private global::Windows.UI.Xaml.Controls.Grid obj17;
            private global::Windows.UI.Xaml.Controls.ComboBox obj18;
            private global::Windows.UI.Xaml.Controls.Grid obj19;
            private global::Windows.UI.Xaml.Controls.Grid obj20;
            private global::Windows.UI.Xaml.Controls.Grid obj21;
            private global::Windows.UI.Xaml.Controls.Grid obj22;
            private global::Windows.UI.Xaml.Controls.GridView obj23;
            private global::Windows.UI.Xaml.Controls.Grid obj24;
            private global::Windows.UI.Xaml.Controls.Button obj25;
            private global::Windows.UI.Xaml.Controls.TextBlock obj29;
            private global::Windows.UI.Xaml.Controls.GridView obj30;
            private global::Windows.UI.Xaml.Controls.Grid obj31;
            private global::Windows.UI.Xaml.Controls.TextBlock obj35;
            private global::Windows.UI.Xaml.Controls.GridView obj36;
            private global::Windows.UI.Xaml.Controls.TextBlock obj39;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj40;
            private global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker obj41;
            private global::Windows.UI.Xaml.Controls.TextBox obj42;
            private global::MyToolkit.Extended.Controls.CustomTextBox obj43;
            private global::Windows.UI.Xaml.Controls.TextBox obj44;
            private global::Windows.UI.Xaml.Controls.TextBlock obj45;
            private global::Windows.UI.Xaml.Controls.PasswordBox obj46;
            private global::WinRT.Triggers.InvokeCommandAction obj47;
            private global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction obj48;

            private PriceCheck_obj1_BindingsTracking bindingsTracking;

            public PriceCheck_obj1_Bindings()
            {
                this.bindingsTracking = new PriceCheck_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 9: // View\Stock\PriceCheck.xaml line 168
                        this.obj9 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 10: // View\Stock\PriceCheck.xaml line 170
                        this.obj10 = (global::Infonet.CStoreCommander.UI.Controls.ViewHeading)target;
                        break;
                    case 11: // View\Stock\PriceCheck.xaml line 201
                        this.obj11 = (global::Windows.UI.Xaml.Controls.Border)target;
                        break;
                    case 12: // View\Stock\PriceCheck.xaml line 212
                        this.obj12 = (global::Windows.UI.Xaml.Controls.ScrollViewer)target;
                        break;
                    case 13: // View\Stock\PriceCheck.xaml line 622
                        this.obj13 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 14: // View\Stock\PriceCheck.xaml line 632
                        this.obj14 = (global::Infonet.CStoreCommander.ControlLib.GenericButton)target;
                        break;
                    case 15: // View\Stock\PriceCheck.xaml line 225
                        this.obj15 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_15(this.obj15);
                        break;
                    case 16: // View\Stock\PriceCheck.xaml line 267
                        this.obj16 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 17: // View\Stock\PriceCheck.xaml line 293
                        this.obj17 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 18: // View\Stock\PriceCheck.xaml line 324
                        this.obj18 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_18(this.obj18);
                        break;
                    case 19: // View\Stock\PriceCheck.xaml line 339
                        this.obj19 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 20: // View\Stock\PriceCheck.xaml line 347
                        this.obj20 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 21: // View\Stock\PriceCheck.xaml line 406
                        this.obj21 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 22: // View\Stock\PriceCheck.xaml line 506
                        this.obj22 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 23: // View\Stock\PriceCheck.xaml line 541
                        this.obj23 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 24: // View\Stock\PriceCheck.xaml line 603
                        this.obj24 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 25: // View\Stock\PriceCheck.xaml line 608
                        this.obj25 = (global::Windows.UI.Xaml.Controls.Button)target;
                        break;
                    case 29: // View\Stock\PriceCheck.xaml line 534
                        this.obj29 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 30: // View\Stock\PriceCheck.xaml line 437
                        this.obj30 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 31: // View\Stock\PriceCheck.xaml line 490
                        this.obj31 = (global::Windows.UI.Xaml.Controls.Grid)target;
                        break;
                    case 35: // View\Stock\PriceCheck.xaml line 429
                        this.obj35 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 36: // View\Stock\PriceCheck.xaml line 367
                        this.obj36 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 39: // View\Stock\PriceCheck.xaml line 361
                        this.obj39 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 40: // View\Stock\PriceCheck.xaml line 300
                        this.obj40 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        this.bindingsTracking.RegisterTwoWayListener_40(this.obj40);
                        break;
                    case 41: // View\Stock\PriceCheck.xaml line 310
                        this.obj41 = (global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker)target;
                        this.bindingsTracking.RegisterTwoWayListener_41(this.obj41);
                        break;
                    case 42: // View\Stock\PriceCheck.xaml line 284
                        this.obj42 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_42(this.obj42);
                        break;
                    case 43: // View\Stock\PriceCheck.xaml line 245
                        this.obj43 = (global::MyToolkit.Extended.Controls.CustomTextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_43(this.obj43);
                        break;
                    case 44: // View\Stock\PriceCheck.xaml line 256
                        this.obj44 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_44(this.obj44);
                        break;
                    case 45: // View\Stock\PriceCheck.xaml line 206
                        this.obj45 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 46: // View\Stock\PriceCheck.xaml line 180
                        this.obj46 = (global::Windows.UI.Xaml.Controls.PasswordBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_46(this.obj46);
                        break;
                    case 47: // View\Stock\PriceCheck.xaml line 188
                        this.obj47 = (global::WinRT.Triggers.InvokeCommandAction)target;
                        break;
                    case 48: // View\Stock\PriceCheck.xaml line 194
                        this.obj48 = (global::Microsoft.Xaml.Interactions.Core.InvokeCommandAction)target;
                        break;
                    default:
                        break;
                }
            }

            // IPriceCheck_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::Infonet.CStoreCommander.UI.View.Stock.PriceCheck)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Infonet.CStoreCommander.UI.View.Stock.PriceCheck obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PriceCheckVM(obj.PriceCheckVM, phase);
                    }
                }
            }
            private void Update_PriceCheckVM(global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceCheckVM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PriceCheckVM_ShowPriceCheck(obj.ShowPriceCheck, phase);
                        this.Update_PriceCheckVM_ShowPriceChange(obj.ShowPriceChange, phase);
                        this.Update_PriceCheckVM_IsEditButtonEnabled(obj.IsEditButtonEnabled, phase);
                        this.Update_PriceCheckVM_ShowEditButton(obj.ShowEditButton, phase);
                        this.Update_PriceCheckVM_StockPriceModel(obj.StockPriceModel, phase);
                        this.Update_PriceCheckVM_EditPriceCommand(obj.EditPriceCommand, phase);
                        this.Update_PriceCheckVM_ShowSaveButton(obj.ShowSaveButton, phase);
                        this.Update_PriceCheckVM_ChangePriceCommand(obj.ChangePriceCommand, phase);
                        this.Update_PriceCheckVM_IsEditButtonPressed(obj.IsEditButtonPressed, phase);
                        this.Update_PriceCheckVM_SelectedPriceIndex(obj.SelectedPriceIndex, phase);
                        this.Update_PriceCheckVM_ShowDates(obj.ShowDates, phase);
                        this.Update_PriceCheckVM_ShowPriceUnits(obj.ShowPriceUnits, phase);
                        this.Update_PriceCheckVM_PriceUnits(obj.PriceUnits, phase);
                        this.Update_PriceCheckVM_SelectedPriceUnitIndex(obj.SelectedPriceUnitIndex, phase);
                        this.Update_PriceCheckVM_ShowGrids(obj.ShowGrids, phase);
                        this.Update_PriceCheckVM_ShowPrices(obj.ShowPrices, phase);
                        this.Update_PriceCheckVM_ShowQuantityAndPrice(obj.ShowQuantityAndPrice, phase);
                        this.Update_PriceCheckVM_ShowFromToPrice(obj.ShowFromToPrice, phase);
                        this.Update_PriceCheckVM_PriceTypeList(obj.PriceTypeList, phase);
                        this.Update_PriceCheckVM_PlusCommand(obj.PlusCommand, phase);
                        this.Update_PriceCheckVM_Column2Header(obj.Column2Header, phase);
                        this.Update_PriceCheckVM_StockCode(obj.StockCode, phase);
                        this.Update_PriceCheckVM_IsStockCodeEnabled(obj.IsStockCodeEnabled, phase);
                        this.Update_PriceCheckVM_SearchByStockCodeCommand(obj.SearchByStockCodeCommand, phase);
                        this.Update_PriceCheckVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, phase);
                    }
                }
            }
            private void Update_PriceCheckVM_ShowPriceCheck(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 168
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj9, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowPriceChange(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 170
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj10, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_IsEditButtonEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 201
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj11, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    // View\Stock\PriceCheck.xaml line 212
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj12, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowEditButton(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 622
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj13, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel(global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceCheckVM_StockPriceModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_PriceCheckVM_StockPriceModel_IsChangePriceEnable(obj.IsChangePriceEnable, phase);
                        this.Update_PriceCheckVM_StockPriceModel_IsPriceVisible(obj.IsPriceVisible, phase);
                        this.Update_PriceCheckVM_StockPriceModel_SpecialPriceTypes(obj.SpecialPriceTypes, phase);
                        this.Update_PriceCheckVM_StockPriceModel_IsTaxExemptVisible(obj.IsTaxExemptVisible, phase);
                        this.Update_PriceCheckVM_StockPriceModel_FromDate(obj.FromDate, phase);
                        this.Update_PriceCheckVM_StockPriceModel_ToDate(obj.ToDate, phase);
                        this.Update_PriceCheckVM_StockPriceModel_TaxExemptAvailable(obj.TaxExemptAvailable, phase);
                        this.Update_PriceCheckVM_StockPriceModel_IsSpecialPricingVisible(obj.IsSpecialPricingVisible, phase);
                        this.Update_PriceCheckVM_StockPriceModel_AvailableQuantity(obj.AvailableQuantity, phase);
                        this.Update_PriceCheckVM_StockPriceModel_IsAvQtyVisible(obj.IsAvQtyVisible, phase);
                        this.Update_PriceCheckVM_StockPriceModel_Description(obj.Description, phase);
                    }
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsChangePriceEnable(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 622
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj13, obj);
                }
            }
            private void Update_PriceCheckVM_EditPriceCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 622
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj13, obj, null);
                }
            }
            private void Update_PriceCheckVM_ShowSaveButton(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 632
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj14, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ChangePriceCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 632
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj14, obj, null);
                }
            }
            private void Update_PriceCheckVM_IsEditButtonPressed(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 225
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj15, obj);
                    // View\Stock\PriceCheck.xaml line 603
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj24, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    // View\Stock\PriceCheck.xaml line 490
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj31, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                    // View\Stock\PriceCheck.xaml line 300
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj40, obj);
                    // View\Stock\PriceCheck.xaml line 310
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj41, obj);
                    // View\Stock\PriceCheck.xaml line 245
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj43, obj);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsPriceVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 225
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj15, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_SpecialPriceTypes(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceCheckVM_StockPriceModel_SpecialPriceTypes(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 225
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj15, obj, null);
                }
            }
            private void Update_PriceCheckVM_SelectedPriceIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 225
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj15, (global::System.Int32)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Int32), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsTaxExemptVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 267
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj16, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowDates(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 293
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj17, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowPriceUnits(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 324
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj18, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_PriceUnits(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 324
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj18, obj, null);
                }
            }
            private void Update_PriceCheckVM_SelectedPriceUnitIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 324
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj18, (global::System.Int32)this.LookupConverter("NothingConverter").Convert(obj, typeof(global::System.Int32), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowGrids(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 339
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj19, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowPrices(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 347
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj20, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowQuantityAndPrice(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 406
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj21, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_ShowFromToPrice(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 506
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj22, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_PriceTypeList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_PriceCheckVM_PriceTypeList(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 541
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj23, obj, null);
                    // View\Stock\PriceCheck.xaml line 437
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj30, obj, null);
                    // View\Stock\PriceCheck.xaml line 367
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj36, obj, null);
                }
            }
            private void Update_PriceCheckVM_PlusCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 608
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj25, obj, null);
                }
            }
            private void Update_PriceCheckVM_Column2Header(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 534
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj29, obj, null);
                    // View\Stock\PriceCheck.xaml line 429
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj35, obj, null);
                    // View\Stock\PriceCheck.xaml line 361
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj39, obj, null);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_FromDate(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 300
                    XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj40, obj);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_ToDate(global::System.DateTimeOffset obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 310
                    XamlBindingSetters.Set_Infonet_CStoreCommander_ControlLib_CustomCalendarDatePicker_SelectedDate(this.obj41, obj);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_TaxExemptAvailable(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 284
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj42, obj, null);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsSpecialPricingVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 245
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj43, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_AvailableQuantity(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 256
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj44, obj, null);
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_IsAvQtyVisible(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 256
                    XamlBindingSetters.Set_Windows_UI_Xaml_UIElement_Visibility(this.obj44, (global::Windows.UI.Xaml.Visibility)this.LookupConverter("BoolToVisibilityConverter").Convert(obj, typeof(global::Windows.UI.Xaml.Visibility), null, null));
                }
            }
            private void Update_PriceCheckVM_StockPriceModel_Description(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 206
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj45, obj, null);
                }
            }
            private void Update_PriceCheckVM_StockCode(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 180
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_PasswordBox_Password(this.obj46, obj, null);
                }
            }
            private void Update_PriceCheckVM_IsStockCodeEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 180
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Control_IsEnabled(this.obj46, obj);
                }
            }
            private void Update_PriceCheckVM_SearchByStockCodeCommand(global::GalaSoft.MvvmLight.Command.RelayCommand<global::System.Object> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 188
                    XamlBindingSetters.Set_WinRT_Triggers_InvokeCommandAction_Command(this.obj47, obj, null);
                }
            }
            private void Update_PriceCheckVM_InvokeKeyboardCommand(global::GalaSoft.MvvmLight.Command.RelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // View\Stock\PriceCheck.xaml line 194
                    XamlBindingSetters.Set_Microsoft_Xaml_Interactions_Core_InvokeCommandAction_Command(this.obj48, obj, null);
                }
            }
            private void UpdateTwoWay_15_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceCheckVM != null)
                        {
                            this.dataRoot.PriceCheckVM.SelectedPriceIndex = (global::System.Int32)this.LookupConverter("NothingConverter").ConvertBack(this.obj15.SelectedIndex, typeof(global::System.Int32), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_18_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceCheckVM != null)
                        {
                            this.dataRoot.PriceCheckVM.SelectedPriceUnitIndex = (global::System.Int32)this.LookupConverter("NothingConverter").ConvertBack(this.obj18.SelectedIndex, typeof(global::System.Int32), null, null);
                        }
                    }
                }
            }
            private void UpdateTwoWay_40_SelectedDate()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceCheckVM != null)
                        {
                            if (this.dataRoot.PriceCheckVM.StockPriceModel != null)
                            {
                                this.dataRoot.PriceCheckVM.StockPriceModel.FromDate = this.obj40.SelectedDate;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_41_SelectedDate()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceCheckVM != null)
                        {
                            if (this.dataRoot.PriceCheckVM.StockPriceModel != null)
                            {
                                this.dataRoot.PriceCheckVM.StockPriceModel.ToDate = this.obj41.SelectedDate;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_42_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceCheckVM != null)
                        {
                            if (this.dataRoot.PriceCheckVM.StockPriceModel != null)
                            {
                                this.dataRoot.PriceCheckVM.StockPriceModel.TaxExemptAvailable = this.obj42.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_43_Visibility()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceCheckVM != null)
                        {
                            if (this.dataRoot.PriceCheckVM.StockPriceModel != null)
                            {
                                this.dataRoot.PriceCheckVM.StockPriceModel.IsSpecialPricingVisible = (global::System.Boolean)this.LookupConverter("BoolToVisibilityConverter").ConvertBack(this.obj43.Visibility, typeof(global::System.Boolean), null, null);
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_44_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceCheckVM != null)
                        {
                            if (this.dataRoot.PriceCheckVM.StockPriceModel != null)
                            {
                                this.dataRoot.PriceCheckVM.StockPriceModel.AvailableQuantity = this.obj44.Text;
                            }
                        }
                    }
                }
            }
            private void UpdateTwoWay_46_Password()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.PriceCheckVM != null)
                        {
                            this.dataRoot.PriceCheckVM.StockCode = this.obj46.Password;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class PriceCheck_obj1_BindingsTracking
            {
                private global::System.WeakReference<PriceCheck_obj1_Bindings> weakRefToBindingObj; 

                public PriceCheck_obj1_BindingsTracking(PriceCheck_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<PriceCheck_obj1_Bindings>(obj);
                }

                public PriceCheck_obj1_Bindings TryGetBindingObject()
                {
                    PriceCheck_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_PriceCheckVM(null);
                    UpdateChildListeners_PriceCheckVM_StockPriceModel(null);
                    UpdateChildListeners_PriceCheckVM_StockPriceModel_SpecialPriceTypes(null);
                    UpdateChildListeners_PriceCheckVM_PriceTypeList(null);
                }

                public void PropertyChanged_PriceCheckVM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM obj = sender as global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_PriceCheckVM_ShowPriceCheck(obj.ShowPriceCheck, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowPriceChange(obj.ShowPriceChange, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_IsEditButtonEnabled(obj.IsEditButtonEnabled, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowEditButton(obj.ShowEditButton, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel(obj.StockPriceModel, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_EditPriceCommand(obj.EditPriceCommand, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowSaveButton(obj.ShowSaveButton, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ChangePriceCommand(obj.ChangePriceCommand, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_IsEditButtonPressed(obj.IsEditButtonPressed, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_SelectedPriceIndex(obj.SelectedPriceIndex, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowDates(obj.ShowDates, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowPriceUnits(obj.ShowPriceUnits, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_PriceUnits(obj.PriceUnits, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_SelectedPriceUnitIndex(obj.SelectedPriceUnitIndex, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowGrids(obj.ShowGrids, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowPrices(obj.ShowPrices, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowQuantityAndPrice(obj.ShowQuantityAndPrice, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_ShowFromToPrice(obj.ShowFromToPrice, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_PriceTypeList(obj.PriceTypeList, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_PlusCommand(obj.PlusCommand, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_Column2Header(obj.Column2Header, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockCode(obj.StockCode, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_IsStockCodeEnabled(obj.IsStockCodeEnabled, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_SearchByStockCodeCommand(obj.SearchByStockCodeCommand, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "ShowPriceCheck":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowPriceCheck(obj.ShowPriceCheck, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowPriceChange":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowPriceChange(obj.ShowPriceChange, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEditButtonEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_IsEditButtonEnabled(obj.IsEditButtonEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowEditButton":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowEditButton(obj.ShowEditButton, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StockPriceModel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel(obj.StockPriceModel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EditPriceCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_EditPriceCommand(obj.EditPriceCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowSaveButton":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowSaveButton(obj.ShowSaveButton, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ChangePriceCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ChangePriceCommand(obj.ChangePriceCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsEditButtonPressed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_IsEditButtonPressed(obj.IsEditButtonPressed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPriceIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_SelectedPriceIndex(obj.SelectedPriceIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowDates":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowDates(obj.ShowDates, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowPriceUnits":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowPriceUnits(obj.ShowPriceUnits, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PriceUnits":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_PriceUnits(obj.PriceUnits, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedPriceUnitIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_SelectedPriceUnitIndex(obj.SelectedPriceUnitIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowGrids":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowGrids(obj.ShowGrids, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowPrices":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowPrices(obj.ShowPrices, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowQuantityAndPrice":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowQuantityAndPrice(obj.ShowQuantityAndPrice, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowFromToPrice":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_ShowFromToPrice(obj.ShowFromToPrice, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PriceTypeList":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_PriceTypeList(obj.PriceTypeList, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PlusCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_PlusCommand(obj.PlusCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Column2Header":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_Column2Header(obj.Column2Header, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "StockCode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockCode(obj.StockCode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsStockCodeEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_IsStockCodeEnabled(obj.IsStockCodeEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SearchByStockCodeCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_SearchByStockCodeCommand(obj.SearchByStockCodeCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "InvokeKeyboardCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_InvokeKeyboardCommand(obj.InvokeKeyboardCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM cache_PriceCheckVM = null;
                public void UpdateChildListeners_PriceCheckVM(global::Infonet.CStoreCommander.UI.ViewModel.Stock.PriceCheckVM obj)
                {
                    if (obj != cache_PriceCheckVM)
                    {
                        if (cache_PriceCheckVM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceCheckVM).PropertyChanged -= PropertyChanged_PriceCheckVM;
                            cache_PriceCheckVM = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceCheckVM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceCheckVM;
                        }
                    }
                }
                public void PropertyChanged_PriceCheckVM_StockPriceModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel obj = sender as global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_PriceCheckVM_StockPriceModel_IsChangePriceEnable(obj.IsChangePriceEnable, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_IsPriceVisible(obj.IsPriceVisible, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_SpecialPriceTypes(obj.SpecialPriceTypes, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_IsTaxExemptVisible(obj.IsTaxExemptVisible, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_FromDate(obj.FromDate, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_ToDate(obj.ToDate, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_TaxExemptAvailable(obj.TaxExemptAvailable, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_IsSpecialPricingVisible(obj.IsSpecialPricingVisible, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_AvailableQuantity(obj.AvailableQuantity, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_IsAvQtyVisible(obj.IsAvQtyVisible, DATA_CHANGED);
                                bindings.Update_PriceCheckVM_StockPriceModel_Description(obj.Description, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsChangePriceEnable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsChangePriceEnable(obj.IsChangePriceEnable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsPriceVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsPriceVisible(obj.IsPriceVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SpecialPriceTypes":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_SpecialPriceTypes(obj.SpecialPriceTypes, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsTaxExemptVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsTaxExemptVisible(obj.IsTaxExemptVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FromDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_FromDate(obj.FromDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ToDate":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_ToDate(obj.ToDate, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "TaxExemptAvailable":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_TaxExemptAvailable(obj.TaxExemptAvailable, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsSpecialPricingVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsSpecialPricingVisible(obj.IsSpecialPricingVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "AvailableQuantity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_AvailableQuantity(obj.AvailableQuantity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsAvQtyVisible":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_IsAvQtyVisible(obj.IsAvQtyVisible, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Description":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_PriceCheckVM_StockPriceModel_Description(obj.Description, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel cache_PriceCheckVM_StockPriceModel = null;
                public void UpdateChildListeners_PriceCheckVM_StockPriceModel(global::Infonet.CStoreCommander.UI.Model.Stock.StockPriceModel obj)
                {
                    if (obj != cache_PriceCheckVM_StockPriceModel)
                    {
                        if (cache_PriceCheckVM_StockPriceModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceCheckVM_StockPriceModel).PropertyChanged -= PropertyChanged_PriceCheckVM_StockPriceModel;
                            cache_PriceCheckVM_StockPriceModel = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceCheckVM_StockPriceModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceCheckVM_StockPriceModel;
                        }
                    }
                }
                public void PropertyChanged_PriceCheckVM_StockPriceModel_SpecialPriceTypes(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PriceCheckVM_StockPriceModel_SpecialPriceTypes(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::System.String>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::System.String> cache_PriceCheckVM_StockPriceModel_SpecialPriceTypes = null;
                public void UpdateChildListeners_PriceCheckVM_StockPriceModel_SpecialPriceTypes(global::System.Collections.ObjectModel.ObservableCollection<global::System.String> obj)
                {
                    if (obj != cache_PriceCheckVM_StockPriceModel_SpecialPriceTypes)
                    {
                        if (cache_PriceCheckVM_StockPriceModel_SpecialPriceTypes != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceCheckVM_StockPriceModel_SpecialPriceTypes).PropertyChanged -= PropertyChanged_PriceCheckVM_StockPriceModel_SpecialPriceTypes;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_PriceCheckVM_StockPriceModel_SpecialPriceTypes).CollectionChanged -= CollectionChanged_PriceCheckVM_StockPriceModel_SpecialPriceTypes;
                            cache_PriceCheckVM_StockPriceModel_SpecialPriceTypes = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceCheckVM_StockPriceModel_SpecialPriceTypes = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceCheckVM_StockPriceModel_SpecialPriceTypes;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_PriceCheckVM_StockPriceModel_SpecialPriceTypes;
                        }
                    }
                }
                public void PropertyChanged_PriceCheckVM_PriceTypeList(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_PriceCheckVM_PriceTypeList(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    PriceCheck_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel> cache_PriceCheckVM_PriceTypeList = null;
                public void UpdateChildListeners_PriceCheckVM_PriceTypeList(global::System.Collections.ObjectModel.ObservableCollection<global::Infonet.CStoreCommander.UI.Model.Stock.PriceTypeModel> obj)
                {
                    if (obj != cache_PriceCheckVM_PriceTypeList)
                    {
                        if (cache_PriceCheckVM_PriceTypeList != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_PriceCheckVM_PriceTypeList).PropertyChanged -= PropertyChanged_PriceCheckVM_PriceTypeList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_PriceCheckVM_PriceTypeList).CollectionChanged -= CollectionChanged_PriceCheckVM_PriceTypeList;
                            cache_PriceCheckVM_PriceTypeList = null;
                        }
                        if (obj != null)
                        {
                            cache_PriceCheckVM_PriceTypeList = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_PriceCheckVM_PriceTypeList;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_PriceCheckVM_PriceTypeList;
                        }
                    }
                }
                public void RegisterTwoWayListener_15(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_18(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_18_SelectedIndex();
                        }
                    });
                }
                public void RegisterTwoWayListener_40(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker.SelectedDateProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_40_SelectedDate();
                        }
                    });
                }
                public void RegisterTwoWayListener_41(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Infonet.CStoreCommander.ControlLib.CustomCalendarDatePicker.SelectedDateProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_41_SelectedDate();
                        }
                    });
                }
                public void RegisterTwoWayListener_42(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_42_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_43(global::MyToolkit.Extended.Controls.CustomTextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.UIElement.VisibilityProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_43_Visibility();
                        }
                    });
                }
                public void RegisterTwoWayListener_44(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.LostFocus += (sender, e) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_44_Text();
                        }
                    };
                }
                public void RegisterTwoWayListener_46(global::Windows.UI.Xaml.Controls.PasswordBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.PasswordBox.PasswordProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_46_Password();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // View\Stock\PriceCheck.xaml line 52
                {
                    this.GenericButtonStyle = (global::Windows.UI.Xaml.Style)(target);
                }
                break;
            case 8: // View\Stock\PriceCheck.xaml line 157
                {
                    this.RootGrid = (global::Windows.UI.Xaml.Controls.Grid)(target);
                }
                break;
            case 23: // View\Stock\PriceCheck.xaml line 541
                {
                    this.gridView = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 30: // View\Stock\PriceCheck.xaml line 437
                {
                    this.gridViewWithTwoColumn = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 36: // View\Stock\PriceCheck.xaml line 367
                {
                    this.ProductListContainer = (global::Windows.UI.Xaml.Controls.GridView)(target);
                }
                break;
            case 43: // View\Stock\PriceCheck.xaml line 245
                {
                    this.txtRegularPrice = (global::MyToolkit.Extended.Controls.CustomTextBox)(target);
                }
                break;
            case 44: // View\Stock\PriceCheck.xaml line 256
                {
                    this.txtAvailableQuantity = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 46: // View\Stock\PriceCheck.xaml line 180
                {
                    this.txtStockCode = (global::Windows.UI.Xaml.Controls.PasswordBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.18362.1")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // View\Stock\PriceCheck.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    PriceCheck_obj1_Bindings bindings = new PriceCheck_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 27: // View\Stock\PriceCheck.xaml line 552
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element27 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    PriceCheck_obj27_Bindings bindings = new PriceCheck_obj27_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element27.DataContext);
                    element27.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element27, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element27, bindings);
                }
                break;
            case 33: // View\Stock\PriceCheck.xaml line 448
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element33 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    PriceCheck_obj33_Bindings bindings = new PriceCheck_obj33_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element33.DataContext);
                    element33.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element33, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element33, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

